---
title: "Graph here, graph there"
format: html
aliases:
  - ../chapter_04/exercise.html
---

It is time to work with spatial weights matrices by yourself.

## Zones of suburbanisation

You are familiar with Prague from the last section, so let's zoom out to zones of suburbanisation
around Prague and other Czech cities. Head over to the [DataHub](https://datahub.natur.cuni.cz) of the Faculty of Science and
download the dataset called ["Zóny rezidenční suburbanizace 2008-2016"](https://datahub.natur.cuni.cz/datasets/zóny-rezidenční-suburbanizace-2008-2016/explore) containing the zones of residential suburbanisation outlined by @ouvrednivcek2019between. Download the dataset and open it with `geopandas`. Ensure that you are using a column with unique values as an index.

::: {.callout-note collapse="true"}
# Backup data

If the link does not work, please [report it](https://github.com/martinfleis/sds/issues/new) and use the [backup](https://martinfleischmann.net/sds/spatial_graphs/data/zony_suburbanizace_2008_2016.zip).
:::

### Interaction with Graphs

1. Create a contiguity matrix using the Queen criterion
1. Let's focus on Prague.  How many neighbours does it have?
1. Reproduce the previous section's zoom plot with Prague and its neighbours. Can you make that plot as both static and interactive maps?
1. Create a block spatial weights matrix where every geometry is connected to other geometries in the NUTS2 region.
1. Create KNN weights with 5 neighbours. Remember that KNN expects point geometry.
1. Compare the number of neighbours by geometry for the three weights matrices. Which one has more? Why? Can you compare distributions of number of neighbors as kde plots?

### Spatial lag

Let's have a look at spatial lag. Before proceeding, you will probably need to pre-process the column with the population (`"obyv_31122"`) since it comes as `string`. Assuming the `GeoDataFrame` is called `suburbanisation`, you can do the following to cast it to `float`.

```py
suburbanisation["obyv_31122"] = (
    suburbanisation["obyv_31122"].replace("?", None).astype(float)
)
```

1. Measure spatial lag (as mean, so don't forget to standardise your weights) of the `"obyv_31122"` column using all weights matrices you have created.
1. What is the difference in results for Prague? Can you explain why?
