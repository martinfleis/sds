[
  {
    "objectID": "classification/concepts.html",
    "href": "classification/concepts.html",
    "title": "Is there space in machine learning?",
    "section": "",
    "text": "Slides from the talk introducing the generic concepts of machine learning, explaining decision trees, and outlining ways of incorporating spatial dimension into the formula.",
    "crumbs": [
      "Machine learning",
      "Is there space in machine learning?"
    ]
  },
  {
    "objectID": "classification/concepts.html#acknowledgements",
    "href": "classification/concepts.html#acknowledgements",
    "title": "Is there space in machine learning?",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe slides embed A visual introduction to machine learning by Stephanie Yee and Tony Chu, available from http://www.r2d3.us/visual-intro-to-machine-learning-part-1/.",
    "crumbs": [
      "Machine learning",
      "Is there space in machine learning?"
    ]
  },
  {
    "objectID": "classification/hands_on.html",
    "href": "classification/hands_on.html",
    "title": "Classification and regression",
    "section": "",
    "text": "Linear regression, covered in the previous chapter, is often seen as an entry method to enter the world of supervised machine learning. However, not every phenomenon can be explained using a linear relationship, and not everything is a regression. For the former, you need to use methods that have a bit more complicated math behind them (but often the same Python API). For the latter, you will often need to look for classification models. Both of these options are covered in this chapter, which will outline methods of introducing spatial dimension to commonly used machine learning models. To a degree, it is a continuation of the work covered last time, but there are some new things here and there.\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport shapely\nfrom libpysal import graph\nfrom sklearn import ensemble, metrics, model_selection",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#data",
    "href": "classification/hands_on.html#data",
    "title": "Classification and regression",
    "section": "Data",
    "text": "Data\nThe data you will work with today comes from the study on the urban development of Prague, published in Fleischmann et al. (2022). The original dataset is significantly simplified for the purpose of this material and contains point data reflecting the location of buildings in Prague with a subset of measured attributes describing each one and (aggregated) type of urban development they belong to. The type is a categorical variable that will be your dependent variable today. The goal is to use the other variables and spatial information to predict which type each building belongs to.\n\n\n\n\n\n\nCaution\n\n\n\nThe dataset contains ~140k points, so I don’t recommend using explore() on all of it.\n\n\n\nbuilding_data = gpd.read_file(\n  \"https://martinfleischmann.net/sds/classification/data/prg_building_locations.gpkg\",\n)\nbuilding_data.head()\n\n\n\n\n\n\n\n\ncluster\nfloor_area_ratio\nheight\ncompactness\nstreet_alignment\ninterbuilding_distance\nblock_perimeter_wall_length\nbasic_settlement_unit\ncadastral zone\ngeometry\n\n\n\n\n0\nlarge-scale industry\n0.614375\n23.458\n0.747131\n10.601522\n37.185479\n57.751467\nU cementárny\nRadotín\nPOINT (-749841.681 -1052279.951)\n\n\n1\nmedieval city\n2.993299\n16.099\n0.469154\n8.655982\n8.547983\n1033.921828\nHorní malostranský obvod\nMalá Strana\nPOINT (-744432.289 -1042699.409)\n\n\n2\nperiphery\n0.108374\n3.673\n0.498831\n2.473966\n26.135688\n74.432812\nDolní Měcholupy-střed\nDolní Měcholupy\nPOINT (-733300.261 -1048136.856)\n\n\n3\nperiphery\n0.290723\n9.097\n0.627294\n6.054875\n32.423481\n38.592030\nTrojský obvod\nTroja\nPOINT (-742468.177 -1039691.997)\n\n\n4\ngrids\n0.017193\n4.216\n0.540439\n0.134446\n48.068409\n49.125654\nVrch Svatého kříže\nŽižkov\nPOINT (-740093.985 -1043857.813)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nbuilding_data = gpd.read_file(\n    \"prg_building_locations.gpkg\",\n)\n\n\n\nThe original taxonomy has been re-classified to provide eight types of urban development shown in the figure below.\n\nax = building_data.plot(\n1    \"cluster\", legend=True, figsize=(9, 9), markersize=0.005\n)\nax.set_axis_off()\n\n\n1\n\nSince you plot many points, they would overlap using the default size.\n\n\n\n\n\n\n\nTypology of urban development in Prague\n\n\n\n\nList the columns containing some numerical value and save it as a variable. There are six of them out of the original few hundred.\n\nindependent_variables = [\n    \"floor_area_ratio\",\n    \"height\",\n    \"compactness\",\n    \"street_alignment\",\n    \"interbuilding_distance\",\n    \"block_perimeter_wall_length\",\n]\n\nIt may be helpful to understand the spatial distribution of each of them to know what to expect, and build an intuition about their relationship with the classification above.\n\nfig, axs = plt.subplots(3, 2, figsize=(9, 9))\naxs = axs.flatten()\nfor i, var in enumerate(independent_variables):\n    building_data.plot(var, markersize=0.01, cmap=\"bone_r\", ax=axs[i])\n    axs[i].set_title(var, fontdict={\"fontsize\": 8})\n    axs[i].set_axis_off()\n\n\n\n\nIndependent (or explanatory) variables",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#classification-101",
    "href": "classification/hands_on.html#classification-101",
    "title": "Classification and regression",
    "section": "Classification 101",
    "text": "Classification 101\nThe main task of today is to train classification models using the scikit-learn, so let’s begin.\n\nData preparation\nThe dataset contains a bit over 140k points. While more data tend to bring additional performance to ML models, the relationship is far from linear, and you often get nearly as performant models using just a fraction of data. Moreover, it takes longer to train on more data :).\nSelect a random sample of 20k points you will work with. You can later test for yourself how big of an effect the size of the sample has.\n\n1training_sample = building_data.sample(20_000, random_state=0)\n\n\n1\n\nrandom_state ensures reproducibility. The sample will be the same every time.\n\n\n\n\nFrom the sample, extract the DataFrame with just the independent variables for the simplicity.\n\nindependent = training_sample[independent_variables]\nindependent.head(2)\n\n\n\n\n\n\n\n\nfloor_area_ratio\nheight\ncompactness\nstreet_alignment\ninterbuilding_distance\nblock_perimeter_wall_length\n\n\n\n\n34984\n0.139151\n4.833\n0.321089\n0.615831\n26.019856\n72.103088\n\n\n39935\n2.209054\n20.939\n0.584905\n2.867204\n21.971761\n1107.995952\n\n\n\n\n\n\n\n\n\nTrain-test split\nSome data are used to train the model, but the same data cannot be used for evaluation. The models tend to learn those exact values, and the performance metrics derived from training data show a much higher score than the model can on unseen data. One way around this is to split the dataset into two parts - train and test. The train part is used to train the model. However, the test part is left out of training and is later used to evaluate performance without worrying that any of the data points were seen by the model before.\nscikit-learn offers handy function to split the data into train and test parts, dealing with both dependent and independent variables at the same time.\n\n1X_train, X_test, y_train, y_test = model_selection.train_test_split(\n    independent, training_sample[\"cluster\"], test_size=0.25, random_state=0\n)\n\n\n1\n\nX and y are not very explanatory variable names but they are used in ML so often to reflect independent (X) and dependent (y) variables that everyone knows what they mean.\n\n\n\n\n\n\nRandom Forest Classifier\nWhile there is a large number of ML models available, your goal today is not to understand which ML model is better and how to fine-tune it but how to include the spatial dimension in them. So, let’s not complicate the situation and stick to one of the common models - random forest.\nRandom forest classifier is implemented within the ensemble module of the scikit-learn and has the API you should already be familiar with. Get the training data and fit the baseline model without thinking about space and geography at all.\n\n1model = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\n2model.fit(X_train, y_train)\n\n\n1\n\nn_jobs=-1 specifies that the algorithm should use all available cores. Otherwise, it runs in a single thread only.\n\n2\n\nThe first argument is a 2-D array of independent variables, and the second is a 1-D array of labels you want to predict. You could potentially change\n\n\n\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\n\nPrediction\nThe trained model can be directly used to predict the classes (type of development in this case). Using the test portion of data, you can get the predicted label:\n\npred = model.predict(X_test)\npred\n\narray(['single family housing', 'single family housing', 'medieval city',\n       ..., 'single family housing', 'grids', 'single family housing'],\n      dtype=object)\n\n\nOr probabilities for every single class. The class prediction above just involves selecting the one with the maximum probability.\n\nproba = model.predict_proba(X_test)\nproba\n\narray([[0.02, 0.18, 0.06, ..., 0.04, 0.42, 0.25],\n       [0.01, 0.  , 0.  , ..., 0.13, 0.86, 0.  ],\n       [0.  , 0.2 , 0.  , ..., 0.  , 0.  , 0.  ],\n       ...,\n       [0.03, 0.09, 0.  , ..., 0.07, 0.49, 0.32],\n       [0.  , 0.99, 0.  , ..., 0.  , 0.  , 0.01],\n       [0.07, 0.18, 0.04, ..., 0.  , 0.52, 0.09]])\n\n\nBoth outputs are numpy arrays, but the probabilities would be especially helpful to see as a DataFrame with column names representing class names. Those are available as .classes_:\n\nmodel.classes_\n\narray(['fringe development', 'grids', 'housing estates',\n       'large-scale industry', 'medieval city', 'periphery',\n       'single family housing', 'small-scale row houses'], dtype=object)\n\n\nYou can quickly combine it all with the original index to get a DataFrame of probabilities.\n\npd.DataFrame(proba, columns=model.classes_, index=X_test.index)\n\n\n\n\n\n\n\n\nfringe development\ngrids\nhousing estates\nlarge-scale industry\nmedieval city\nperiphery\nsingle family housing\nsmall-scale row houses\n\n\n\n\n42677\n0.02\n0.18\n0.06\n0.03\n0.0\n0.04\n0.42\n0.25\n\n\n72818\n0.01\n0.00\n0.00\n0.00\n0.0\n0.13\n0.86\n0.00\n\n\n8884\n0.00\n0.20\n0.00\n0.00\n0.8\n0.00\n0.00\n0.00\n\n\n85469\n0.25\n0.00\n0.01\n0.01\n0.0\n0.10\n0.63\n0.00\n\n\n111045\n0.45\n0.01\n0.05\n0.20\n0.0\n0.27\n0.02\n0.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17114\n0.60\n0.00\n0.06\n0.07\n0.0\n0.21\n0.06\n0.00\n\n\n33641\n0.02\n0.02\n0.00\n0.00\n0.0\n0.28\n0.67\n0.01\n\n\n119950\n0.03\n0.09\n0.00\n0.00\n0.0\n0.07\n0.49\n0.32\n\n\n22551\n0.00\n0.99\n0.00\n0.00\n0.0\n0.00\n0.00\n0.01\n\n\n85085\n0.07\n0.18\n0.04\n0.10\n0.0\n0.00\n0.52\n0.09\n\n\n\n\n5000 rows × 8 columns\n\n\n\n\n\nEvaluation\nNow comes the evaluation part. Normally, you are interested in a number of performance metrics capturing how good the model is. Among the most common ones are accuracy and Cohen’s kappa score. Accuracy captures the fraction of correct predictions, i.e., how many labels in the predicted array equal the known labels. Kappa score It is seen as a more robust metric but not straightforwardly interpretable.\n\n1accuracy = metrics.accuracy_score(pred, y_test)\nkappa = metrics.cohen_kappa_score(pred, y_test)\n\nsummary = f\"\"\"\\\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: {round(accuracy, 3)}\n  Kappa:    {round(kappa, 3)}\n\"\"\"\n\n2print(summary)\n\n\n1\n\nscikit-learn implements both in the metrics module.\n\n2\n\nSince you will need to compare many models today, let’s start building the summary using multiline f-strings.\n\n\n\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\n\n\n\nThe results are not bad, considering the limited amount of information provided in independent variables. Around 58% of labels are correctly predicted.\nApart from the model performance, you can also evaluate how important each of the independent variables for the result is using the .feature_importances_ metric. Again, wrapping it in a pandas object is useful to get feature names alongside the values.\n\npd.Series(model.feature_importances_, index=model.feature_names_in_).sort_values()\n\ncompactness                    0.125213\nstreet_alignment               0.125471\nfloor_area_ratio               0.166246\nheight                         0.174648\nblock_perimeter_wall_length    0.187244\ninterbuilding_distance         0.221179\ndtype: float64\n\n\nThere seems to be a relatively good balance of importance ranging from 12% for compactness to 22% for inter-building distance. Check if that matches our intuition in relation to the spatial distribution of each of them.\n\n\n\nCross-validated prediction\nNow, if you want to plot the predicted labels on a map, you can do that reliably only for the test sample. The training sample was seen by the model and would not be representative of model capabilities. Nevertheless, you can create a map using the complete sample, just not using exactly the same model for all its parts. Welcome cross-validated prediction.\nCross-validated (CV) prediction splits the dataset (before you divided it into train and test) into a small number of parts and trains a separate model to predict labels for each of them. In the example below, it creates four equally-sized parts and then takes three of them as train part to train a model that is used to predict labels on the fourth one. Then, it switches the one that is left out and repeats the process until there are labels for every part. The resulting labels should not contain any data leakage between train and test samples. However, as described below, that is not always the case when dealing with spatial data.\n\npredicted = model_selection.cross_val_predict(\n    model, independent, training_sample[\"cluster\"], cv=4, n_jobs=-1\n)\n\nax = training_sample.plot(predicted, legend=True, figsize=(9, 9), markersize=0.1)\nax.set_axis_off()\n\n\n\n\nPredicted labels\n\n\n\n\nWhat CV-prediction allows to not only plot the labels but importantly to plot the spatial pattern of errors.\n\nax = training_sample.plot(\n    predicted == training_sample[\"cluster\"],\n    categorical=True,\n    figsize=(9, 9),\n    markersize=0.1,\n    cmap=\"bwr_r\",\n    legend=True,\n)\nax.set_axis_off()\n\n\n\n\nSpatial pattern of correct (True) and incorrect (False) predictions\n\n\n\n\nAs with the linear regression, a spatial autocorrelation of errors means that the model does not represent space reliably and may need some adaptations.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#spatial-cross-validation",
    "href": "classification/hands_on.html#spatial-cross-validation",
    "title": "Classification and regression",
    "section": "Spatial cross-validation",
    "text": "Spatial cross-validation\nWhen dividing the data into train and test parts, you are trying to eliminate data leakage, which happens when information from one set makes its way to the other. The evaluation affected by leakage then indicates better results than the reality is. This works well for most of data, but not so much for spatial data. Tobler’s first law of geography, which says that nearby things are similar, breaks the assumption of no leakage. Two points that are right next to each other in space, one randomly allocated to the train part and the other to the test part, are not statistically independent. You can assume that they will be similar, and this similarity caused by the spatial proximity comes with a potential data leakage.\nSpatial CV mitigates the issue by including a spatial dimension in the train-test split. The aim is to divide the whole study area into smaller regions and allocate whole regions to train and test splits. You can do that based on many criteria, but it is handy to have a variable representing those regions as the \"basic_settlement_unit\" column in your DataFrame.\nWith a categorical column indicating groups, you can use the StratifiedGroupKFold class from the scikit-learn to create the folds.\n\n1gkf = model_selection.StratifiedGroupKFold(n_splits=5)\n2splits = gkf.split(\n    training_sample,\n    training_sample.cluster,\n    groups=training_sample.basic_settlement_unit,\n)\n\n\n1\n\nSpecify the number of folds (parts).\n\n2\n\nGet the iterator with different splits.\n\n\n\n\nThe splits variable now contains an iterator - an object we can loop through that gives you train and test parts for each split. You can easily extract the labels indicating the splits:\n\n1split_label = np.empty(len(training_sample), dtype=float)\n2for i, (train, test) in enumerate(splits):\n3    split_label[test] = i\n4training_sample[\"split\"] = split_label\n\n\n1\n\nCreate an empty array you will fill with the actual label using the for loop.\n\n2\n\nLoop over splits. Every loop gives you indices for train and test splits. You can use enumerate to get a split label.\n\n3\n\nAssing split labels to the subset of points used for the test in each loop.\n\n4\n\nAssing the labels to the DataFrame.\n\n\n\n\nWith the labels extracted from StratifiedGroupKFold, you can plot the splits on a map.\n\n1ax = training_sample.plot(\n  \"split\", categorical=True, figsize=(9, 9), markersize=0.1, legend=True\n)\n2training_sample.dissolve(\"basic_settlement_unit\").convex_hull.boundary.plot(\n    ax=ax, color=\"k\", linewidth=0.5, markersize=0\n)\nax.set_axis_off()\n\n\n1\n\nPlot the split labels\n\n2\n\nPlot the convex hull around each basic settlement unit for better visualization of regions in spatial CV.\n\n\n\n\n\n\n\nData splits based on spatial cross-validation\n\n\n\n\nWith the new, and arguably better train-test, split, you can create new training and evaluation data. You can use the split with the label 0 as a test part and the rest as a train part.\n\ntrain = training_sample[\"split\"] != 0\nX_train = independent.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\ntest = training_sample[\"split\"] == 0\nX_test = independent.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\nNew data require a new model.\n\nrf_spatial_cv = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_spatial_cv.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nAnd its evaluation. Just use += to add to the existing summary.\n\npred = rf_spatial_cv.predict(X_test)\n\naccuracy_spatial_cv = metrics.accuracy_score(pred, y_test)\nkappa_spatial_cv = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nBasic model with spatial cross-validation:\n  Accuracy: {round(accuracy_spatial_cv, 3)}\n  Kappa:    {round(kappa_spatial_cv, 3)}\n\"\"\"\n\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\n\n\n\nThe results are marginally worse, but that is expected. It means that the original model was indeed a bit leaking! The model based on the spatial CV should be more robust than the previous one, meaning that it should perform as expected on unseen data.\nThe result is worse on paper but is now more spatially robust - it will generalize better on unseen data.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#feature-engineering",
    "href": "classification/hands_on.html#feature-engineering",
    "title": "Classification and regression",
    "section": "Feature engineering",
    "text": "Feature engineering\nSometimes, the original data is just not enough for a decent prediction. At that point, you may want to include some other variables that would help, but they may not be readily available, and you need to create them.\nThe first option is to look at the data you have and extract some additional information from it using methods known as map synthesis.\n\nMap synthesis\nMap synthesis uses the spatial structure of the data to derive new features. There’s no external input, you simply put geography at work.\n\nPoint density\nThere are methods of map synthesis that work directly with existing values, and there are those that look solely at the spatial distribution of your data. One example of the latter is a measurement of point density (number of neighbors within a distance band).\nYou should already know how to do that using the graph module of libpysal. Create a Graph and extract its cardinalities (the number of neighbors).\n\ndistance_200 = graph.Graph.build_distance_band(training_sample, 200)\ntraining_sample[\"points_in_200m\"] = distance_200.cardinalities\n\nLet’s check if the result has some meaningful spatial pattern.\n\nax = training_sample.plot(\"points_in_200m\", figsize=(9, 9), markersize=0.1)\nax.set_axis_off()\n\n\n\n\nPoint density within a 200m distance band\n\n\n\n\nIt is not a strong one, but there are clear pockets of the higher point density, so this new column can help with the prediction accuracy. Create a new set of independent variables, including the new one, and generate new training and evaluation data.\n\nindependent_proximity = training_sample[\n1    independent_variables + [\"points_in_200m\"]\n]\n\nX_train = independent_proximity.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\nX_test = independent_proximity.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\n\n1\n\nAdd the new column to the list of existing columns and use it to subset the DataFrame.\n\n\n\n\nThe rest is simply rinse and repeat. Create the model and train it on new data.\n\nrf_proximity = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_proximity.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nAnd evaluate it in the same way as before.\n\npred = rf_proximity.predict(X_test)\n\naccuracy_proximity = metrics.accuracy_score(pred, y_test)\nkappa_proximity = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nPoints within 200m (spatial CV):\n  Accuracy: {round(accuracy_proximity, 3)}\n  Kappa:    {round(kappa_proximity, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\n\n\n\nRemember that your baseline model is the Basic model with spatial cross-validation. Compared to that, the performance of the new model is a bit better, especially when looking at Cohen’s kappa. It seems that the point density brings some value. You can check how important it is compared to the original variables.\n\npd.Series(\n    rf_proximity.feature_importances_, index=rf_proximity.feature_names_in_\n).sort_values()\n\ncompactness                    0.108827\nstreet_alignment               0.109489\npoints_in_200m                 0.126702\nfloor_area_ratio               0.146121\nheight                         0.159027\nblock_perimeter_wall_length    0.173754\ninterbuilding_distance         0.176080\ndtype: float64\n\n\nIt seems that not that much, but each percent of accuracy counts.\nPoint density is just one example, and there are many more. Below, when dealing with spatial dependence, you’ll get back to map synthesis once again. But before that, let’s use some external data to improve the model.\n\n\n\nProximity variables\nSometimes, you may have an assumption that a distance to a specific location or a set of locations makes a difference to the spatial distribution of the dependent variable, and the inclusion of a variable reflecting this distance could help the model. You can think of distance to subway stations when dealing with rent price prediction or distance to highways when trying to predict air pollution. In the case of urban development in Prague, it may be interesting to capture the distance from the city centre. Prague is a very monocentric city whose development happened over the years in a series of concentric rings. First, the medieval centre, then industrial-era neighborhoods behind the original city walls, and so on. Therefore, a distance to Old Town Square may be useful for the development type prediction.\nYou have done this before, so fire up geocoding, and extract the point representing the square in the same CRS the rest of the data is in.\nold_town_square = (\n    gpd.tools.geocode(\"Old Town Square, Prague\")\n    .to_crs(building_data.crs)\n    .geometry.item()\n)\nWith the point, you can measure the distance from every building in the training sample and use the resulting column as another independent variable.\n\ntraining_sample[\"distance_to_old_town\"] = training_sample.distance(old_town_square)\n\nax = training_sample.plot(\"distance_to_old_town\", figsize=(9, 9), markersize=0.1)\nax.set_axis_off()\n\n\n\n\nDistance to the Old Town Square\n\n\n\n\nNow simply add it to the DataFrame representing independent variables and the rest is the same.\n\nindependent_distance = training_sample[\n    independent_variables + [\"points_in_200m\", \"distance_to_old_town\"]\n]\n\nX_train = independent_distance.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\nX_test = independent_distance.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\nGet a new, hopefully better model.\n\nrf_distance = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_distance.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nAnd check if the new variable makes a difference.\n\npred = rf_distance.predict(X_test)\n\naccuracy_distance = metrics.accuracy_score(pred, y_test)\nkappa_distance = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: {round(accuracy_distance, 3)}\n  Kappa:    {round(kappa_distance, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\n\n\n\nThat is quite a decent bump in performance! It seems that the distance to the city centre is not bad in explaining the development typology. Check how important it is within the model.\n\npd.Series(\n    rf_distance.feature_importances_, index=rf_distance.feature_names_in_\n).sort_values()\n\ncompactness                    0.083833\nstreet_alignment               0.084431\npoints_in_200m                 0.114884\nfloor_area_ratio               0.118693\nheight                         0.121907\nblock_perimeter_wall_length    0.136004\ninterbuilding_distance         0.143222\ndistance_to_old_town           0.197027\ndtype: float64\n\n\nInterestingly enough, it seems to be more explanatory than any of the variables reflecting the actual morphology.\n\n\nMap matching\nIn other cases, you can make use of other data and link it to existing data. When you join the data based on spatial operation, you can talk about map matching. You can measure a number of points of interest in the vicinity of each location, link the data from rasters, interpolate them from point patterns or from polygons to other polygons. By now, you should know all that, so there’s no need to go into detail. Sticking to a simple case, map matching can also be done using a spatial join.\nLoad the price data you worked with in the Learning GeoPandas chapter.\n\nprice = gpd.read_file(\n    \"https://martinfleischmann.net/sds/geographic_data/data/SED_CenovaMapa_p_shp.zip\",\n)\n1price[\"CENA\"] = price[\"CENA\"].replace(\"N\", None).astype(\"float\")\nprice.head(2)\n\n\n1\n\nPrice is in the column called \"CENA\", which needs to be turned to floats.\n\n\n\n\n\n\n\n\n\n\n\nKOD_UNI\nMAPA\nSTRED\nCENA\nFUNKCE\nTYP_CENY\nzmena\nShape_Leng\nShape_Area\ngeometry\n\n\n\n\n0\n11\n4\n0\n7100.0\nR2\n181920-pary\n0\n2032.256585\n82031.672127\nPOLYGON Z ((-737015.74 -1034316.4 0, -737018.2...\n\n\n1\n10921\n4\n0\n9030.0\nR1\n181920-pary\n0\n450.070407\n11837.482327\nPOLYGON Z ((-737103.202 -1034331.743 0, -73710...\n\n\n\n\n\n\n\nBefore any spatial joins, check the CRS.\n\nprice.crs.equals(training_sample.crs)\n\nFalse\n\n\nAnd, like in this case, don’t forget to re-project geometries in case of a CRS mismatch. Then you can go ahead with the spatial join.\n\nprice = price.to_crs(training_sample.crs)\n\ntraining_sample_price = training_sample.sjoin(\n1    price[[\"CENA\", \"geometry\"]].dropna()\n)\ntraining_sample_price.head(2)\n\n\n1\n\nIgnore rows with missing prices, as those will bring no value, only issues.\n\n\n\n\n\n\n\n\n\n\n\ncluster\nfloor_area_ratio\nheight\ncompactness\nstreet_alignment\ninterbuilding_distance\nblock_perimeter_wall_length\nbasic_settlement_unit\ncadastral zone\ngeometry\nsplit\npoints_in_200m\ndistance_to_old_town\nindex_right\nCENA\n\n\n\n\n34984\nsingle family housing\n0.139151\n4.833\n0.321089\n0.615831\n26.019856\n72.103088\nBěchovice\nBěchovice\nPOINT (-728888.096 -1045720.683)\n1.0\n7\n14202.783900\n4769\n7100.0\n\n\n39935\ngrids\n2.209054\n20.939\n0.584905\n2.867204\n21.971761\n1107.995952\nNa Pankráci\nNusle\nPOINT (-742882.423 -1046165.913)\n0.0\n23\n3155.348653\n5033\n12720.0\n\n\n\n\n\n\n\nYou can prepare data for a model with price included.\n\nindependent_proximity_price = training_sample_price[\n    independent_variables + [\"points_in_200m\", \"distance_to_old_town\", \"CENA\"]\n]\n\n1train_price = training_sample_price[\"split\"] != 0\nX_train = independent_proximity_price.loc[train_price]\ny_train = training_sample_price[\"cluster\"].loc[train_price]\n\ntest_price = training_sample_price[\"split\"] == 0\nX_test = independent_proximity_price.loc[test_price]\ny_test = training_sample_price[\"cluster\"].loc[test_price]\n\n\n1\n\nGet the new split mask as due to some points not being merged to any geometries, training_sample_price is slightly shorter than training_sample, and the original mask does not align.\n\n\n\n\nThe rest, you know. First the model.\n\nrf_distance_price = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_distance_price.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nThen, the evaluation.\n\npred = rf_distance_price.predict(X_test)\n\naccuracy_distance_price = metrics.accuracy_score(pred, y_test)\nkappa_distance_price = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nPrice + above (spatial CV):\n  Accuracy: {round(accuracy_distance_price, 3)}\n  Kappa:    {round(kappa_distance_price, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\nPrice + above (spatial CV):\n  Accuracy: 0.673\n  Kappa:    0.553\n\n\n\nAnother improvement. It seems that price is not that critical, but is surely brings some value.\n\npd.Series(\n    rf_distance_price.feature_importances_, index=rf_distance_price.feature_names_in_\n).sort_values()\n\ncompactness                    0.065115\nstreet_alignment               0.066357\nfloor_area_ratio               0.086397\npoints_in_200m                 0.103891\nheight                         0.111930\ninterbuilding_distance         0.119208\nCENA                           0.136275\nblock_perimeter_wall_length    0.139565\ndistance_to_old_town           0.171261\ndtype: float64\n\n\nAs the feature importance shows, it is among the most important variables, though the distance to the Old Town Sq. is still unbeaten.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#spatial-dependence",
    "href": "classification/hands_on.html#spatial-dependence",
    "title": "Classification and regression",
    "section": "Spatial dependence",
    "text": "Spatial dependence\nLet’s get back to map synthesis and talk about spatial dependence. Some phenomena, urban development type may be one of them, are not explained only by values linked to individual geometries but also by the spatial configuration of the observations around. If the mean inter-building distance of observation A is small but that of nearly all observations around is high, it may be worth taking that into account. You can say that the predicted value on observation A depends on the spatial context and configuration around it. Generally speaking, the values of observations are related to each other based on their distance and are spatially dependent, reflecting Tobler’s First law of geography once again.\n\nInclude spatially lagged variables in the model\nThe simplest way of incorporating spatial dependence to a generic ML model is to add variables to your set of independent variables capturing spatial dependence through spatial lag.\nUse the spatial weights matrix created above and generate a spatial lag of all independent variables.\n\n1distance_200_row = distance_200.transform(\"r\")\n2lagged_variables = []\n3for var in independent_variables:\n4    training_sample[f\"{var}_lag\"] = distance_200_row.lag(training_sample[var])\n5    lagged_variables.append(f\"{var}_lag\")\ntraining_sample.head(2)\n\n\n1\n\nRemember that the graph needs to be row-standardised to get a mean value.\n\n2\n\nCreate and empty list that will be populated with names of new lagged variables.\n\n3\n\nLoop through the list of existing independent variables.\n\n4\n\nMeasure a lag for each and assign it to a column.\n\n5\n\nAdd the name to the list.\n\n\n\n\n\n\n\n\n\n\n\ncluster\nfloor_area_ratio\nheight\ncompactness\nstreet_alignment\ninterbuilding_distance\nblock_perimeter_wall_length\nbasic_settlement_unit\ncadastral zone\ngeometry\nsplit\npoints_in_200m\ndistance_to_old_town\nfloor_area_ratio_lag\nheight_lag\ncompactness_lag\nstreet_alignment_lag\ninterbuilding_distance_lag\nblock_perimeter_wall_length_lag\n\n\n\n\n34984\nsingle family housing\n0.139151\n4.833\n0.321089\n0.615831\n26.019856\n72.103088\nBěchovice\nBěchovice\nPOINT (-728888.096 -1045720.683)\n1.0\n7\n14202.783900\n0.199820\n5.657571\n0.546654\n5.776773\n23.220023\n58.535778\n\n\n39935\ngrids\n2.209054\n20.939\n0.584905\n2.867204\n21.971761\n1107.995952\nNa Pankráci\nNusle\nPOINT (-742882.423 -1046165.913)\n0.0\n23\n3155.348653\n1.281836\n14.360696\n0.539464\n3.990104\n21.274888\n324.468169\n\n\n\n\n\n\n\nIt may be interesting to assess the effect of spatial dependence without the variables added above. Combine original independent variables with the new lagged and prepare new training data.\n\nindependent_lag = training_sample[independent_variables + lagged_variables]\n\nX_train = independent_lag.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\nX_test = independent_lag.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\nFit the new model, which should be able to use spatial dependence.\n\nrf_lag_200m = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_lag_200m.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nAnd check how significant an effect it has on the model performance.\n\npred = rf_lag_200m.predict(X_test)\n\naccuracy_lag = metrics.accuracy_score(pred, y_test)\nkappa_lag = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nSpatial dependence - lagged model (spatial CV):\n  Accuracy: {round(accuracy_lag, 3)}\n  Kappa:    {round(kappa_lag, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\nPrice + above (spatial CV):\n  Accuracy: 0.673\n  Kappa:    0.553\nSpatial dependence - lagged model (spatial CV):\n  Accuracy: 0.678\n  Kappa:    0.573\n\n\n\nThat is surely not negligible, considering that no other data were needed.\n\npd.Series(\n    rf_lag_200m.feature_importances_, index=rf_lag_200m.feature_names_in_\n).sort_values()\n\ncompactness                        0.043229\nstreet_alignment                   0.046029\nheight                             0.057588\nfloor_area_ratio                   0.058145\nblock_perimeter_wall_length        0.067363\nstreet_alignment_lag               0.070991\ncompactness_lag                    0.075911\nheight_lag                         0.102984\ninterbuilding_distance             0.103224\ninterbuilding_distance_lag         0.114796\nblock_perimeter_wall_length_lag    0.126160\nfloor_area_ratio_lag               0.133580\ndtype: float64\n\n\nThe feature importance very clearly shows that when detecting urban typology, the context is always more important than the individual observation. It is expected as the typology attempts to reflect the general pattern of development but you can see the similar effect in many other situations.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#spatial-heterogneity",
    "href": "classification/hands_on.html#spatial-heterogneity",
    "title": "Classification and regression",
    "section": "Spatial heterogneity",
    "text": "Spatial heterogneity\nWhile ML models like the random forest learn interaction between variables, they are not always able to pick up spatial heterogeneity of the interaction between dependent and independent variables. Last week, you tried to deal with spatial heterogeneity using the categorical variable reflecting the spatial fixed effect. You could do the same here, but let’s try another approach.\n\nInclude x, y coordinates\nIncluding the x and y (or longitude and latitude) coordinates of your geometries is a clever way of capturing the spatial heterogeneity in the model. The location serves as a proxy for any unexplained variance of a spatial nature. It does not help you with interpretation, as coordinates do not explain anything.\nThe model will also struggle to generalise outside of the original spatial extent. So while a model trained on Prague using the original set of variables could be easily used in any other Czech city, like Brno, the model that includes coordinates would have no idea how to interpret the values it would see in Brno. Use with caution.\nTechnically, it is dead simple. You just include coordinates as another two columns.\n\ntraining_sample[[\"x\", \"y\"]] = training_sample.get_coordinates()\ntraining_sample.head(2)\n\n\n\n\n\n\n\n\ncluster\nfloor_area_ratio\nheight\ncompactness\nstreet_alignment\ninterbuilding_distance\nblock_perimeter_wall_length\nbasic_settlement_unit\ncadastral zone\ngeometry\n...\npoints_in_200m\ndistance_to_old_town\nfloor_area_ratio_lag\nheight_lag\ncompactness_lag\nstreet_alignment_lag\ninterbuilding_distance_lag\nblock_perimeter_wall_length_lag\nx\ny\n\n\n\n\n34984\nsingle family housing\n0.139151\n4.833\n0.321089\n0.615831\n26.019856\n72.103088\nBěchovice\nBěchovice\nPOINT (-728888.096 -1045720.683)\n...\n7\n14202.783900\n0.199820\n5.657571\n0.546654\n5.776773\n23.220023\n58.535778\n-728888.096013\n-1.045721e+06\n\n\n39935\ngrids\n2.209054\n20.939\n0.584905\n2.867204\n21.971761\n1107.995952\nNa Pankráci\nNusle\nPOINT (-742882.423 -1046165.913)\n...\n23\n3155.348653\n1.281836\n14.360696\n0.539464\n3.990104\n21.274888\n324.468169\n-742882.423186\n-1.046166e+06\n\n\n\n\n2 rows × 21 columns\n\n\n\nTo check the effect of spatial heterogeneity compared to the baseline model, create new training data with the original variables and coordinates on top.\n\nindependent_coordinates = training_sample[independent_variables + [\"x\", \"y\"]]\n\nX_train = independent_coordinates.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\nX_test = independent_coordinates.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\nTrain the model.\n\nrf_coordinates = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_coordinates.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nAnd evaluate its performance.\n\npred = rf_coordinates.predict(X_test)\n\naccuracy_coordinates = metrics.accuracy_score(pred, y_test)\nkappa_coordinates = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nSpatial heterogeneity - coordinates (spatial CV):\n  Accuracy: {round(accuracy_coordinates, 3)}\n  Kappa:    {round(kappa_coordinates, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\nPrice + above (spatial CV):\n  Accuracy: 0.673\n  Kappa:    0.553\nSpatial dependence - lagged model (spatial CV):\n  Accuracy: 0.678\n  Kappa:    0.573\nSpatial heterogeneity - coordinates (spatial CV):\n  Accuracy: 0.632\n  Kappa:    0.501\n\n\n\nThere indeed is some degree of spatial heterogeneity, but its effect is not that strong as that of spatial dependence.\n\npd.Series(\n    rf_coordinates.feature_importances_, index=rf_coordinates.feature_names_in_\n).sort_values()\n\ncompactness                    0.079772\nstreet_alignment               0.082567\nheight                         0.120324\nfloor_area_ratio               0.121949\nblock_perimeter_wall_length    0.140227\nx                              0.141132\ny                              0.144687\ninterbuilding_distance         0.169343\ndtype: float64\n\n\nInterpreting feature importance is a bit more complicated, as x and y are not to be treated as two separate variables but as a pair. You can try to sum their importance, but remember that the result may be misleading.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#heterogeneity-and-dependence",
    "href": "classification/hands_on.html#heterogeneity-and-dependence",
    "title": "Classification and regression",
    "section": "Heterogeneity and dependence",
    "text": "Heterogeneity and dependence\nYou can try to combine the effects of heterogeneity and dependence within a single model as each seems to help when used separately.\n\nindependent_coordinates = training_sample[\n    independent_variables + lagged_variables + [\"x\", \"y\"]\n]\n\nX_train = independent_coordinates.loc[train]\ny_train = training_sample[\"cluster\"].loc[train]\n\nX_test = independent_coordinates.loc[test]\ny_test = training_sample[\"cluster\"].loc[test]\n\nLet’s consider this a final model of the day.\n\nrf_het_dep = ensemble.RandomForestClassifier(random_state=0, n_jobs=-1)\nrf_het_dep.fit(X_train, y_train)\n\nRandomForestClassifier(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_jobs=-1, random_state=0) \n\n\nThe final evaluation:\n\npred = rf_het_dep.predict(X_test)\n\naccuracy_het_dep = metrics.accuracy_score(pred, y_test)\nkappa_het_dep = metrics.cohen_kappa_score(pred, y_test)\n\nsummary += f\"\"\"\\\nSpatial dependence + heterogeneity (spatial CV):\n  Accuracy: {round(accuracy_het_dep, 3)}\n  Kappa:    {round(kappa_het_dep, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\nPrice + above (spatial CV):\n  Accuracy: 0.673\n  Kappa:    0.553\nSpatial dependence - lagged model (spatial CV):\n  Accuracy: 0.678\n  Kappa:    0.573\nSpatial heterogeneity - coordinates (spatial CV):\n  Accuracy: 0.632\n  Kappa:    0.501\nSpatial dependence + heterogeneity (spatial CV):\n  Accuracy: 0.711\n  Kappa:    0.615\n\n\n\nThis seems to be the best model so far. Keep in mind that variables coming from the feature engineering section are not included here, so there still may be some space for an improvement.\n\npd.Series(\n    rf_het_dep.feature_importances_, index=rf_het_dep.feature_names_in_\n).sort_values()\n\ncompactness                        0.032525\nstreet_alignment                   0.036007\nfloor_area_ratio                   0.047823\nheight                             0.049390\nstreet_alignment_lag               0.057048\nblock_perimeter_wall_length        0.057807\ncompactness_lag                    0.063732\ny                                  0.068235\nx                                  0.071409\nheight_lag                         0.083217\ninterbuilding_distance             0.090460\ninterbuilding_distance_lag         0.102752\nblock_perimeter_wall_length_lag    0.117814\nfloor_area_ratio_lag               0.121782\ndtype: float64\n\n\nBoth lagged variables and coordinates are valuable here but keep in mind that the strength of these effects will vary dependning on specific use case. What is clearly useful in this case may have no value in other situations.\n\nPrediction on the whole dataset\nIf you consider rf_het_dep a final model you are happy with, you can check how it performs on the full dataset, not only on the sample of 20k observations used above.\nFirst, you will need all the variables computed for the full dataset.\n\ndistance_200_all = graph.Graph.build_distance_band(building_data, 200).transform(\"r\")\nfor var in independent_variables:\n    building_data[f\"{var}_lag\"] = distance_200_all.lag(building_data[var])\n\nbuilding_data[[\"x\", \"y\"]] = building_data.get_coordinates()\n\nThen, you can use the model for inference. First, check the probabilities.\n\nprobabilities = rf_het_dep.predict_proba(\n    building_data[independent_variables + lagged_variables + [\"x\", \"y\"]]\n)\nprobabilities\n\narray([[0.29, 0.05, 0.42, ..., 0.  , 0.05, 0.  ],\n       [0.  , 0.04, 0.  , ..., 0.  , 0.  , 0.  ],\n       [0.1 , 0.  , 0.  , ..., 0.49, 0.41, 0.  ],\n       ...,\n       [0.  , 1.  , 0.  , ..., 0.  , 0.  , 0.  ],\n       [0.  , 1.  , 0.  , ..., 0.  , 0.  , 0.  ],\n       [0.52, 0.06, 0.01, ..., 0.1 , 0.07, 0.01]])\n\n\nPlotting class-based probabilities allows you to visualise the likelihood that each observation (building in our case) belonging to each class.\n\nfig, axs = plt.subplots(4, 2, figsize=(9, 14))\naxs = axs.flatten()\nfor i, ax in enumerate(axs):\n    building_data.plot(\n      probabilities[:, i], markersize=0.01, cmap=\"bone_r\", ax=ax, vmin=0, vmax=1,\n    )\n    axs[i].set_title(rf_het_dep.classes_[i], fontdict={\"fontsize\": 8})\n    ax.set_axis_off()\n\n\n\n\nClass-based probability\n\n\n\n\nPlotting the maximum probability assigned to an observation regardless of class is also useful. This can be seen as a proxy of the certainty of a model and allows you to identify areas where the model works well and has no issue picking up the correct class and those where it struggles.\n\nbuilding_data.plot(\n    probabilities.max(axis=1), markersize=0.01, cmap=\"cividis_r\", figsize=(9, 9)\n).set_axis_off()\n\n\n\n\nMaximum probability reflecting the certainty of the model\n\n\n\n\nIf you want just a label, it is easier to use the predict() method instead.\n\npredicted_class = rf_het_dep.predict(\n    building_data[independent_variables + lagged_variables + [\"x\", \"y\"]]\n)\n\nThe predicted labels allow you to check the spatial pattern of errors as you did earlier.\n\nbuilding_data.plot(\n    predicted_class == building_data[\"cluster\"],\n    categorical=True,\n    figsize=(9, 9),\n    markersize=0.005,\n    cmap=\"bwr_r\",\n    legend=True,\n).set_axis_off()\n\n\n\n\nSpatial pattern of correct (True) and incorrect (False) predictions on the full dataset\n\n\n\n\nFinally, you may be interested in the performance of the model on the full dataset.\n\naccuracy_all = metrics.accuracy_score(predicted_class, building_data[\"cluster\"])\nkappa_all = metrics.cohen_kappa_score(predicted_class, building_data[\"cluster\"])\n\nsummary += f\"\"\"\nComplete dataset\n----------------\nSpatial dependence + heterogeneity (spatial CV):\n  Accuracy: {round(accuracy_all, 3)}\n  Kappa:    {round(kappa_all, 3)}\n\"\"\"\nprint(summary)\n\nEvaluation metrics\n==================\nBasic model:\n  Accuracy: 0.585\n  Kappa:    0.45\nBasic model with spatial cross-validation:\n  Accuracy: 0.57\n  Kappa:    0.419\nPoints within 200m (spatial CV):\n  Accuracy: 0.598\n  Kappa:    0.46\nDistance to Old Town Sq + above (spatial CV):\n  Accuracy: 0.651\n  Kappa:    0.532\nPrice + above (spatial CV):\n  Accuracy: 0.673\n  Kappa:    0.553\nSpatial dependence - lagged model (spatial CV):\n  Accuracy: 0.678\n  Kappa:    0.573\nSpatial heterogeneity - coordinates (spatial CV):\n  Accuracy: 0.632\n  Kappa:    0.501\nSpatial dependence + heterogeneity (spatial CV):\n  Accuracy: 0.711\n  Kappa:    0.615\n\nComplete dataset\n----------------\nSpatial dependence + heterogeneity (spatial CV):\n  Accuracy: 0.776\n  Kappa:    0.703\n\n\n\nNot bad at all. More than 75% of buildings were correctly classified using only the data you were given in the beginning and geography. Just note that since the evaluation based on the full dataset is done based on a different sample of data than all those above, the values are not entirely comparable.\n\n\n\n\n\n\nSelf-study topic\n\n\n\nThe part below will not be covered in the class. It contains an introduction to regression models using the scikit-learn. You will need it to complete the exercise. However, since this is the final session of the course, it is time to let you learn by yourself.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#regression",
    "href": "classification/hands_on.html#regression",
    "title": "Classification and regression",
    "section": "Regression",
    "text": "Regression\nClassification problems are only one part of ML. The other big chunk focuses on regression problems, where your target variable is not a class but a value. Consider the rent price or air pollution levels if I use the abovementioned examples. All of what was covered above applies nearly equally to regression models, except evaluation methods. But all of the spatial components remain the same.\nBelow is an example of a regression model using random forest trying to estimate the rent price based on the same set of independent variables used in the classification task above.\nSplit to train and test parts is the same. The same would also be the application of spatial cross-validation if you wanted to go in that direction.\n\nindependent = training_sample_price[independent_variables]\nX_train, X_test, y_train, y_test = model_selection.train_test_split(\n    independent, training_sample_price[\"CENA\"], test_size=0.25, random_state=0\n)\n\nThe API of regression models mirrors the API of classification models. There are no surprises waiting for you there.\n\nprice_model = ensemble.RandomForestRegressor(random_state=0, n_jobs=-1)\nprice_model.fit(X_train, y_train)\n\nRandomForestRegressor(n_jobs=-1, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestRegressor?Documentation for RandomForestRegressoriFittedRandomForestRegressor(n_jobs=-1, random_state=0) \n\n\nThe evaluation is different in the selection of metrics. You, obviously, cannot use the accuracy or Cohen’s kappa score, but you can use \\(R^2\\) or mean absolute error (among many others).\n\npred = price_model.predict(X_test)\n\nr_squared = metrics.r2_score(pred, y_test)\nmae = metrics.mean_absolute_error(pred, y_test)\n\nsummary = f\"\"\"\nEvaluation metrics\n==================\nBasic model:\n  R2:                   {round(r_squared, 3)}\n  Mean absolute error:  {round(mae, 3)}\n\"\"\"\nprint(summary)\n\n\nEvaluation metrics\n==================\nBasic model:\n  R2:                   0.307\n  Mean absolute error:  2674.415\n\n\n\nCross-validated prediction is the same as you know from above.\n\npredicted = model_selection.cross_val_predict(\n    price_model, independent, training_sample_price[\"CENA\"], cv=4, n_jobs=-1\n)\n\nThe result allows you to compute residuals. The rest is up to you.\n\nresiduals = training_sample_price[\"CENA\"] - predicted\n\nmaximum = np.max(np.abs(residuals))\nax = training_sample_price.plot(\n    residuals,\n    figsize=(9, 9),\n    markersize=0.5,\n    cmap=\"RdBu\",\n    legend=True,\n    vmin=-maximum,\n    vmax=maximum,\n    legend_kwds={\"shrink\": 0.5},\n)\nax.set_axis_off()\n\n\n\n\nResiduals of the regression model\n\n\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\nThis material combines components from the chapters on Spatial Regression and Spatial Feature Engineering from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "classification/hands_on.html#the-end",
    "href": "classification/hands_on.html#the-end",
    "title": "Classification and regression",
    "section": "The end",
    "text": "The end\n\nThank you for getting this far.",
    "crumbs": [
      "Machine learning",
      "Classification and regression"
    ]
  },
  {
    "objectID": "point_patterns/exercise_answers.html",
    "href": "point_patterns/exercise_answers.html",
    "title": "Is there a pattern?",
    "section": "",
    "text": "One solution. You may have yours.\nimport geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pointpats\nimport numpy as np\nimport contextily\nRead the data and create a GeoDataFrame projected to S-JTSK / Krovak East North (EPSG:5514).\nurl = \"http://data.insideairbnb.com/czech-republic/prague/prague/2023-06-24/data/listings.csv.gz\"\nairbnb = pd.read_csv(url)\nairbnb = gpd.GeoDataFrame(\n    airbnb,\n    geometry=gpd.points_from_xy(\n        airbnb[\"longitude\"], airbnb[\"latitude\"], crs=\"EPSG:4326\"\n    ),\n)\nairbnb = airbnb.to_crs(\"EPSG:5514\")\nCreate a hexbin visualisation of the listings\nairbnb[[\"x\", \"y\"]] = airbnb.get_coordinates()\nf, ax = plt.subplots()\nairbnb.plot(ax=ax, markersize=0.05)\nhb = ax.hexbin(\n    airbnb[\"x\"],\n    airbnb[\"y\"],\n    gridsize=60,\n    linewidths=0,\n    alpha=0.8,\n    cmap=\"plasma\",\n    mincnt=1,\n)\n# Add basemap\ncontextily.add_basemap(\n    ax=ax,\n    crs=airbnb.crs,\n    source=\"CartoDB Positron\",\n)\n# Add colorbar\nplt.colorbar(hb)\nplt.xticks(rotation=90);\nCreate a kernel density estimate of the distribution of Airbnb’s\nf, ax = plt.subplots()\nairbnb.plot(ax=ax, markersize=0.05, color=\"grey\")\npointpats.plot_density(\n    airbnb,\n    bandwidth=500,\n    levels=15,\n    alpha=0.55,\n    cmap=\"plasma\",\n    linewidths=1,\n    ax=ax,\n)\ncontextily.add_basemap(\n    ax=ax,\n    crs=airbnb.crs,\n    source=\"CartoDB Positron\",\n)\nairbnb.info()\nMeasure mean, median, and mean weighted by a column of your choice.\nmean_center = pointpats.centrography.mean_center(airbnb[[\"x\", \"y\"]])\nmed_center = pointpats.centrography.euclidean_median(airbnb[[\"x\", \"y\"]])\nweighted_mean = pointpats.centrography.weighted_mean_center(\n    airbnb[[\"x\", \"y\"]], airbnb[\"calculated_host_listings_count\"]\n)\nCan you plot them on a map?\nf, ax = plt.subplots()\nairbnb.plot(ax=ax, markersize=0.005, color=\"grey\")\n\nax.scatter(*mean_center, color=\"k\", marker=\"o\", label=\"Mean Center\", alpha=0.8)\nax.scatter(*med_center, color=\"r\", marker=\"o\", label=\"Median Center\", alpha=0.8)\nax.scatter(\n    *weighted_mean,\n    color=\"pink\",\n    marker=\"o\",\n    label=\"Weighted Mean Center\",\n    alpha=0.8\n)\n\nax.legend(loc=\"upper left\")\n\ncontextily.add_basemap(\n    ax=ax,\n    crs=airbnb.crs,\n    source=\"CartoDB Positron No Labels\",\n)\nplt.xticks(rotation=90);\nMeasure quadrat statistic\nqstat = pointpats.QStatistic(airbnb[[\"x\", \"y\"]].values, nx=6, ny=6)\nqstat.chi2, qstat.chi2_pvalue\nax = qstat.plot()\ncontextily.add_basemap(\n    ax=ax,\n    crs=airbnb.crs,\n    source=\"CartoDB Positron No Labels\",\n)\nplt.xticks(rotation=90);\nHow does it change when you change the grid size?\nqstat = pointpats.QStatistic(airbnb[[\"x\", \"y\"]].values, nx=12, ny=10)\nqstat.chi2, qstat.chi2_pvalue\nax = qstat.plot()\ncontextily.add_basemap(\n    ax=ax,\n    crs=airbnb.crs,\n    source=\"CartoDB Positron No Labels\",\n)\nplt.xticks(rotation=90);\nMeasure Ripley’s G and F\nStart with the definition of the extent.\nconvex_hull = airbnb.unary_union.convex_hull\n\nax = airbnb.plot(markersize=0.05)\ngpd.GeoSeries([convex_hull]).plot(\n    ax=ax, facecolor=\"none\", edgecolor=\"k\", linestyle=\"--\"\n)\nplt.xticks(rotation=90);\ng_test = pointpats.distance_statistics.g_test(\n    airbnb[[\"x\", \"y\"]].values,\n    support=200,\n    keep_simulations=True,\n    hull=convex_hull,\n    n_simulations=99,\n)\nCheck significance\nnp.mean(g_test.pvalue)\nOptionally plot. There’s no need to change the code.\nf, ax = plt.subplots()\nax.plot(g_test.support, g_test.simulations.T, color=\"lightgrey\")\nax.plot(\n    g_test.support,\n    np.median(g_test.simulations, axis=0),\n    color=\"k\",\n    label=\"median simulation\",\n    linestyle=\"--\",\n)\nax.plot(g_test.support, g_test.statistic, label=\"observed\", color=\"red\")\nax.set_xlabel(\"distance [m]\")\nax.set_ylabel(\n    \"ratio of nearest neighbor\\n\"\n    \"distances shorter than distance\"\n)\nax.legend()\nax.set_xlim(0, 500);\nf_test = pointpats.distance_statistics.f_test(\n    airbnb[[\"x\", \"y\"]].values,\n    support=200,\n    keep_simulations=True,\n    hull=convex_hull,\n    n_simulations=99,\n)\nCheck significance\nnp.mean(f_test.pvalue)\nOptionally plot. There’s no need to change the code.\nf, ax = plt.subplots()\nax.plot(f_test.support, f_test.simulations.T, color=\"lightgrey\")\nax.plot(\n    f_test.support,\n    np.median(f_test.simulations, axis=0),\n    color=\"k\",\n    label=\"median simulation\",\n    linestyle=\"--\",\n)\nax.plot(f_test.support, f_test.statistic, label=\"observed\", color=\"red\")\nax.set_xlabel(\"distance\")\nax.set_ylabel(\"ratio of points within a distance threshold\")\nax.legend()\nax.set_xlim(0, 500);"
  },
  {
    "objectID": "point_patterns/slides.html#point-pattern-analysis-1",
    "href": "point_patterns/slides.html#point-pattern-analysis-1",
    "title": "I need more points!",
    "section": "Point Pattern Analysis",
    "text": "Point Pattern Analysis\n\nDescribe, characterise, and explain point patterns, focusing on their generating process"
  },
  {
    "objectID": "point_patterns/exercise.html",
    "href": "point_patterns/exercise.html",
    "title": "Is there a pattern?",
    "section": "",
    "text": "It’s time to explore some point patterns.",
    "crumbs": [
      "Point patterns",
      "Is there a pattern?"
    ]
  },
  {
    "objectID": "point_patterns/exercise.html#airbnb-listings-in-prague",
    "href": "point_patterns/exercise.html#airbnb-listings-in-prague",
    "title": "Is there a pattern?",
    "section": "Airbnb listings in Prague",
    "text": "Airbnb listings in Prague\nYour task is to explore the locations of Airbnb listings in Prague, downloaded from the Inside Airbnb portal. The dataset is available in CSV from this URL.\n\nurl = \"http://data.insideairbnb.com/czech-republic/prague/prague/2023-06-24/data/listings.csv.gz\"\n\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nIf the link does not work, please report it and use the backup.\n\n\n\nIt needs some pre-processing, but it is up to you to figure it out this time. Below are some tips if you get stuck.\n\nRead the data and create a GeoDataFrame projected to S-JTSK / Krovak East North (EPSG:5514).\n\n\n\n\n\n\n\nA few hints\n\n\n\n\n\nYou can read the url directly with pd.read_csv.\n\n\n\n\n\n\nMore hints\n\n\n\n\n\nYou will need to create geometry from \"longitude\" and \"latitude\" columns. gpd.points_from_xy may help.\n\n\n\n\n\n\nEven more hints\n\n\n\n\n\nDon’t forget to assign a CRS when creating a GeoDataFrame. When dealing with \"longitude\" and \"latitude\", you always want EPSG:4326.\n\n\n\n\n\n\nOkay, here’s the code\n\n\n\n\n\nThis is how the pre-processing should look.\n\nimport pandas as pd\nimport geopandas as gpd\n\nairbnb = pd.read_csv(url)\nairbnb = gpd.GeoDataFrame(\n    airbnb,\n    geometry=gpd.points_from_xy(\n        airbnb[\"longitude\"], airbnb[\"latitude\"], crs=\"EPSG:4326\"\n    ),\n)\nairbnb = airbnb.to_crs(\"EPSG:5514\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith the data ready:\n\nVisualisation\n\nCreate a hexbin visualisation of the listings\nCreate a kernel density estimate of the distribution of Airbnb’s\nWhat can you read from the hexbin you cannot from the KDE and vice versa?\n\n\n\nCentrography\n\nMeasure mean, median, and mean weighted by a column of your choice.\nCan you plot them on a map?\nAre they the same? Can you tell why?\n\n\n\n\n\n\n\nUse projected coordinates\n\n\n\n\n\nCentrography and Ripley’s alphabet measure the distance between the points. It is not wise to measure distances based on coordinates in latitude and longitude, so don’t forget to extract projected coordinates from your geometry.\n\n\n\n\n\nRandomness\n\nMeasure quadrat statistic. How does it change when you change the grid size?\nMeasure Ripley’s \\(G\\) and \\(F\\)\nIs the pattern clustered?\n\n\n\n\n\n\n\nOptional extension\n\n\n\nCan you subset the data based on variables and check the point pattern properties of different subsets? Think about splitting based on the number of rooms, host characterisation, property type, etc.",
    "crumbs": [
      "Point patterns",
      "Is there a pattern?"
    ]
  },
  {
    "objectID": "regression/exercise_answers.html",
    "href": "regression/exercise_answers.html",
    "title": "Fit that model",
    "section": "",
    "text": "One solution. You may have yours. If the results agree, both are fine :).\nimport esda\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport mgwr\nimport numpy as np\nimport seaborn as sns\nimport statsmodels.formula.api as sm\n\nfrom libpysal import graph\nfrom splot.esda import lisa_cluster\nGo back to the Does it correlate? and load the dataset to your Jupyter Notebook. Do not filter for Glasgow this time, use the whole dataset.\nsimd = gpd.read_file(\"/Users/martin/Downloads/SG_SIMD_2020.zip\")\nLet’s try to understand the effect of a proportion of youths entering university (\"EduUniver\"), crime rate (“CrimeRate”), hospital stays related to alcohol use (\"HlthAlcSR\"), hospital stays related to drug use (\"HlthDrugSR\") and mortality (\"HlthSMR\").\ndata = [\n    \"EduUniver\",\n    \"CrimeRate\",\n    \"HlthAlcSR\",\n    \"HlthDrugSR\",\n    \"HlthSMR\",\n]\nCheck the columns and ensure they are all float or int columns (with numbers, no text.)\nsimd[data].dtypes\nsimd[\"EduUniver\"] = simd[\"EduUniver\"].str.rstrip('%').astype(float)\nCreate a standard OLS regression predicting \"Rankv2\" based on these 5 variables. What can you tell about them? How good is the model?\nformula = f\"Rankv2 ~ {' + '.join(data)}\"\nformula\nols = sm.ols(formula, data=simd).fit()\nols.summary()\nCompare the prediction with the original data on a map.\npredicted = ols.predict(simd)\nf, axs = plt.subplots(2, 1, figsize=(7, 8))\nsimd.plot(\n    predicted, legend=True, cmap=\"coolwarm\", ax=axs[0], vmin=0, vmax=simd.Rankv2.max()\n)\nsimd.plot(\n    \"Rankv2\", legend=True, cmap=\"coolwarm\", ax=axs[1], vmin=0, vmax=simd.Rankv2.max()\n)\naxs[0].set_title(\"OLS prediction\")\naxs[1].set_title(\"Actual results\")\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\nPlot residuals\nsimd[\"residual\"] = ols.resid\nmax_residual = ols.resid.abs().max()\nax = simd.plot(\n    \"residual\", legend=True, cmap=\"RdBu\", vmin=-max_residual, vmax=max_residual\n)\nax.set_axis_off()\nCheck for geographical patterns in residuals using the spatial autocorrelation analysis of your choice.\ncontiguity_r = graph.Graph.build_contiguity(simd).transform(\"r\")\nsimd[\"residual_lag\"] = contiguity_r.lag(simd[\"residual\"])\nf, ax = plt.subplots(1, figsize=(6, 6))\nsns.regplot(\n    x=\"residual\",\n    y=\"residual_lag\",\n    data=simd,\n    marker=\".\",\n    scatter_kws={\"alpha\": 0.2},\n    line_kws=dict(color=\"lightcoral\")\n)\nplt.axvline(0, c=\"black\", alpha=0.5)\nplt.axhline(0, c=\"black\", alpha=0.5);\nlisa = esda.Moran_Local(simd['residual'], contiguity_r.to_W())\n_ = lisa_cluster(lisa, simd)\nCreate another OLS model and include local authority \"LAName\" in the formula.\nformula_fe = f\"Rankv2 ~ {' + '.join(data)} + LAName - 1\"\nols_fe = sm.ols(formula_fe, data=simd).fit()\nols_fe.summary()\nCreate geographically weighted regression using the set of variables from the first model. Use adaptive kernel with bandiwdth=150.\ncoords = simd.centroid.get_coordinates().values\ncoords\ny = simd[f\"Rankv2\"].values.reshape(-1, 1)\nX = simd[data].values\nfixed_bandwidth = mgwr.gwr.GWR(\n    coords, y, X, bw=150, fixed=False, name_x=data\n)\nresults = fixed_bandwidth.fit()\nresults.summary()\nExplore GWR results\nsimd[\"local_r2\"] = results.localR2\nsimd.plot(\"local_r2\", legend=True, vmin=0, vmax=1).set_axis_off()\nf, axs = plt.subplots(3, 1, figsize=(7, 14))\nsimd.plot(\n    ols.predict(simd), legend=True, cmap=\"coolwarm\", ax=axs[0], vmin=0, vmax=simd.Rankv2.max()\n)\nsimd.plot(\n    results.predy.flatten(), legend=True, cmap=\"coolwarm\", vmin=0, vmax=simd.Rankv2.max(), ax=axs[1]\n).set_axis_off()\n\nsimd.plot(\n    \"Rankv2\", legend=True, cmap=\"coolwarm\", vmin=0, vmax=simd.Rankv2.max(), ax=axs[2]\n)\naxs[0].set_title(\"OLS prediction\")\naxs[1].set_title(\"GWR prediction\")\naxs[2].set_title(\"Actual results\")\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\naxs[2].set_axis_off()\nsig95 = results.adj_alpha[1]\ncritical_t = results.critical_tval(alpha=sig95)\ncritical_t\nsignificant = np.abs(results.tvalues) &gt; critical_t\n\nfig, axs = plt.subplots(2, 3, figsize=(9, 9))\naxs = axs.flatten()\nfor i, name in enumerate(data):\n    significant_mask = significant[:, i + 1]\n    simd.plot(results.params[:, i + 1], cmap=\"plasma\", ax=axs[i])\n    simd[~significant_mask].plot(color=\"white\", ax=axs[i], alpha=.9)\n    axs[i].set_title(name[:20], fontdict={'fontsize': 8})\n    axs[i].set_axis_off()\naxs[-1].set_axis_off()"
  },
  {
    "objectID": "regression/slides.html#assumptions",
    "href": "regression/slides.html#assumptions",
    "title": "Relationship and prediction",
    "section": "Assumptions",
    "text": "Assumptions"
  },
  {
    "objectID": "regression/slides.html#evaluation",
    "href": "regression/slides.html#evaluation",
    "title": "Relationship and prediction",
    "section": "Evaluation",
    "text": "Evaluation"
  },
  {
    "objectID": "regression/slides.html#evaluation-1",
    "href": "regression/slides.html#evaluation-1",
    "title": "Relationship and prediction",
    "section": "Evaluation",
    "text": "Evaluation"
  },
  {
    "objectID": "regression/slides.html#limits",
    "href": "regression/slides.html#limits",
    "title": "Relationship and prediction",
    "section": "Limits",
    "text": "Limits\n(M)GWR is computationally expensive and does not scale well\nUse with caution"
  },
  {
    "objectID": "regression/exercise.html",
    "href": "regression/exercise.html",
    "title": "Fit that model",
    "section": "",
    "text": "In this part, you will try to fit some regression models on your own.",
    "crumbs": [
      "Regression",
      "Fit that model"
    ]
  },
  {
    "objectID": "regression/exercise.html#scottish-index-of-multiple-deprivation-yet-again",
    "href": "regression/exercise.html#scottish-index-of-multiple-deprivation-yet-again",
    "title": "Fit that model",
    "section": "Scottish Index of Multiple Deprivation yet again",
    "text": "Scottish Index of Multiple Deprivation yet again\nYou already know the Scottish Index of Multiple Deprivation (SIMD) from exercise on pandas and then on spatial autocorrelation. This time, you will use it again to look at the impact of individual components on the overall deprivation ranking.\n\nGo back to the Does it correlate? and load the dataset to your Jupyter Notebook. Do not filter for Glasgow this time, use the whole dataset.\nLet’s try to understand the effect of a proportion of youths entering university (\"EduUniver\"), crime rate (“CrimeRate”), hospital stays related to alcohol use (\"HlthAlcSR\"), hospital stays related to drug use (\"HlthDrugSR\") and mortality (\"HlthSMR\").\nCheck the columns and ensure they are all float or int columns (with numbers, no text.)\n\n\n\n\n\n\n\nA few hints\n\n\n\n\n\nYou will need to remove some characters from strings and convert dtypes.\n\n\n\n\n\n\nMore hints\n\n\n\n\n\nCheck the .str accessor on a pandas.Series.\n\n\n\n\n\n\nEven more hints\n\n\n\n\n\nThe .str.rstrip() method will be particularly useful.\n\n\n\n\n\n\nOkay, here’s the code\n\n\n\n\n\nThis is how the pre-processing could look.\nsimd[\"EduUniver\"] = simd[\"EduUniver\"].str.rstrip('%').astype(float)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a standard OLS regression predicting \"Rankv2\" based on these 5 variables. What can you tell about them? How good is the model?\nCompare the prediction with the original data on a map. Can you spot the difference?\nPlot residuals. Is there a geographical pattern?\nCheck for geographical patterns in residuals using the spatial autocorrelation analysis of your choice.\nCreate another OLS model and include local authority \"LAName\" in the formula. Are there significant spatial fixed effects? Did the model improve? How much?\nCreate geographically weighted regression using the set of variables from the first model. Use adaptive kernel with bandiwdth=150 or figure out the optimal adaptive bandwidth yourself. Is the model better than those before?\nExplore GWR results. What is the distribution of local R2? Can you say anything about the significance of individual variables?",
    "crumbs": [
      "Regression",
      "Fit that model"
    ]
  },
  {
    "objectID": "geographic_data/concepts.html",
    "href": "geographic_data/concepts.html",
    "title": "Spatial data old and new",
    "section": "",
    "text": "Slides from the talk about the nature of old spatial data and new spatial data, adapted from Dani Arribas-Bel (2019), drawing from the work of Lazer et al. (2014) and Daniel Arribas-Bel (2014).",
    "crumbs": [
      "Spatial data",
      "Spatial data old and new"
    ]
  },
  {
    "objectID": "geographic_data/concepts.html#acknowledgements",
    "href": "geographic_data/concepts.html#acknowledgements",
    "title": "Spatial data old and new",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Dani Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Spatial data",
      "Spatial data old and new"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html",
    "href": "geographic_data/hands_on.html",
    "title": "Bring in geography",
    "section": "",
    "text": "It is time to get your hands on some spatial data. You will not go far from your pandas experience, you’ll just expand it a bit. This section covers an introduction to geopandas, a Python package extending the capabilities of pandas by providing support for geometries, projections and geospatial file formats. Let’s start with importing geopandas.\n1import geopandas as gpd\n\n\n1\n\nAs you import pandas as pd, you can import geopandas as gpd to keep things shorter.",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#datasets",
    "href": "geographic_data/hands_on.html#datasets",
    "title": "Bring in geography",
    "section": "Datasets",
    "text": "Datasets\nYou will be using a few different datasets in this notebook. The first one contains data on buildings, streets and street junctions of a small part of Paris from Fleischmann, Feliciotti, and Kerr (2021). The data contain some information on urban morphology derived from these geometries, but today, you will be mostly interested in geometries, not so much in attributes.",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#reading-files",
    "href": "geographic_data/hands_on.html#reading-files",
    "title": "Bring in geography",
    "section": "Reading files",
    "text": "Reading files\nAssuming you have a file containing both data and geometry (e.g. GeoPackage, GeoJSON, Shapefile), you can read it using geopandas.read_file(), which automatically detects the file type and creates a geopandas.GeoDataFrame. A geopandas.GeoDataFrame is just like pandas.DataFrame but with additional column(s) containing geometry.\n\n1paris_url = (\n    \"https://github.com/martinfleis/evolution-gean/raw/main/data/Paris.gpkg\"\n)\n2buildings = gpd.read_file(paris_url, layer=\"buildings\")\nbuildings.head()\n\n\n1\n\nYou can load the data directly from the GitHub repository associated with the paper.\n\n2\n\nThe file is a GPKG with more layers. To read the layer called \"buildings\", you need to pass layer=\"buildings\". Otherwise, geopandas will read the first available layer.\n\n\n\n\n\n\n\n\n\n\n\nuID\nblg_area\nwall\nadjacency\nneighbour_distance\nnID\nlength\nlinearity\nwidth\nwidth_deviation\nopenness\nmm_len\nnode_start\nnode_end\nnodeID\nmeshedness\ngeometry\n\n\n\n\n0\n0\n27194.254623\n1079.492255\n0.423913\n79.492252\n1\n238.865434\n0.999987\n50.00000\n0.000000\n1.00000\n238.865434\n1\n5\n5\n0.153846\nPOLYGON ((449483.67 5412864.072, 449488.881 54...\n\n\n1\n1\n2196.125585\n255.198183\n0.857143\n52.080293\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n7\n0.163934\nPOLYGON ((449751.333 5412374.461, 449752.33 54...\n\n\n2\n2\n34.882075\n39.461749\n0.583333\n49.413639\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449714.614 5412302.731, 449714.577 5...\n\n\n3\n3\n38.808817\n39.461749\n0.600000\n43.450128\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449712.682 5412306.562, 449702.048 5...\n\n\n4\n4\n90.426163\n255.198183\n0.833333\n12.131337\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449725.342 5412337.375, 449720.863 5...\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore available layers\n\n\n\nYou can quickly check which layers are available in the GPKG file using geopandas.list_layers().\n\ngpd.list_layers(paris_url)\n\n\n\n\n\n\n\n\nname\ngeometry_type\n\n\n\n\n0\ntessellation\nUnknown\n\n\n1\nbuildings\nPolygon\n\n\n2\nedges\nLineString\n\n\n3\nnodes\nPoint\n\n\n\n\n\n\n\n\n\nLet’s have a quick look at the \"geometry\" column. This is the special one enabled by geopandas. You can notice that the objects stored in this column are not float or string but Polygons of a geometry data type instead. The column is also a geopandas.GeoSeries instead of a pandas.Series.\n\nbuildings[\"geometry\"].head()\n\n0    POLYGON ((449483.67 5412864.072, 449488.881 54...\n1    POLYGON ((449751.333 5412374.461, 449752.33 54...\n2    POLYGON ((449714.614 5412302.731, 449714.577 5...\n3    POLYGON ((449712.682 5412306.562, 449702.048 5...\n4    POLYGON ((449725.342 5412337.375, 449720.863 5...\nName: geometry, dtype: geometry\n\n\nPolygons are not the only geometry types you can work with. The same GPKG that contains buildings data also includes street network geometries of a LineString geometry type.\n\n1street_edges = gpd.read_file(paris_url, layer=\"edges\")\nstreet_edges.head(2)\n\n\n1\n\nThe layer with street network edges is called \"edges\".\n\n\n\n\n\n\n\n\n\n\n\nlength\nlinearity\nwidth\nwidth_deviation\nopenness\nmm_len\nnode_start\nnode_end\nnID\ngeometry\n\n\n\n\n0\n35.841349\n1.000000\n50.0\n0.0\n1.0\n35.841349\n1\n2\n0\nLINESTRING (449667.399 5412675.189, 449666.378...\n\n\n1\n238.865434\n0.999987\n50.0\n0.0\n1.0\n238.865434\n1\n5\n1\nLINESTRING (449687.083 5412913.239, 449683.137...\n\n\n\n\n\n\n\nYou can also load another layer, this time with Point geometries representing street network junctions.\n\n1street_nodes = gpd.read_file(paris_url, layer=\"nodes\")\nstreet_nodes.head(2)\n\n\n1\n\nWhen representing a street as a graph, junctions are usually \"nodes\". But more on that later.\n\n\n\n\n\n\n\n\n\n\n\nmeshedness\nnodeID\ngeometry\n\n\n\n\n0\n0.168\n1\nPOINT (449667.399 5412675.189)\n\n\n1\n0.160\n2\nPOINT (449664.238 5412639.488)",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#writing-files",
    "href": "geographic_data/hands_on.html#writing-files",
    "title": "Bring in geography",
    "section": "Writing files",
    "text": "Writing files\nTo write a GeoDataFrame back to a file, use GeoDataFrame.to_file(). The file is format automatically inferred from the suffix, but you can specify your own with the driver= keyword. When no suffix is given, GeoPandas expects that you want to create a folder with an ESRI Shapefile.\n\nbuildings.to_file(\"buildings.geojson\")",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#geometries",
    "href": "geographic_data/hands_on.html#geometries",
    "title": "Bring in geography",
    "section": "Geometries",
    "text": "Geometries\nGeometries within the geometry column are shapely objects. GeoPandas itself is not creating the object but leverages the existing ecosystem (note that there is a significant overlap of the team writing both packages to ensure synergy). A typical GeoDataFrame contains a single geometry column, as you know from traditional GIS software. If you read it from a file, it will most likely be called \"geometry\", but that is not always the case. Furthermore, a GeoDataFrame can contain multiple geometry columns (e.g., one with polygons, another with their centroids and another with bounding boxes), of which one is considered active. You can always get this active column, no matter its name, by using .geometry property.\n\nbuildings.geometry.head()\n\n0    POLYGON ((449483.67 5412864.072, 449488.881 54...\n1    POLYGON ((449751.333 5412374.461, 449752.33 54...\n2    POLYGON ((449714.614 5412302.731, 449714.577 5...\n3    POLYGON ((449712.682 5412306.562, 449702.048 5...\n4    POLYGON ((449725.342 5412337.375, 449720.863 5...\nName: geometry, dtype: geometry\n\n\n\n\n\n\n\n\nProperty vs indexing\n\n\n\nIn data frames, you can usually access a column via indexer (df[\"column_name\"]) or a property (df.column_name). However, the property is not available when there is either a method (e.g. .plot) or a built-in property (e.g. .crs or .geometry) overriding this option.\n\n\nYou can quickly check that the geometry is a data type indeed coming from shapely. You will use shapely directly in some occasions but in most cases, any interaction with shapely will be handled by geopandas.\n\ntype(buildings.geometry.loc[0])\n\nshapely.geometry.polygon.Polygon\n\n\nThere is also a handy SVG representation if you are in a Jupyter Notebook.\n\nbuildings.geometry.loc[0]\n\n\n\n\n\n\n\n\nIf you’d rather see a text representation, you can retrieve a Well-Known Text using .wkt property.\n\nbuildings.geometry.loc[0].wkt\n\n'POLYGON ((449483.67042272736 5412864.072456881, 449488.88104846893 5412863.625060784, 449510.6982350738 5412861.748884251, 449510.82232527074 5412863.304151067, 449510.9970363802 5412863.969594091, 449511.66399917164 5412863.919089544, 449511.51741561835 5412863.119987088, 449511.4365228922 5412861.475392743, 449511.92777931073 5412861.459829652, 449511.847098327 5412860.649013683, 449514.8591315278 5412860.388296289, 449517.71725811594 5412860.140090327, 449517.7760377807 5412860.962221627, 449518.2373559536 5412860.880227586, 449518.4419134186 5412862.412532236, 449518.4869309123 5412863.334841713, 449519.14666073857 5412863.295520584, 449519.1506655881 5412862.117074884, 449519.0673703245 5412861.017238655, 449541.1115176094 5412859.094659338, 449545.97766938613 5412858.672666636, 449549.75438190147 5412901.605985229, 449547.6073362831 5412901.814392851, 449548.567713732 5412913.122884805, 449550.67869009526 5412912.981506093, 449550.8025672962 5412914.514541514, 449551.9241080391 5412914.448813682, 449551.9348595453 5412914.826696844, 449552.39014691365 5412914.889282009, 449552.7947021043 5412915.0190284075, 449553.1844895202 5412915.137791312, 449553.567345395 5412915.301085203, 449553.995208161 5412915.575142834, 449554.3717355797 5412915.8496647095, 449554.6825619913 5412916.158131939, 449554.9271848004 5412916.444963708, 449555.21068708715 5412916.976019454, 449555.4137206183 5412917.530037004, 449555.5064483717 5412918.051700801, 449555.5475392717 5412918.540480322, 449555.62429303036 5412918.917766655, 449555.70998869033 5412919.472845257, 449556.1422696238 5412919.424468057, 449556.2183238966 5412920.535487359, 449562.79918093735 5412919.9534816, 449562.68676143093 5412918.87614223, 449563.11170885165 5412918.827831876, 449563.098344999 5412918.160928504, 449563.126774911 5412918.0606178325, 449563.1995080086 5412917.993257815, 449563.4046481416 5412917.969168958, 449564.15418411116 5412918.129148356, 449564.8460561479 5412918.400819888, 449565.3473547241 5412918.685331517, 449565.7600469264 5412918.903941842, 449569.385767247 5412920.005104809, 449573.1341477573 5412920.882819934, 449576.0881864898 5412921.512024904, 449581.89650447795 5412922.282190066, 449587.2816820141 5412922.489214591, 449587.38605958334 5412924.300353636, 449591.37312920834 5412923.997514584, 449591.18928952987 5412921.508952306, 449591.41653090715 5412921.495781836, 449591.41823944415 5412920.873210528, 449596.2987062339 5412920.417780314, 449596.3557664515 5412921.050937689, 449596.6122418503 5412921.026386226, 449596.8473139128 5412923.5033686785, 449600.79761606036 5412923.189751511, 449600.6270395119 5412921.356976227, 449604.7781654215 5412920.541279472, 449608.5895365421 5412919.46184521, 449610.842163415 5412918.76335628, 449613.8387027025 5412917.602349282, 449616.76150549244 5412916.397541602, 449618.4267426552 5412915.6265414115, 449622.3539571713 5412913.56776845, 449623.31717624434 5412913.025450806, 449623.469776855 5412912.868433806, 449623.6237828398 5412912.867043071, 449623.7196217933 5412912.921762948, 449623.7717601848 5412913.010228663, 449623.8136481859 5412913.587937933, 449624.2902329334 5412913.572517156, 449624.38094090414 5412914.683404835, 449630.9178089899 5412914.101876877, 449630.8739143512 5412913.301844328, 449632.98429004755 5412913.093799805, 449632.85340290813 5412911.594177414, 449633.44139722886 5412911.733390482, 449633.3687635781 5412911.811865739, 449634.9688831225 5412913.576149886, 449636.64116364875 5412911.960194462, 449635.12241655105 5412910.272994659, 449634.22338476323 5412911.42616944, 449632.6486707013 5412910.8511823565, 449633.1723898306 5412908.745328067, 449633.6809331814 5412907.395571448, 449632.0965758859 5412906.564979016, 449632.24154219666 5412906.37467999, 449632.10109926015 5412906.253660282, 449632.1368641002 5412906.153283759, 449632.03248709446 5412905.965236017, 449632.0170169093 5412905.876439151, 449632.0597139131 5412905.731531769, 449633.3081509492 5412904.28615824, 449634.4403545097 5412902.964122151, 449634.68216361897 5412902.939704867, 449634.78533626033 5412902.994358722, 449634.90890402586 5412902.8709553685, 449635.0347800814 5412903.003223728, 449635.1948152892 5412902.857257005, 449636.31493905303 5412904.25901188, 449639.6449246257 5412902.661442981, 449640.48687111214 5412904.121295262, 449639.5787976075 5412905.085560614, 449641.6630449916 5412906.045047367, 449642.7772715006 5412904.356312055, 449640.7423521288 5412903.174038237, 449640.611049216 5412903.253043019, 449640.4141531476 5412902.565562294, 449641.946280098 5412902.4850290585, 449641.7802405506 5412900.340933944, 449642.58633828926 5412900.2669548765, 449641.96324695816 5412893.8024464715, 449640.8566696185 5412893.901372244, 449635.5822474328 5412832.038043762, 449638.0595410284 5412831.848923279, 449638.0408595018 5412831.404409284, 449640.52548717073 5412831.215223694, 449640.2731551761 5412828.449352107, 449641.3721107519 5412828.317144039, 449641.25518949685 5412826.739576128, 449642.9850470283 5412826.6239074115, 449642.7462798089 5412823.735625579, 449642.5234843125 5412820.9917214485, 449640.6764859113 5412821.130681849, 449640.60436957626 5412819.641646034, 449639.4024388879 5412819.741432611, 449639.2017432166 5412817.008446167, 449636.52673296514 5412817.232702173, 449636.31247223227 5412814.6221260065, 449636.0776919613 5412814.613128503, 449635.391206935 5412806.815145865, 449635.60368519445 5412806.790993489, 449635.31619423494 5412803.380649782, 449635.09618137043 5412803.382636058, 449634.4531948267 5412795.528675599, 449634.6365391388 5412795.527020349, 449634.33427926747 5412792.105693004, 449634.1290338704 5412792.118663054, 449633.46484657715 5412784.353830736, 449633.6555250439 5412784.352109246, 449633.4263937883 5412781.719433408, 449636.1014209998 5412781.495176044, 449635.8997192581 5412778.651028268, 449637.0362567257 5412778.618533815, 449636.91350504366 5412777.207774697, 449638.6796454757 5412777.047309087, 449638.4516202225 5412774.536910838, 449638.16603648325 5412771.337774179, 449636.4140600939 5412771.442526725, 449636.3054739868 5412769.9760544235, 449635.17044009484 5412770.175291397, 449634.93226927775 5412767.353707063, 449632.42581256223 5412767.565325888, 449632.42873048485 5412767.076148678, 449629.8196003863 5412767.288695651, 449624.6260454385 5412705.469124302, 449625.784097605 5412705.380848207, 449625.21140460705 5412698.815834385, 449624.397943989 5412698.889881964, 449624.2467621461 5412696.7678878335, 449622.6781100574 5412696.870988961, 449622.9853372693 5412695.96773253, 449623.03737723606 5412696.045082065, 449624.77562591207 5412694.41741188, 449623.2275823561 5412692.741596499, 449621.4324691968 5412694.569887813, 449622.5781581991 5412695.548960886, 449621.9609937083 5412697.055337553, 449619.946886898 5412696.562140484, 449618.43871866807 5412696.0532580735, 449617.65367872006 5412697.650087786, 449617.4612906789 5412697.462835124, 449617.3088849697 5412697.642084512, 449617.2127411392 5412697.554016263, 449617.09660338896 5412697.688469868, 449616.84715035616 5412697.679605605, 449615.4577352982 5412696.513744743, 449614.0239146523 5412695.3038170105, 449614.0138700707 5412695.003746988, 449614.07193893724 5412694.936520154, 449613.96102680376 5412694.837468275, 449614.05506242963 5412694.692097156, 449613.9148146695 5412694.593310224, 449615.29801661795 5412693.446877436, 449614.378878989 5412691.5652775355, 449613.7199415229 5412690.070425025, 449615.1281581061 5412689.257278229, 449616.2143748868 5412690.1479506185, 449617.32080266706 5412688.403696475, 449615.46040861116 5412687.064215939, 449614.2101139275 5412689.121047575, 449614.32072498364 5412689.186750986, 449613.7730910469 5412689.458506467, 449613.6485249513 5412687.847657164, 449611.4863254577 5412688.011707396, 449611.44292906555 5412687.267256037, 449604.8984623957 5412687.848871055, 449604.98897594935 5412688.937525766, 449604.5059418415 5412689.053059722, 449604.5606933101 5412689.43054534, 449604.5989694958 5412689.608072617, 449604.5414027555 5412689.73088034, 449604.3737269281 5412689.8435656335, 449604.19027872104 5412689.834105697, 449603.46974788094 5412689.640507303, 449602.6220300327 5412689.1701313285, 449600.81276603666 5412688.619505331, 449597.58413957 5412687.648137317, 449593.73212909856 5412686.682403454, 449590.3232660036 5412686.057297078, 449586.1306774322 5412685.550445473, 449580.3267357528 5412685.291617745, 449580.32784101204 5412684.602349706, 449576.2967979027 5412684.927825402, 449576.4195663769 5412686.338583104, 449570.9662473771 5412686.732503002, 449570.86578072567 5412685.354895004, 449566.86387329566 5412685.657880034, 449566.9359078913 5412686.324252794, 449564.6663129751 5412686.778335735, 449562.16364109446 5412687.412399851, 449560.02013056946 5412688.020983725, 449556.41506428015 5412689.220870763, 449553.900641493 5412690.177439789, 449551.7741126546 5412691.041565836, 449549.2033322462 5412692.254339157, 449546.7870676462 5412693.521301644, 449544.1300921956 5412694.934964047, 449543.9907479902 5412694.93622428, 449543.85049896775 5412694.837439101, 449543.77565188025 5412694.671360023, 449543.7859966721 5412694.1932326, 449543.08907447907 5412694.177301526, 449543.2259000398 5412693.086591521, 449536.6668787795 5412693.679535491, 449536.7721739575 5412694.779172678, 449536.2954700794 5412694.783484644, 449536.3540470338 5412695.583383606, 449536.34571388876 5412696.283834195, 449536.2855406757 5412696.929168368, 449536.174130714 5412697.586083068, 449535.95281281247 5412698.255109006, 449535.66327772563 5412698.680176544, 449535.1692984536 5412699.207147025, 449534.6375436876 5412699.6121715205, 449534.0386778037 5412699.8955154065, 449533.46090867126 5412700.078614915, 449533.49356261635 5412700.445182742, 449532.3722806281 5412700.544262435, 449532.5118394902 5412702.188325901, 449530.4231875316 5412702.373976488, 449531.3980906808 5412713.66009745, 449533.50090341247 5412713.418733721, 449537.16807661625 5412756.386379051, 449486.46780440013 5412760.725072889, 449486.34724242584 5412760.370418295, 449486.0722675962 5412759.972693572, 449485.6662904804 5412759.687325738, 449485.26855303056 5412759.501936954, 449484.7840175564 5412759.450738974, 449484.3823685349 5412759.64336604, 449483.67042272736 5412864.072456881))'",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#projections",
    "href": "geographic_data/hands_on.html#projections",
    "title": "Bring in geography",
    "section": "Projections",
    "text": "Projections\nBut without an assigned coordinate reference system (CRS), you don’t know where this shape lies on Earth. Therefore, each geometry column has (optionally) assigned a CRS. That is always available via .crs.\n\nbuildings.crs\n\n&lt;Projected CRS: EPSG:32631&gt;\nName: WGS 84 / UTM zone 31N\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Between 0°E and 6°E, northern hemisphere between equator and 84°N, onshore and offshore. Algeria. Andorra. Belgium. Benin. Burkina Faso. Denmark - North Sea. France. Germany - North Sea. Ghana. Luxembourg. Mali. Netherlands. Niger. Nigeria. Norway. Spain. Togo. United Kingdom (UK) - North Sea.\n- bounds: (0.0, 0.0, 6.0, 84.0)\nCoordinate Operation:\n- name: UTM zone 31N\n- method: Transverse Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nIf you check the type, you’ll notice it comes from the pyproj package. Note that you will likely never interact with that yourself.\n\ntype(buildings.crs)\n\npyproj.crs.crs.CRS\n\n\nThe object with the CRS information has plenty of useful tricks. You can, for example, quickly check if it is a geographic (coordinates are latitude and longitude in degrees) or a projected CRS (x and y in meters, feet or similar).\n\nbuildings.crs.is_geographic\n\nFalse\n\n\ngeopandas is like a glue that brings different pieces of the Python ecosystem together. pandas for tabular data, shapely for geometries, pyogrio for interaction with GIS file formats or pyproj for CRS management.",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#simple-accessors-and-methods",
    "href": "geographic_data/hands_on.html#simple-accessors-and-methods",
    "title": "Bring in geography",
    "section": "Simple accessors and methods",
    "text": "Simple accessors and methods\nNow you have a GeoDataFrame and can start working with its geometry.\nSince there was only one geometry column in the buildings dataset, this column automatically becomes the active geometry and spatial methods used on the GeoDataFrame will be applied to the \"geometry\" column.\n\nMeasuring area\nTo measure the area of each polygon, access the GeoDataFrame.area attribute, which returns a pandas.Series. Note that GeoDataFrame.area is just GeoSeries.area applied to the active geometry column.\n\n1buildings[\"area\"] = buildings.area\nbuildings[\"area\"].head()\n\n\n1\n\n.area is a property that always triggers a new area measurement. If you want to access an existing column called \"area\", use buildings[\"area\"]. Especially if you don’t want to re-run the computation repeatedly.\n\n\n\n\n0    27194.254623\n1     2196.125585\n2       34.882075\n3       38.808817\n4       90.426163\nName: area, dtype: float64\n\n\n\n\nGetting polygon boundary and centroid\ngeopandas allows you a quick manipulation of geometries. For example, to get the boundary of each polygon (of a LineString geometry type), access the GeoDataFrame.boundary property:\n\nbuildings[\"boundary\"] = buildings.boundary\nbuildings[\"boundary\"].head()\n\n0    LINESTRING (449483.67 5412864.072, 449488.881 ...\n1    LINESTRING (449751.333 5412374.461, 449752.33 ...\n2    LINESTRING (449714.614 5412302.731, 449714.577...\n3    LINESTRING (449712.682 5412306.562, 449702.048...\n4    LINESTRING (449725.342 5412337.375, 449720.863...\nName: boundary, dtype: geometry\n\n\nSince you have saved the boundary as a new column, you now have two geometry columns in the same GeoDataFrame.\nYou can also create new geometries, which could be, for example, a buffered version of the original one (i.e., GeoDataFrame.buffer(10) to buffer by 10 meters if your CRS is in meters) or its centroid:\n\nbuildings[\"centroid\"] = buildings.centroid\nbuildings[\"centroid\"].head()\n\n0     POINT (449571.139 5412805.32)\n1    POINT (449737.829 5412348.159)\n2    POINT (449708.963 5412301.639)\n3    POINT (449707.214 5412305.199)\n4    POINT (449722.241 5412327.441)\nName: centroid, dtype: geometry\n\n\n\n\nMeasuring distance\nMeasuring distance is similarly straightforward. The building data are from central Paris, so you can try to figure out how far is each of them from the Arc de Triomphe.\nUse the coordinates of the Arc de Triomphe to generate a Point geometry.\n\n1arc = gpd.GeoSeries.from_xy(x=[2.29503], y=[48.87377], crs=\"EPSG:4326\")\n\n\n1\n\nGeoSeries.from_xy() is a handy way of creating point geometries if you know their coordinates. You pass an array of x coordinates (longitude is always x in geopandas), an array of y coordinates and a CRS. \"EPSG:4326\" represents WGS 84 CRS.\n\n\n\n\n\n\n\n\n\n\nUse geocoding to get the geometry\n\n\n\n\n\nThe code above uses known coordinates. If you don’t know them but know the address and a name of a place, you can use the built-in geocoding capabilities in geopandas:\narc = gpd.tools.geocode(\"Arc de Triomphe, Paris\")\n\n\n\nNow you have the Arc de Triomphe as a Point. However, that point is in latitude and longitude coordinates, which is a different CRS than the one buildings use. They must use the same CRS to measure the distance between geometries.\n\n1arc = arc.to_crs(buildings.crs)\narc\n\n\n1\n\n.to_crs projects coordinates from one CRS to another.\n\n\n\n\n0    POINT (448306.71 5413663.102)\ndtype: geometry\n\n\nWith a Point based on the correct CRS, you can measure the distance from each building to the Arc.\n\n1arc_location = arc.geometry.item()\n2buildings[\"distance_to_arc\"] = buildings.distance(arc_location)\nbuildings[\"distance_to_arc\"].head()\n\n\n1\n\nExtract the Point geometry from a single-item GeoDataFrame. Use .item() to extract the scalar geometry object from the GeoSeries of length 1.\n\n2\n\nMeasure the distance from every geometry in buildings to the Point and assign the result as a new column.\n\n\n\n\n0    1422.562389\n1    1905.389066\n2    1949.156743\n3    1945.432420\n4    1938.163361\nName: distance_to_arc, dtype: float64\n\n\nUsing buildings.distance(arc_location) measures the distance from geometries in the active geometry column, which are Polygons in this case. But you can also measure distance from geometries in any other column.\n\nbuildings[\"centroid\"].distance(arc_location).head()\n\n0    1527.930234\n1    1943.495766\n2    1954.455176\n3    1950.721082\n4    1946.206235\ndtype: float64\n\n\nNote that geopandas.GeoDataFrame is a subclass of pandas.DataFrame, so you have all the pandas functionality available to use on the geospatial dataset — you can even perform data manipulations with the attributes and geometry information together.\nFor example, to calculate the average of the distances measured above, access the \"distance\" column and call the .mean() method on it:\n\nbuildings[\"distance_to_arc\"].mean()\n\n864.570916943503\n\n\nSimilarly, you can plot the distribution of distances as a histogram.\n\n_ = buildings[\"distance_to_arc\"].plot.hist(bins=50)\n\n\n\n\nHistogram of distances to the Arc de Triomphe",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#making-maps",
    "href": "geographic_data/hands_on.html#making-maps",
    "title": "Bring in geography",
    "section": "Making maps",
    "text": "Making maps\nMaps in GeoPandas are of two kinds. Static images and interactive maps based on leaflet.js.\n\nStatic maps\nGeoPandas can also plot maps to check how the geometries appear in space. Call GeoDataFrame.plot() to plot the active geometry. To colour code by another column, pass in that column as the first argument. In the example below, you can plot the active geometry column and colour code by the \"distance_to_arc\" column. You may also want to show a legend (legend=True).\n\n_ = buildings.plot(\"distance_to_arc\", legend=True)\n\n\n\n\nMap of distances to the Arc de Triomphe\n\n\n\n\nThe map is created using the matplotlib package. It’s the same that was used under the hood for all the plots you have done before. You can use it directly to save the resulting plot to a PNG file.\n\n1import matplotlib.pyplot as plt\n\n\n1\n\nImport the pyplot module of the matplotlib package as the plt alias.\n\n\n\n\nIf you now create the plot and use the plt.savefig() function in the same cell, a PNG will appear on your disk.\nbuildings.plot(\"distance_to_arc\", legend=True)\nplt.savefig(\"distance_to_arc.png\", dpi=150)\n\n\n\n\n\n\nOther resources for static plotting\n\n\n\nWant to know more about static plots? Check this chapter of A Course on Geographic Data Science by Dani Arribas-Bel (2019) or the GeoPandas documentation.\n\n\n\n\nInteractive maps\nYou can also explore your data interactively using GeoDataFrame.explore(), which behaves in the same way .plot() does but returns an interactive HTML map instead.\n\nbuildings.explore(\"distance_to_arc\", legend=True)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nUsing the GeoSeries of centroids, you can create a similar plot, but since you access only a single column, it has no values to show.\n\nbuildings[\"centroid\"].explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nKeeping data around\n\n\n\nIf you want to use centroids on a map but keep the data around to have them available in the tooltip, you can assign it as an active geometry and then use .explore().\nbuildings.set_geometry(\"centroid\").explore()\n\n\nYou can also layer multiple geometry layers on top of each other. You just need to use one plot as a map (m) object for the others.\n\n1m = buildings.explore(tiles=\"CartoDB Positron\", popup=True, tooltip=False)\n2street_edges.explore(m=m, color=\"black\")\n3street_nodes.explore(m=m, color=\"pink\")\n4arc.explore(m=m, marker_type=\"marker\")\n5m.save(\"paris-map.html\")\nm\n\n\n1\n\nCreate a base map (m) based on buildings. tiles=\"CartoDB Positron specifies which background tiles shall be used, popup=True enables pop-up (shows data on click) and tooltip=False disables tooltip (shows data on hover).\n\n2\n\nPassing m=m ensures that both GeoDataFrames are shown on the same map.\n\n3\n\ncolor=\"pink\" specifies the geometries’ colour if no data is shown.\n\n4\n\nmarker_type=\"marker\" specifies how points are shown on the map. Here, you want to use \"marker\".\n\n5\n\nSave the map to a file. If you add m on the next line, the map will also be shown in the Notebook.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#spatial-predicates",
    "href": "geographic_data/hands_on.html#spatial-predicates",
    "title": "Bring in geography",
    "section": "Spatial predicates",
    "text": "Spatial predicates\nSpatial predicates tell you the spatial relation between two geometries. Are they equal, intersect, overlap, or are they within another?\nLet’s leave Paris and load a map of countries provided by Runfola et al. (2020) and simplified for this course.\n\nworld_countries = gpd.read_file(\n    \"https://martinfleischmann.net/sds/geographic_data/data/geoboundaries_cgaz.gpkg\",\n)\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nworld_countries = gpd.read_file(\"geoboundaries_cgaz.gpkg\")\n\n\n\nSince you’ll be exploring spatial predicates, you need a second layer. Let’s load a data set of populated places from Natural Earth.\n\nworld_cities = gpd.read_file(\n    \"https://naciscdn.org/naturalearth/110m/cultural/ne_110m_populated_places_simple.zip\"\n)\n\nA quick map with both shows how the data look and relate.\n\n1ax = world_countries.plot()\n2_ = world_cities.plot(ax=ax, color=\"pink\", alpha=0.7)\n\n\n1\n\nMulti-layer static map works the same as interactive. You just need to replace m with ax.\n\n2\n\nalpha=0.7 sets partial transparency for easier visibility of denser clusters of points.\n\n\n\n\n\n\n\nOverlay of boundaries and cities\n\n\n\n\nLet’s first create some small toy spatial objects. First, extract a polygon representing Belgium.\n\nbelgium = world_countries.loc[\n    world_countries[\"shapeGroup\"] == \"BEL\", \"geometry\"\n].item()\nbelgium\n\n\n\n\n\n\n\n\nSecond, get points representing Paris and Brussels.\n\nparis = world_cities.loc[world_cities[\"name\"] == \"Paris\", \"geometry\"].item()\nbrussels = world_cities.loc[world_cities[\"name\"] == \"Brussels\", \"geometry\"].item()\n\nAnd create a line connecting both cities. Here comes one of those cases when you use shapely directly.\n\n1import shapely\n\n2line = shapely.LineString([paris, brussels])\n\n\n1\n\nImport shapely.\n\n2\n\nCreate a shapely.LineString geometry object with paris as a starting point and brussels as an ending point.\n\n\n\n\nLet’s visualise those four geometry objects together. To do that, you can create a single GeoSeries with all of them. Notice that such a GeoSeries contains mixed geometry types (Polygon, two Points, LineString). That may be an issue with some traditional GIS software, but is no problem with geopandas.\n\ngpd.GeoSeries([belgium, paris, brussels, line], crs=world_cities.crs).explore(\n    marker_type=\"marker\"\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nYou can recognise the shape of Belgium, two markers locating Paris and Brussels and the line connecting them.\nBrussels, the capital of Belgium, is thus located within Belgium. This is a spatial relationship, and we can test this using the individual shapely geometry objects as follow:\n\nbrussels.within(belgium)\n\nTrue\n\n\nAnd using the reverse, Belgium contains Brussels:\n\nbelgium.contains(brussels)\n\nTrue\n\n\nOn the other hand, Belgium does not contain Paris:\n\nbelgium.contains(paris)\n\nFalse\n\n\nNor Paris is located in Belgium:\n\nparis.within(belgium)\n\nFalse\n\n\nThe straight line you draw from Paris to Brussels is not fully located within Belgium.\n\nbelgium.contains(line)\n\nFalse\n\n\nBut it does intersect with it.\n\nline.intersects(belgium)\n\nTrue\n\n\n\nSpatial relationships with GeoDataFrames\nThe same methods available on individual shapely geometries are also available as methods on GeoSeries and GeoDataFrame objects.\nFor example, if you call the .contains() method on the world_countries dataset with the paris point, it will do this spatial check for each country in the world_countries GeoDataFrame.\n\nworld_countries.contains(paris).sum()\n\n1\n\n\nBecause the above gives us a boolean result, we can use that to filter the dataframe:\n\nworld_countries[world_countries.contains(paris)].explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nMaking use of spatial index\n\n\n\nYou could also do the same based on a query over the spatial index. Custom queries on a spatial index using GeoDataFrame.sindex.query() are often much faster but are also considered advanced usage. Since GeoPandas wraps them in spatial joins covering most cases, you may not even need to access sindex directly.\nworld_countries.iloc[world_countries.sindex.query(paris, \"within\")]",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#spatial-join",
    "href": "geographic_data/hands_on.html#spatial-join",
    "title": "Bring in geography",
    "section": "Spatial join",
    "text": "Spatial join\nOne of the typical geospatial tasks is a spatial join. Let’s change the data set again and load boundaries of Spanish cities derived from Daniel Arribas-Bel, Garcia-López, and Viladecans-Marsal (2019), which proposes a machine learning algorithm to delineate city boundaries from building footprints.\nYou can try to figure out which of these cities fall into Catalonia region and which province they belong to.\nFirst, you need data representing Catalonia. You can download it from ICGC website or use the catalonia.gpkg saved in this repository.\n\ncatalonia = gpd.read_file(\n    \"https://martinfleischmann.net/sds/geographic_data/data/catalonia.gpkg\",\n)\ncatalonia.head()\n\n\n\n\n\n\n\n\nCODIPROV\nNOMPROV\nCAPPROV\nAREAP5000\ngeometry\n\n\n\n\n0\n08\nBarcelona\nBarcelona\n7730.4124\nMULTIPOLYGON (((386888.695 4561204.584, 386881...\n\n\n1\n17\nGirona\nGirona\n5902.2156\nMULTIPOLYGON (((482690.024 4613155.364, 482688...\n\n\n2\n25\nLleida\nLleida\n12165.6897\nMULTIPOLYGON (((393371.457 4638570.63, 393374....\n\n\n3\n43\nTarragona\nTarragona\n6305.6772\nMULTIPOLYGON (((300644.45 4494148.85, 300643.5...\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\ncatalonia = gpd.read_file(\"catalonia.gpkg\")\n\n\n\nThen, you can load the boundaries of Spanish cities from the data repository linked to the paper.\n\ncities = gpd.read_file(\"https://ndownloader.figshare.com/files/20232174\")\ncities.head()\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/pyogrio/raw.py:196: RuntimeWarning: File /vsicurl/https://ndownloader.figshare.com/files/20232174 has GPKG application_id, but non conformant file extension\n  return ogr_read(\n\n\n\n\n\n\n\n\n\ncity_id\nn_buildings\ngeometry\n\n\n\n\n0\nci000\n2348\nPOLYGON ((385390.071 4202949.446, 384488.697 4...\n\n\n1\nci001\n2741\nPOLYGON ((214893.033 4579137.558, 215258.185 4...\n\n\n2\nci002\n5472\nPOLYGON ((690674.281 4182188.538, 691047.526 4...\n\n\n3\nci003\n14608\nPOLYGON ((513378.282 4072327.639, 513408.853 4...\n\n\n4\nci004\n2324\nPOLYGON ((206989.081 4129478.031, 207275.702 4...\n\n\n\n\n\n\n\nA quick exploration to better understand what you have just opened might help.\n\nm = catalonia.explore()\ncities.explore(m=m, color=\"red\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nYou should check the CRS, because for spatial join, you need to be sure that both GeoDataFrames are using the same (but don’t worry, geopandas would warn you in case of a CRS mismatch).\n\ncatalonia.crs.equals(cities.crs)\n\nFalse\n\n\nSince these two differ, you can re-project the geometries of catalonia to the CRS of cities.\n\ncatalonia = catalonia.to_crs(cities.crs)\ncatalonia.crs.equals(cities.crs)\n\nTrue\n\n\nNow, you can do the spatial join using the .sjoin() method. That uses the intersects predicate by default, but you can use any predicates you used above (plus a couple more).\n\n1cities_within_catalonia = cities.sjoin(catalonia)\n\n\n1\n\nThis joins the data from catalonia to cities for every geometry that intersects between the GeoDataFrames.\n\n\n\n\nLet’s see the result.\n\n1print(\n2    f\"Length of cities: {len(cities)}\\n\"\n3    f\"Length of cities_within_catalonia: {len(cities_within_catalonia)}\"\n)\n\n\n1\n\nThis showcases a more advanced use of print() with multi-line string.\n\n2\n\nA string starting with f is an f-string that can contain Python code embedded in {}. Such a code is executed and printed. The \\n part of the string stands for a line break.\n\n3\n\nlen(cities_within_catalonia) gives you the length of a GeoDataFrame, i.e. a number of rows.\n\n\n\n\nLength of cities: 717\nLength of cities_within_catalonia: 65\n\n\nYou can check that the resulting subset of cities has additional columns.\n\ncities_within_catalonia.head(2)\n\n\n\n\n\n\n\n\ncity_id\nn_buildings\ngeometry\nindex_right\nCODIPROV\nNOMPROV\nCAPPROV\nAREAP5000\n\n\n\n\n15\nci015\n379617\nPOLYGON ((935791.557 4629685.255, 936344.32 46...\n0\n08\nBarcelona\nBarcelona\n7730.4124\n\n\n19\nci019\n7623\nPOLYGON ((1000426.98 4697229.346, 1000880.637 ...\n1\n17\nGirona\nGirona\n5902.2156\n\n\n\n\n\n\n\nYou can now plot cities based on the province they belong to, captured by the \"NOMPROV\" column.\n\ncities_within_catalonia.explore(\n1    \"NOMPROV\",\n    tiles=\"CartoDB Positron\",\n)\n\n\n1\n\ngeopandas automatically switches from the continuous colour map to categorical when it encounters a categorical variable.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSince GeoDataFrames are still based on pandas.ataFrames, we can readily use pandas functionality, like .groupby(), on the result.\n\n1cities_within_catalonia.groupby(\"NOMPROV\")[\"n_buildings\"].sum()\n\n\n1\n\nGroup by the \"NOMPROV\" column and get a sum of the \"n_buildings\" column by province.\n\n\n\n\nNOMPROV\nBarcelona    583415\nGirona       154179\nLleida        32052\nTarragona    157517\nName: n_buildings, dtype: int64",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#overlay",
    "href": "geographic_data/hands_on.html#overlay",
    "title": "Bring in geography",
    "section": "Overlay",
    "text": "Overlay\nSometimes, you may want to create new geometries based on the spatial relationships between existing geometries. These are called overlay operations.\nLet’s assume that you are interested in areas that are 10 kilometres around a centroid of each city.\n\n1buffered_centroids = cities_within_catalonia.centroid.buffer(10_000)\nbuffered_centroids.explore()\n\n\n1\n\nGet centroids and directly buffer them to get polygons capturing areas within 10 km.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nWith that, you can ask for an intersection between the buffer and city boundaries.\n\n\n\nA diagram illustrating the instersection overlay operation.\n\n\n\n1cities_within_catalonia.overlay(\n2    buffered_centroids.to_frame(), how=\"intersection\"\n).explore()\n\n\n1\n\nThe .overlay() method has a similar signature to .sjoin(). It should look familiar now.\n\n2\n\ngeopandas allows you to overlay only two GeoDataFrames, not GeoSeries. A quick way of converting a GeoSeries to a GeoDataFrame is to use the .to_frame() method. how=\"intersection\" specifies the overlay operation.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOr you may want to do the union of the two to get the areas that are either within the city boundary or within 10 km of a city centroid.\n\n\n\nA diagram illustrating the union overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"union\"\n).explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOr find all parts of city boundaries that are further away than 10km from each centroid.\n\n\n\nA diagram illustrating the difference overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"difference\"\n).explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nFinally, you may ask which parts of areas are within 10 km or a boundary but not in both.\n\n\n\nA diagram illustrating symmetric difference overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"symmetric_difference\"\n).explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nIf you remember the spatial join between the provinces of Catalonia and Spanish cities, you may remember that some geometries in the result were duplicated because those cities intersect with more than one province. In that case, .overlay() may be a better solution. See if you can find the difference.\n\ncatalonia.overlay(cities).explore(\n    \"NOMPROV\",\n    tiles=\"CartoDB Positron\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\n\nCheck the similar introduction by Dani Arribas-Bel (2019) in his part Spatial data to learn more about static plots and how to get a background map with those.\nHave a look at the chapter Choropleth Mapping explaining how to get choropleth maps from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "geographic_data/hands_on.html#acknowledgements",
    "href": "geographic_data/hands_on.html#acknowledgements",
    "title": "Bring in geography",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nDelineation of Spanish cities is used following the A Course on Geographic Data Science by Dani Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The section on basic overlay predicates is adapted from the Introduction to geospatial data analysis with GeoPandas and the PyData stack by Joris van den Bossche. Illustrations are taken from the GeoPandas documentation, drawn by Martin Fleischmann.",
    "crumbs": [
      "Spatial data",
      "Bring in geography"
    ]
  },
  {
    "objectID": "raster_data/exercise_answers.html",
    "href": "raster_data/exercise_answers.html",
    "title": "Learning xarray",
    "section": "",
    "text": "One solution. You may have yours.\nimport datashader as ds\nimport geopandas as gpd\nimport rioxarray\nimport osmnx as ox\nimport xvec\n\nfrom geocube.api.core import make_geocube\nLoad KEN_population_v2_0_gridded.tif and KEN_building_class_metrics_v1_0_residential_count.tif files.\npopulation = rioxarray.open_rasterio(\n    \"/Users/martin/Downloads/KEN_population_v2_0_gridded 2/KEN_population_v2_0_gridded.tif\",\n    masked=True\n)\nbuildings = rioxarray.open_rasterio(\n    \"/Users/martin/Downloads/KEN_building_class_metrics_v1_0_rasters 2/KEN_building_class_metrics_v1_0_residential_count.tif\",\n    masked=True\n)\nPlot at least one of them in their full extent.\ncanvas = ds.Canvas(plot_width=600, plot_height=600)\nagg = canvas.raster(population.sel(band=1))\nagg.plot(cmap=\"cividis\")\nClip them both to the extent of the \"Mombasa\" functional urban area from GHSL.\nfua_url = (\n    \"https://martinfleischmann.net/sds/raster_data/data/\"\n    \"GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.zip\"\n)\np = f\"zip+{fua_url}!GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.gpkg\"\nfuas = gpd.read_file(p)\nmombasa = fuas.query(\"eFUA_name == 'Mombasa'\")\npopulation_mombasa = population.rio.clip(\n    mombasa.to_crs(population.rio.crs).geometry\n)\nbuildings_mombasa = buildings.rio.clip(\n    mombasa.to_crs(buildings.rio.crs).geometry\n)\nWhat is the maximum population per hectare in Mombasa?\npopulation_mombasa.max()\nReproject one to match the other.\nbuildings_aligned = buildings_mombasa.rio.reproject_match(population_mombasa)\nNormalise the population with the building count.\nnorm_pop = population_mombasa / buildings_aligned\nnorm_pop.sel(band=1).plot()\nSave the result as a GeoTIFF.\nnorm_pop.rio.to_raster(\"normalised_population.tif\")\nadmin = ox.features_from_place(\"Mombasa\", {\"admin_level\": \"6\"})\ndistricts = admin[admin.geom_type == \"Polygon\"][\n    [\"name\", \"geometry\"]\n]\ndistricts[\"key\"] = range(len(districts))\ndistricts\nbuildings_aligned = buildings_aligned.sel(band=1).squeeze()\ndistricts_grid = make_geocube(\n    vector_data=districts.to_crs(buildings.rio.crs),\n    measurements=[\"key\"],\n    like=buildings,\n)\ngrouped = buildings.groupby(districts_grid.key)\ndistricts[\"n_buildings\"] = grouped.sum().sel(band=1)\ndistricts.plot(\"n_buildings\", legend=True)\nExtract values for 100 random points from each Mombasa district.\npoints = districts.sample_points(100).explode(index_parts=True)\npoints_w_value = population_mombasa.xvec.extract_points(\n    points=points.to_crs(population_mombasa.rio.crs),\n    x_coords=\"x\",\n    y_coords=\"y\",\n)\npoints_dataframe = points_w_value.xvec.to_geopandas()\npoints_dataframe.plot(1, markersize=0.1)"
  },
  {
    "objectID": "raster_data/exercise.html",
    "href": "raster_data/exercise.html",
    "title": "Learning xarray",
    "section": "",
    "text": "Try to reproduce the similar with different population grids.",
    "crumbs": [
      "Raster data",
      "Learning xarray"
    ]
  },
  {
    "objectID": "raster_data/exercise.html#worldpop-data-of-kenya",
    "href": "raster_data/exercise.html#worldpop-data-of-kenya",
    "title": "Learning xarray",
    "section": "WorldPop data of Kenya",
    "text": "WorldPop data of Kenya\nGo to wopr.worldpop.org and download a Gridded population estimates (~100m) for Kenya and a Kenya 100m Building class. Each is an archive, so unzip (reading from the zipped archive doesn’t seem to work in this case.)\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nIf the link does not work, please report it and use the backup:\n\nGridded population estimates\nKenya 100m Building\n\n\n\n\n\nLoad KEN_population_v2_0_gridded.tif and KEN_building_class_metrics_v1_0_residential_count.tif files.\nPlot at least one of them in their full extent.\nClip them both to the extent of the \"Mombasa\" functional urban area from GHSL.\nWhat is the maximum population per hectare in Mombasa?\nReproject one to match the other. These two grids are not perfectly aligned, so you need to align them. Check the tip below on how to do that.\n\n\n\n\n\n\n\nAligning rasters\n\n\n\n\n\nWhen two rasters don’t perfectly match (i.e. their resolution and placement are exactly the same), you need to align them by projecting one to match the other.\nTry figuring that out!\n\n\n\n\n\n\nA hint, please!\n\n\n\n\n\nrioxarray has the functionality to do this as one line of code. Have you checked their (not so great, I admin) documentation?\n\n\n\n\n\n\nAnother hint\n\n\n\n\n\nYou are looking for .rio.reproject_match() method.\n\n\n\n\n\n\nOkay, here’s the code\n\n\n\n\n\nThis is how the aligning should look.\naligned_b = b.rio.reproject_match(a)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNormalise the population with the building count.\nSave the result as a GeoTIFF.\n\n\n\n\n\n\n\nOptional extension\n\n\n\n\nIf you have time, you can also figure out how many buildings are per district in Mombasa. Those are in OpenStreetMap as admin_level==6.\nExtract values for 100 random points from each Mombasa district.\nGenerate zonal statistics for each district. Think about the proper aggregation method.",
    "crumbs": [
      "Raster data",
      "Learning xarray"
    ]
  },
  {
    "objectID": "data_wrangling/concepts.html",
    "href": "data_wrangling/concepts.html",
    "title": "Open tools and open mindset",
    "section": "",
    "text": "Open science, open tools and open mindset in the slides. With a bonus - how to look and ask for help?",
    "crumbs": [
      "Open Data Science",
      "Open tools and open mindset"
    ]
  },
  {
    "objectID": "data_wrangling/concepts.html#acknowledgements",
    "href": "data_wrangling/concepts.html#acknowledgements",
    "title": "Open tools and open mindset",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe presentation contains the Turing Way project illustration by Community and Scriberia (2023). Used under a CC-BY 4.0 licence.",
    "crumbs": [
      "Open Data Science",
      "Open tools and open mindset"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html",
    "href": "data_wrangling/hands_on.html",
    "title": "Data wrangling",
    "section": "",
    "text": "You know the basics. What are Jupyter notebooks, how do they work, and how do you run Python in them. It is time to start using them for data science (no, that simple math you did the last time doesn’t count as data science).\nYou are about to enter the PyData ecosystem. It means that you will start learning how to work with Python from the middle. This course does not explicitly cover the fundamentals of programming. It is expected that those parts you need you’ll be able to pick as you go through the specialised data science stack. If you’re stuck, confused or need further explanation, use Google (or your favourite search engine), ask AI to explain the code or ask in online chat or during the class. Not everything will be told during the course (by design), and the internet is a friend of every programmer, so let’s figure out how to use it efficiently from the beginning.\nLet’s dig in!",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#munging-and-wrangling",
    "href": "data_wrangling/hands_on.html#munging-and-wrangling",
    "title": "Data wrangling",
    "section": "Munging and wrangling",
    "text": "Munging and wrangling\nReal-world datasets are messy. There is no way around it: datasets have “holes” (missing data), the amount of formats in which data can be stored is endless, and the best structure to share data is not always the optimum to analyse them, hence the need to munge1 them. As has been correctly pointed out in many outlets, much of the time spent in what is called Data Science is related not only to sophisticated modelling and insight but has to do with much more basic and less exotic tasks such as obtaining data, processing, and turning them into a shape that makes analysis possible, and exploring it to get to know their basic properties.\nSurprisingly, very little has been published on patterns, techniques, and best practices for quick and efficient data cleaning, manipulation, and transformation because of how labour-intensive and relevant this aspect is. In this session, you will use a few real-world datasets and learn how to process them into Python so they can be transformed and manipulated, if necessary, and analysed. For this, you will introduce some of the bread and butter of data analysis and scientific computing in Python. These are fundamental tools that are constantly used in almost any task relating to data analysis.\nThis notebook covers the basics and the content that is expected to be learnt by every student. You use a prepared dataset that saves us much of the more intricate processing that goes beyond the introductory level the session is aimed at. If you are interested in how it was done, there is a notebook.\nThis notebook discusses several patterns to clean and structure data properly, including tidying, subsetting, and aggregating. You finish with some basic visualisation. An additional extension presents more advanced tricks to manipulate tabular data.",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#dataset",
    "href": "data_wrangling/hands_on.html#dataset",
    "title": "Data wrangling",
    "section": "Dataset",
    "text": "Dataset\nYou will be exploring demographic characteristics of Chicago in 1918 linked to the influenza mortality during the pandemic that happened back then, coming from the research paper by Grantz et al. (2016). The data are aggregated to census tracts and contain information on unemployment, home ownership, age structure and influenza mortality from a period of 8 weeks.\nThe main tool you use is the pandas package. As with the math you used before, you must import it first.\n\n1import pandas as pd\n\n\n1\n\nImport the pandas package under the alias pd. Using the alias is not necessary, but it is a convention nearly everyone follows.\n\n\n\n\nThe data is stored in a CSV file. To make things easier, you can read data from a file posted online so, for now, you do not need to download any dataset:\n\n1chicago_1918 = pd.read_csv(\n2    \"https://martinfleischmann.net/sds/data_wrangling/data/chicago_influenza_1918.csv\",\n3    index_col=\"geography_code\",\n)\n\n\n1\n\nUse the read_csv function from pandas. Remember that you have imported pandas as pd.\n\n2\n\nSpecify the path to the file. It could be a web address like here or a local file path.\n\n3\n\nUse the column geography_code as an index of the table by passing its name to the index_col keyword argument. It is not strictly necessary but allows us to choose and index on reading instead of specifying it later. More on indices below.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou are using read_csv because the file you want to read is in CSV format. However, pandas allows for many more formats to be read and write. A full list of formats supported may be found in the documentation.\n\n\n\n\n\n\n\n\nAlternative\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nchicago_1918 = pd.read_csv(\n    \"chicago_influenza_1918.csv\",\n    index_col=\"geography_code\",\n)",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#pandas-101",
    "href": "data_wrangling/hands_on.html#pandas-101",
    "title": "Data wrangling",
    "section": "Pandas 101",
    "text": "Pandas 101\nNow, you are ready to start playing and interrogating the dataset! What you have at your fingertips is a table summarising, for each of the census tracts in Chicago more than a century ago, how many people lived in each by age, accompanied by some other socioeconomic data and influenza mortality. These tables are called DataFrame objects, and they have a lot of functionality built-in to explore and manipulate the data they contain. Let’s explore a few of those cool tricks!\n\nData Structures\nThe first aspect worth spending a bit of time on is the structure of a DataFrame. You can print it by simply typing its name:\n\nchicago_1918\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n496 rows × 12 columns\n\n\n\nNote the printing is cut to keep a nice and compact view but enough to see its structure. Since they represent a table of data, DataFrame objects have two dimensions: rows and columns. Each of these is automatically assigned a name in what you will call its index. When printing, the index of each dimension is rendered in bold, as opposed to the standard rendering for the content. The example above shows how the column index is automatically picked up from the .csv file’s column names. For rows, we have specified when reading the file you wanted the column geography_code, so that is used. If you hadn’t set any, pandas would automatically generate a sequence starting in 0 and going all the way to the number of rows minus one. This is the standard structure of a DataFrame object, so you will come to it over and over. Importantly, even when you move to spatial data, your datasets will have a similar structure.\nOne final feature that is worth mentioning about these tables is that they can hold columns with different types of data. In this example, you have counts (or int for integer types) and ratios (or ‘float’ for floating point numbers - a number with decimals) for each column. But it is useful to keep in mind that you can combine this with columns that hold other types of data such as categories, text (str, for string), dates or, as you will see later in the course, geographic features.\nTo extract a single column from this DataFrame, specify its name in the square brackets ([]). Note that the name, in this case, is a string. A piece of text. As such, it needs to be within single (') or double quotes (\"). The resulting data structure is no longer a DataFrame, but you have a Series because you deal with a single column.\n\nchicago_1918[\"influenza\"]\n\ngeography_code\nG17003100001     9\nG17003100002     6\nG17003100003     8\nG17003100004     2\nG17003100005     7\n                ..\nG17003100492    12\nG17003100493    40\nG17003100494    85\nG17003100495    15\nG17003100496    30\nName: influenza, Length: 496, dtype: int64\n\n\n\n\nInspect\nInspecting what it looks like. You can check the table’s top (or bottom) X lines by passing X to the method head (tail). For example, for the top/bottom five lines:\n\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n\n\n\n\n\n\nchicago_1918.tail()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n\n\n\nOr get an overview of the table:\n\nchicago_1918.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 496 entries, G17003100001 to G17003100496\nData columns (total 12 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   gross_acres     496 non-null    float64\n 1   illit           496 non-null    int64  \n 2   unemployed_pct  496 non-null    float64\n 3   ho_pct          496 non-null    float64\n 4   agecat1         496 non-null    int64  \n 5   agecat2         496 non-null    int64  \n 6   agecat3         496 non-null    int64  \n 7   agecat4         496 non-null    int64  \n 8   agecat5         496 non-null    int64  \n 9   agecat6         496 non-null    int64  \n 10  agecat7         496 non-null    int64  \n 11  influenza       496 non-null    int64  \ndtypes: float64(3), int64(9)\nmemory usage: 66.5+ KB\n\n\n\n\nSummarise\nOr of the values of the table:\n\nchicago_1918.describe()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\n\n\ncount\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n\n\nmean\n233.245968\n199.116935\n0.345818\n0.061174\n102.370968\n555.167339\n406.560484\n524.100806\n416.044355\n2361.582661\n1052.681452\n16.070565\n\n\nstd\n391.630857\n297.836201\n0.050498\n0.038189\n78.677423\n423.526444\n301.564896\n369.875444\n281.825682\n1545.469426\n722.955717\n12.252440\n\n\nmin\n6.900000\n0.000000\n0.057800\n0.000000\n0.000000\n3.000000\n1.000000\n4.000000\n0.000000\n8.000000\n6.000000\n0.000000\n\n\n25%\n79.975000\n30.750000\n0.323973\n0.032106\n46.750000\n256.500000\n193.500000\n253.750000\n220.500000\n1169.750000\n519.750000\n8.000000\n\n\n50%\n99.500000\n84.000000\n0.353344\n0.054389\n82.000000\n442.500000\n331.500000\n453.500000\n377.000000\n2102.000000\n918.500000\n13.500000\n\n\n75%\n180.125000\n241.250000\n0.373382\n0.084762\n136.000000\n717.500000\n532.500000\n709.500000\n551.750000\n3191.750000\n1379.250000\n21.000000\n\n\nmax\n3840.000000\n2596.000000\n0.495413\n0.197391\n427.000000\n2512.000000\n1917.000000\n2665.000000\n2454.000000\n9792.000000\n4163.000000\n85.000000\n\n\n\n\n\n\n\nNote how the output is also a DataFrame object, so you can do with it the same things you would with the original table (e.g. writing it to a file).\nIn this case, the summary might be better presented if the table is “transposed”:\n\nchicago_1918.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ngross_acres\n496.0\n233.245968\n391.630857\n6.9000\n79.975000\n99.500000\n180.125000\n3840.000000\n\n\nillit\n496.0\n199.116935\n297.836201\n0.0000\n30.750000\n84.000000\n241.250000\n2596.000000\n\n\nunemployed_pct\n496.0\n0.345818\n0.050498\n0.0578\n0.323973\n0.353344\n0.373382\n0.495413\n\n\nho_pct\n496.0\n0.061174\n0.038189\n0.0000\n0.032106\n0.054389\n0.084762\n0.197391\n\n\nagecat1\n496.0\n102.370968\n78.677423\n0.0000\n46.750000\n82.000000\n136.000000\n427.000000\n\n\nagecat2\n496.0\n555.167339\n423.526444\n3.0000\n256.500000\n442.500000\n717.500000\n2512.000000\n\n\nagecat3\n496.0\n406.560484\n301.564896\n1.0000\n193.500000\n331.500000\n532.500000\n1917.000000\n\n\nagecat4\n496.0\n524.100806\n369.875444\n4.0000\n253.750000\n453.500000\n709.500000\n2665.000000\n\n\nagecat5\n496.0\n416.044355\n281.825682\n0.0000\n220.500000\n377.000000\n551.750000\n2454.000000\n\n\nagecat6\n496.0\n2361.582661\n1545.469426\n8.0000\n1169.750000\n2102.000000\n3191.750000\n9792.000000\n\n\nagecat7\n496.0\n1052.681452\n722.955717\n6.0000\n519.750000\n918.500000\n1379.250000\n4163.000000\n\n\ninfluenza\n496.0\n16.070565\n12.252440\n0.0000\n8.000000\n13.500000\n21.000000\n85.000000\n\n\n\n\n\n\n\nEqually, common descriptive statistics are also available. To obtain minimum values for each column, you can use .min().\n\nchicago_1918.min()\n\ngross_acres       6.9000\nillit             0.0000\nunemployed_pct    0.0578\nho_pct            0.0000\nagecat1           0.0000\nagecat2           3.0000\nagecat3           1.0000\nagecat4           4.0000\nagecat5           0.0000\nagecat6           8.0000\nagecat7           6.0000\ninfluenza         0.0000\ndtype: float64\n\n\nOr to obtain a minimum for a single column only.\n\nchicago_1918[\"influenza\"].min()\n\n0\n\n\nNote here how you have restricted the calculation of the minimum value to one column only by getting the Series and calling .min() on that.\nSimilarly, you can restrict the calculations to a single row using .loc[] indexer:\n\nchicago_1918.loc[\"G17003100492\"].max()\n\n2176.6\n\n\n\n\nCreate new columns\nYou can generate new variables by applying operations to existing ones. For example, you can calculate the total population by area. Here are a couple of ways to do it:\n\n# This one is longer, hardcoded\n1total_population = (\n2    chicago_1918[\"agecat1\"]\n    + chicago_1918[\"agecat2\"]\n    + chicago_1918[\"agecat3\"]\n    + chicago_1918[\"agecat4\"]\n    + chicago_1918[\"agecat5\"]\n    + chicago_1918[\"agecat6\"]\n    + chicago_1918[\"agecat7\"]\n)\n3total_population.head()\n\n\n1\n\nCreate a new variable called total_population to store the result.\n\n2\n\nSelect all the columns and add them together\n\n3\n\nPrint the top of the variable\n\n\n\n\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n\n\n\n# This one is shorted, using a range of columns and sum\n1total_population = chicago_1918.loc[:, \"agecat1\":\"agecat7\"].sum(axis=1)\ntotal_population.head()\n\n\n1\n\nThis line is simple, but a lot happens here. Using .loc[], you select all the rows (: part) and all the columns between \"agecat1\" and \"agecat7\". Then you apply .sum() over axis=1, which means along rows, to get a sum per each row.\n\n\n\n\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n\n\nOnce you have created the variable, you can make it part of the table:\n\n1chicago_1918[\"total_population\"] = total_population\nchicago_1918.head()\n\n\n1\n\nAssing a variable total_population that contains a Series as a column \"total_population\". pandas creates that column automatically. If it existed, it would get overridden.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n\n\n\n\n\n\n\nYou can also do other mathematical operations on columns. These are always automatically applied to individual values in corresponding rows.\n\n1homeowners = chicago_1918[\"total_population\"] * chicago_1918[\"ho_pct\"]\nhomeowners.head()\n\n\n1\n\nA product of the total population and home ownership percentage provides an estimation of the number of homeowners per census tract.\n\n\n\n\ngeography_code\nG17003100001    351.875177\nG17003100002    233.928353\nG17003100003    209.628319\nG17003100004     78.879711\nG17003100005    468.237675\ndtype: float64\n\n\n\n1pop_density = chicago_1918[\"total_population\"] / chicago_1918[\"gross_acres\"]\npop_density.head()\n\n\n1\n\nA division of the total population by the area results in an estimation of the population density.\n\n\n\n\ngeography_code\nG17003100001     2.030687\nG17003100002    14.997703\nG17003100003     5.621729\nG17003100004    30.184120\nG17003100005    16.398695\ndtype: float64\n\n\nA different spin on this is assigning new values: you can generate new variables with scalars2, and modify those:\n\n1chicago_1918[\"ones\"] = 1\nchicago_1918.head()\n\n\n1\n\nCreate a new column named \"ones\" with all ones.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nones\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n1\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n1\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n1\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n1\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n1\n\n\n\n\n\n\n\nAnd you can modify specific values too:\n\nchicago_1918.loc[\"G17003100001\", \"ones\"] = 3\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nones\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n3\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n1\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n1\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n1\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n1\n\n\n\n\n\n\n\n\n\nRemove columns\nPermanently deleting variables is also within reach of one command:\n\nchicago_1918 = chicago_1918.drop(columns=\"ones\")\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n\n\n\n\n\n\n\n\n\nIndex-based queries\nHere, you explore how to subset parts of a DataFrame if you know exactly which bits you want. For example, if you want to extract the influenza mortality and total population of the first four areas in the table, you use loc with lists:\n\n1death_pop_first4 = chicago_1918.loc[\n2    [\"G17003100001\", \"G17003100002\", \"G17003100003\", \"G17003100004\"],\n3    [\"influenza\", \"total_population\"],\n]\ndeath_pop_first4\n\n\n1\n\nloc takes two inputs. Selection of rows and selection of columns. If the latter is not present, it is assumed that all the columns are selected. The same could be achieved by using :.\n\n2\n\nA list of index values. Note that you use squared brackets ([]) to delineate the index of the items you want to subset. In Python, this sequence of items is called a list.\n\n3\n\nA list of columns.\n\n\n\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100001\n9\n2819\n\n\nG17003100002\n6\n3265\n\n\nG17003100003\n8\n2256\n\n\nG17003100004\n2\n2623\n\n\n\n\n\n\n\nYou can see how you can create a list with the names (index IDs) along each of the two dimensions of a DataFrame (rows and columns), and loc will return a subset of the original table only with the elements queried for.\nAn alternative to list-based queries is what is called “range-based” queries. These work on the indices of the table, but instead of requiring the ID of each item you want to retrieve, they operate by requiring only two IDs: the first and last element in a range of items. Range queries are expressed with a colon (:). For example:\n\nrange_query = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\",\n    \"influenza\":'total_population',\n]\nrange_query\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100010\n18\n11380\n\n\nG17003100011\n16\n8382\n\n\nG17003100012\n8\n5874\n\n\n\n\n\n\n\nThe range query picks up all the elements between the specified IDs. Note that for this to work, the first ID in the range needs to be placed before the second one in the table’s index.\nOnce you know about list and range-based queries, you can combine them! For example, you can specify a range of rows and a list of columns:\n\nrange_list_qry = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\", [\"influenza\", \"total_population\"]\n]\n\nrange_list_qry\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100010\n18\n11380\n\n\nG17003100011\n16\n8382\n\n\nG17003100012\n8\n5874\n\n\n\n\n\n\n\n\n\nCondition-based queries\nHowever, sometimes, you do not know exactly which observations you want, but you do know what conditions they need to satisfy (e.g. areas with more than 2,000 inhabitants). For these cases, DataFrames support selection based on conditions. Let us see a few examples. Suppose you want to select…\n… areas with more than 60 cases of influenza deaths:\n\nflu_over_60 = chicago_1918.loc[chicago_1918[\"influenza\"] &gt; 60]\nflu_over_60\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\n\n\n\n\n\n… areas with less than 200 inhabitants:\n\npop_under = chicago_1918.loc[chicago_1918[\"total_population\"] &lt; 200]\npop_under\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100093\n71.2\n34\n0.268041\n0.025773\n4\n33\n20\n25\n10\n66\n36\n0\n194\n\n\nG17003100293\n40.0\n17\n0.345238\n0.053571\n4\n23\n18\n26\n16\n59\n22\n0\n168\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n\n\nG17003100353\n320.0\n28\n0.193750\n0.018750\n1\n7\n4\n10\n12\n80\n46\n2\n160\n\n\nG17003100488\n1600.1\n3\n0.404762\n0.000000\n2\n5\n4\n7\n1\n17\n6\n0\n42\n\n\n\n\n\n\n\n… areas with exactly a hundred illiterate persons:\n\nillit_100 = chicago_1918.loc[chicago_1918[\"illit\"] == 100]\nillit_100\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100076\n79.4\n100\n0.326936\n0.043691\n140\n791\n562\n666\n520\n3163\n1496\n20\n7338\n\n\nG17003100483\n670.0\n100\n0.379153\n0.142368\n188\n1170\n829\n1132\n763\n3191\n1482\n21\n8755\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnlimited power\n\n\n\nThese queries can grow in sophistication with almost no limits. For example, here is a case where you want to find out the areas where the oldest age group is more than half the population:\n\nchicago_1918.loc[\n    (chicago_1918[\"agecat7\"] * 100 / chicago_1918[\"total_population\"]) &gt; 50\n]\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100227\n146.3\n22\n0.0657\n0.000853\n2\n16\n9\n22\n27\n480\n614\n3\n1170\n\n\n\n\n\n\n\n\n\nAll the condition-based queries above are expressed using the loc operator. This is a powerful way, and since it shares syntax with index-based queries, it is also easier to remember. However, sometimes querying using loc involves a lot of quotation marks, parenthesis, etc. A more streamlined approach for condition-based queries of rows is provided by the query engine. Using this approach, you express everything in our query on a single string, or piece of text, and that is evaluated in the table at once. For example, you can run the same operation as in the first query above with the following syntax:\n\nflu_over_60_query = chicago_1918.query(\"influenza &gt; 60\")\nflu_over_60_query\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\n\n\n\n\n\nIf you want to combine operations, this is also possible:\n\nflu_query = chicago_1918.query(\"(influenza &gt; 60) & (total_population &lt; 10000)\")\nflu_query\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\n\n\n\n\n\nNote that, in these cases, using query results in code that is much more streamlined and easier to read. However, query is not perfect and, particularly for more sophisticated queries, it does not afford the same degree of flexibility. For example, the last query we had using loc would not be possible using query.\n\n\n\n\n\n\nTip\n\n\n\nIf you are interested, more detail about query is available in the pandas documentation.\n\n\n\n\nCombining queries\nNow, all of these queries can be combined with each other for further flexibility. For example, imagine you want areas with more than 60 cases of influenza from areas with less than 10,000 inhabitants:\n\nflu_loc = chicago_1918.loc[\n    (chicago_1918[\"influenza\"] &gt; 60)\n1    & (chicago_1918[\"total_population\"] &lt; 10000)\n]\nflu_loc\n\n\n1\n\nThe & operator combines both conditions together.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do the loc queries work?\n\n\n\n\n\nLet’s unpack how these queries work. Each part of the query above creates a single Series with boolean (True or False) values, encoding whether the row fulfils the condition or not.\n\nchicago_1918[\"influenza\"] &gt; 60\n\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494     True\nG17003100495    False\nG17003100496    False\nName: influenza, Length: 496, dtype: bool\n\n\n\nchicago_1918[\"total_population\"] &lt; 10000\n\ngeography_code\nG17003100001     True\nG17003100002     True\nG17003100003     True\nG17003100004     True\nG17003100005     True\n                ...  \nG17003100492     True\nG17003100493    False\nG17003100494    False\nG17003100495     True\nG17003100496     True\nName: total_population, Length: 496, dtype: bool\n\n\nYou then combine two of these Series with &, asking for a new Series where values in both the first and the second Series are True.\n\n(chicago_1918[\"influenza\"] &gt; 60) & (chicago_1918[\"total_population\"] &lt; 10000)\n\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494    False\nG17003100495    False\nG17003100496    False\nLength: 496, dtype: bool\n\n\nSuch a Series is then essentially used as a mask, and loc returns only those columns that contain True in that mask.\n\n\n\n\n\nSorting\nAmong the many operations DataFrame objects support, one of the most useful ones is to sort a table based on a given column. For example, imagine you want to sort the table by the influenza cases:\n\n1chicago_sorted = chicago_1918.sort_values('influenza', ascending=False)\nchicago_sorted\n\n\n1\n\nBy default, pandas is sorting from the smallest to the largest values (ascending). By specifying ascending=False, you switch the order.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n\n\nG17003100209\n124.1\n13\n0.438105\n0.062971\n30\n120\n92\n196\n166\n763\n491\n0\n1858\n\n\nG17003100293\n40.0\n17\n0.345238\n0.053571\n4\n23\n18\n26\n16\n59\n22\n0\n168\n\n\nG17003100202\n13.1\n6\n0.323326\n0.027714\n5\n40\n24\n37\n28\n218\n78\n0\n430\n\n\nG17003100396\n26.2\n8\n0.344066\n0.015639\n14\n54\n31\n53\n48\n609\n275\n0\n1084\n\n\n\n\n496 rows × 13 columns\n\n\n\nGiven the areas of each census tract differ, it may be better to sort by the mortality rate rather than raw counts.\n\n1chicago_1918[\"flu_rate\"] = (\n    chicago_1918[\"influenza\"] / chicago_1918[\"total_population\"]\n)\n2chicago_sorted_rel = chicago_1918.sort_values('flu_rate', ascending=False)\nchicago_sorted_rel\n\n\n1\n\nCompute the relative rate and assign it as a new column.\n\n2\n\nSort values by this new column.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nflu_rate\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100086\n140.7\n153\n0.331750\n0.034838\n39\n179\n144\n197\n111\n399\n189\n26\n1258\n0.020668\n\n\nG17003100022\n233.2\n20\n0.369973\n0.107239\n6\n28\n35\n48\n28\n151\n77\n7\n373\n0.018767\n\n\nG17003100261\n164.9\n287\n0.307767\n0.031068\n25\n126\n92\n113\n87\n414\n172\n18\n1029\n0.017493\n\n\nG17003100282\n293.5\n97\n0.142330\n0.044248\n15\n70\n67\n74\n198\n758\n173\n20\n1355\n0.014760\n\n\nG17003100249\n137.0\n317\n0.337257\n0.017202\n63\n314\n277\n345\n171\n718\n320\n31\n2208\n0.014040\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100202\n13.1\n6\n0.323326\n0.027714\n5\n40\n24\n37\n28\n218\n78\n0\n430\n0.000000\n\n\nG17003100093\n71.2\n34\n0.268041\n0.025773\n4\n33\n20\n25\n10\n66\n36\n0\n194\n0.000000\n\n\nG17003100293\n40.0\n17\n0.345238\n0.053571\n4\n23\n18\n26\n16\n59\n22\n0\n168\n0.000000\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n0.000000\n\n\nG17003100488\n1600.1\n3\n0.404762\n0.000000\n2\n5\n4\n7\n1\n17\n6\n0\n42\n0.000000\n\n\n\n\n496 rows × 14 columns\n\n\n\nIf you inspect the help of chicago_1918.sort_values, you will find that you can pass more than one column to sort the table by. This allows you to do so-called hierarchical sorting: sort first based on one column, if equal, then based on another column, etc.",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#visual-exploration",
    "href": "data_wrangling/hands_on.html#visual-exploration",
    "title": "Data wrangling",
    "section": "Visual Exploration",
    "text": "Visual Exploration\nThe next step to continue exploring a dataset is to get a feel for what it looks like, visually. You have already learnt how to unconver and inspect specific parts of the data, to check for particular cases you might be interested in. Now, you will see how to plot the data to get a sense of the overall distribution of values. For that, you can use the plotting capabilities of pandas.\n\nHistograms\nOne of the most common graphical devices to display the distribution of values in a variable is a histogram. Values are assigned into groups of equal intervals, and the groups are plotted as bars rising as high as the number of values into the group.\nA histogram is easily created with the following command. In this case, let us have a look at the shape of the overall influenza rates:\n\n_ = chicago_1918[\"influenza\"].plot.hist()\n\n\n\n\nHistogram of influenza cases\n\n\n\n\n\n\n\n\n\n\nAssigning to _\n\n\n\n\n\npandas returns an object with the drawing from its plotting methods. Since you are in Jupyter environment, and you don’t need to work further with that object; you can assign it to _, a convention for an unused variable.\n\n\n\nHowever, the default pandas plots can be a bit dull. A better option is to use another package, called seaborn.\n\nimport seaborn as sns\n\n\n\n\n\n\n\nWhy sns?\n\n\n\n\n\nseaborn is, by convention, imported as sns. That came as a joke after Samuel Normal Seaborn, a fictional character The West Wing show.\n\n\n\nThe same plot using seaborn has a more pleasant default style and more customisability.\n\nsns.displot(chicago_1918[\"influenza\"])\n\n\n\n\nHistogram of influenza cases using seaborn\n\n\n\n\nNote you are using sns instead of pd, as the function belongs to seaborn instead of pandas.\nYou can quickly see most of the areas have seen somewhere between 0 and 60 cases, approx. However, there are a few areas that have more, up to more than 80 cases.\n\n\nKernel Density Plots\nHistograms are useful, but they are artificial in the sense that a continuous variable is made discrete by turning the values into discrete groups. An alternative is kernel density estimation (KDE), which produces an empirical density function:\n\n1sns.displot(chicago_1918[\"influenza\"], kind=\"kde\", fill=True)\n\n\n1\n\nkind=\"kde\" specifies which type of a distribution plot should seaborn use and fill=True tells it to colour the area under the KDE curve.\n\n\n\n\n\n\n\nKernel density plot of influenza cases\n\n\n\n\n\n\nLine and bar plots\nAnother very common way of visually displaying a variable is with a line or a bar chart. For example, if you want to generate a line plot of the (sorted) total cases by area:\n\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).plot()\n\n\n\n\nTotal cases by area (sorted)\n\n\n\n\nFor a bar plot all you need to do is to change from plot to plot.bar. Since there are many census tracts, let us plot only the ten largest ones (which you can retrieve with head):\n\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).head(10).plot.bar()\n\n\n\n\nTotal cases by area as a bar plot\n\n\n\n\nYou can turn the plot around by displaying the bars horizontally (see how it’s just changing bar for barh). Let’s display now the top 50 areas and, to make it more readable, let us expand the plot’s height:\n\n_ = (\n    chicago_1918[\"total_population\"]\n    .sort_values()\n    .head(50)\n    .plot.barh(figsize=(6, 20))\n)\n\n\n\n\nTotal cases by area as a horizontal bar plot\n\n\n\n\n\n\n\n\n\n\nOne line or multiple lines?\n\n\n\nYou may have noticed that in some cases, the code is on a single line, but longer code is split into multiple lines. Python requires you to follow the indentation rules, but apart from that, there are not a lot of other limits.",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#tidy-data",
    "href": "data_wrangling/hands_on.html#tidy-data",
    "title": "Data wrangling",
    "section": "Tidy data",
    "text": "Tidy data\n\n\n\n\n\n\nCaution\n\n\n\nThis section is a bit more advanced and hence considered optional. Feel free to skip it, move to the next, and return later when you feel more confident.\n\n\nOnce you can read your data in, explore specific cases, and have a first visual approach to the entire set, the next step can be preparing it for more sophisticated analysis. Maybe you are thinking of modeling it through regression, or on creating subgroups in the dataset with particular characteristics, or maybe you simply need to present summary measures that relate to a slightly different arrangement of the data than you have been presented with.\nFor all these cases, you first need what statistician, and general R wizard, Hadley Wickham calls “tidy data”. The general idea to “tidy” your data is to convert them from whatever structure they were handed in to you into one that allows convenient and standardized manipulation, and that supports directly inputting the data into what he calls “tidy” analysis tools. But, at a more practical level, what is exactly “tidy data”? In Wickham’s own words:\n\nTidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.\n\nHe then goes on to list the three fundamental characteristics of “tidy data”:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\nIf you are further interested in the concept of “tidy data”, I recommend you check out the original paper (open access) and the public repository associated with it.\nLet us bring in the concept of “tidy data” to our own Chicago dataset. First, remember its structure:\n\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nflu_rate\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n0.003193\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n0.001838\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n0.003546\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n0.000762\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n0.001266\n\n\n\n\n\n\n\nThinking through tidy lenses, this is not a tidy dataset. It is not so for each of the three conditions:\n\nStarting by the last one (each type of observational unit forms a table), this dataset actually contains not one but many observational units: the different areas of Chicago, captured by geography_code; and different observatoins for each area. To tidy up this aspect, you can create separate tables. You will probably want population groups divided by age as one tidy table and flu rates as another. Start by extracting relevant columns.\n\n\n1influenza_rates = chicago_1918[[\"influenza\"]]\ninfluenza_rates.head()\n\n\n1\n\nYou are not selecting a single columns with chicago_1918[\"influenza\"] but a subset of columns. Just that the subset contains only one column, so you pass a list with a single column name as chicago_1918[[\"influenza\"]]. Notice the double brackets.\n\n\n\n\n\n\n\n\n\n\n\ninfluenza\n\n\ngeography_code\n\n\n\n\n\nG17003100001\n9\n\n\nG17003100002\n6\n\n\nG17003100003\n8\n\n\nG17003100004\n2\n\n\nG17003100005\n7\n\n\n\n\n\n\n\n\npopulation = chicago_1918.loc[:, \"agecat1\":\"agecat7\"]\npopulation.head()\n\n\n\n\n\n\n\n\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n46\n274\n257\n311\n222\n1122\n587\n\n\nG17003100002\n35\n320\n441\n624\n276\n1061\n508\n\n\nG17003100003\n50\n265\n179\n187\n163\n1020\n392\n\n\nG17003100004\n43\n241\n129\n141\n123\n1407\n539\n\n\nG17003100005\n65\n464\n369\n464\n328\n2625\n1213\n\n\n\n\n\n\n\nAt this point, the table influenza_rates is tidy: every row is an observation, every table is a variable, and there is only one observational unit in the table.\nThe other table (population), however, is not entirely tidied up yet: there is only one observational unit in the table, true; but every row is not an observation, and there are variable values as the names of columns (in other words, every column is not a variable). To obtain a fully tidy version of the table, you need to re-arrange it in a way that every row is an age category in an area, and there are three variables: geography_code, age category, and population count (or frequency).\nBecause this is actually a fairly common pattern, there is a direct way to solve it in pandas:\n\ntidy_population = population.stack()\ntidy_population.head()\n\ngeography_code         \nG17003100001    agecat1     46\n                agecat2    274\n                agecat3    257\n                agecat4    311\n                agecat5    222\ndtype: int64\n\n\nThe method stack, well, “stacks” the different columns into rows. This fixes our “tidiness” problems but the type of object that is returning is not a DataFrame:\n\ntype(tidy_population)\n\npandas.core.series.Series\n\n\nIt is a Series, which really is like a DataFrame, but with only one column. The additional information (geography_code and age category) are stored in what is called an multi-index. You will skip these for now, so you would really just want to get a DataFrame as you know it out of the Series. This is also one line of code away:\n\ntidy_population_df = tidy_population.reset_index()\ntidy_population_df.head()\n\n\n\n\n\n\n\n\ngeography_code\nlevel_1\n0\n\n\n\n\n0\nG17003100001\nagecat1\n46\n\n\n1\nG17003100001\nagecat2\n274\n\n\n2\nG17003100001\nagecat3\n257\n\n\n3\nG17003100001\nagecat4\n311\n\n\n4\nG17003100001\nagecat5\n222\n\n\n\n\n\n\n\nTo which you can apply to renaming to make it look better:\n\ntidy_population_df = tidy_population_df.rename(\n    columns={\"level_1\": \"age_category\", 0: \"count\"}\n)\ntidy_population_df.head()\n\n\n\n\n\n\n\n\ngeography_code\nage_category\ncount\n\n\n\n\n0\nG17003100001\nagecat1\n46\n\n\n1\nG17003100001\nagecat2\n274\n\n\n2\nG17003100001\nagecat3\n257\n\n\n3\nG17003100001\nagecat4\n311\n\n\n4\nG17003100001\nagecat5\n222\n\n\n\n\n\n\n\nNow our table is fully tidied up!",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#grouping-transforming-aggregating",
    "href": "data_wrangling/hands_on.html#grouping-transforming-aggregating",
    "title": "Data wrangling",
    "section": "Grouping, transforming, aggregating",
    "text": "Grouping, transforming, aggregating\nOne of the advantage of tidy datasets is they allow to perform advanced transformations in a more direct way. One of the most common ones is what is called “group-by” operations. Originated in the world of databases, these operations allow you to group observations in a table by one of its labels, index, or category, and apply operations on the data group by group.\nFor example, given our tidy table with age categories, you might want to compute the total sum of the population by each category. This task can be split into two different ones:\n\nGroup the table in each of the different subgroups.\nCompute the sum of count for each of them.\n\nTo do this in pandas, meet one of its workhorses, and also one of the reasons why the library has become so popular: the groupby operator.\n\npop_grouped = tidy_population_df.groupby(\"age_category\")\npop_grouped\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f80dafead90&gt;\n\n\nThe object pop_grouped still hasn’t computed anything. It is only a convenient way of specifying the grouping. But this allows us then to perform a multitude of operations on it. For our example, the sum is calculated as follows:\n\n1pop_grouped.sum(numeric_only=True)\n\n\n1\n\nYou want a sum of numeric values, not strings. Try it with numeric_only=False to see the difference.\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nage_category\n\n\n\n\n\nagecat1\n50776\n\n\nagecat2\n275363\n\n\nagecat3\n201654\n\n\nagecat4\n259954\n\n\nagecat5\n206358\n\n\nagecat6\n1171345\n\n\nagecat7\n522130\n\n\n\n\n\n\n\nSimilarly, you can also obtain a summary of each group:\n\npop_grouped.describe()\n\n\n\n\n\n\n\n\ncount\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nage_category\n\n\n\n\n\n\n\n\n\n\n\n\nagecat1\n496.0\n102.370968\n78.677423\n0.0\n46.75\n82.0\n136.00\n427.0\n\n\nagecat2\n496.0\n555.167339\n423.526444\n3.0\n256.50\n442.5\n717.50\n2512.0\n\n\nagecat3\n496.0\n406.560484\n301.564896\n1.0\n193.50\n331.5\n532.50\n1917.0\n\n\nagecat4\n496.0\n524.100806\n369.875444\n4.0\n253.75\n453.5\n709.50\n2665.0\n\n\nagecat5\n496.0\n416.044355\n281.825682\n0.0\n220.50\n377.0\n551.75\n2454.0\n\n\nagecat6\n496.0\n2361.582661\n1545.469426\n8.0\n1169.75\n2102.0\n3191.75\n9792.0\n\n\nagecat7\n496.0\n1052.681452\n722.955717\n6.0\n519.75\n918.5\n1379.25\n4163.0\n\n\n\n\n\n\n\nYou will not get into it today as it goes beyond the basics this session wants to cover, but keep in mind that groupby allows you to not only call generic functions (like sum or describe), but also your own functions. This opens the door for virtually any kind of transformation and aggregation possible.\n\n\n\n\n\n\nAdditional reading\n\n\n\n\nA good introduction to data manipulation in Python is Wes McKinney’s “Python for Data Analysis” (McKinney 2012).\nTo explore further some of the visualization capabilities in at your fingertips, the Python library seaborn is an excellent choice. Its online tutorial is a fantastic place to start.\nA good extension is Hadley Wickham’s “Tidy data” paper (Wickham 2014), which presents a very popular way of organising tabular data for efficient manipulation.",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#acknowledgements",
    "href": "data_wrangling/hands_on.html#acknowledgements",
    "title": "Data wrangling",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The text was slightly adapted, mostly to accommodate a different dataset used.",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data_wrangling/hands_on.html#footnotes",
    "href": "data_wrangling/hands_on.html#footnotes",
    "title": "Data wrangling",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nData munging and data wrangling are used interchangeably. Pick the one you like.↩︎\nScalar is a single value, like a number (42) or a string (\"towel\").↩︎",
    "crumbs": [
      "Open Data Science",
      "Data wrangling"
    ]
  },
  {
    "objectID": "data/geoboundaries_cgaz/preprocessing.html",
    "href": "data/geoboundaries_cgaz/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\nimport topojson as tp\n\n\nurl = \"https://github.com/wmgeolab/geoBoundaries/raw/main/releaseData/CGAZ/geoBoundariesCGAZ_ADM0.zip\"\n\ncgaz = gpd.read_file(url, engine=\"pyogrio\")\n\n\ntopo = tp.Topology(cgaz, prequantize=False)\nsimplified = topo.toposimplify(.05).to_gdf()\n\n\nsimplified.geometry = simplified.geometry.make_valid()\n\n\nsimplified.to_file(\"../../geographic_data/data/geoboundaries_cgaz.gpkg\")"
  },
  {
    "objectID": "data/chicago_influenza_1918/preprocessing.html",
    "href": "data/chicago_influenza_1918/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\n\n/var/folders/2f/fhks6w_d0k556plcv3rfmshw0000gn/T/ipykernel_94787/1259499560.py:2: DeprecationWarning: Shapely 2.0 is installed, but because PyGEOS is also installed, GeoPandas still uses PyGEOS by default. However, starting with version 0.14, the default will switch to Shapely. To force to use Shapely 2.0 now, you can either uninstall PyGEOS or set the environment variable USE_PYGEOS=0. You can do this before starting the Python process, or in your code before importing geopandas:\n\nimport os\nos.environ['USE_PYGEOS'] = '0'\nimport geopandas\n\nIn the next release, GeoPandas will switch to using Shapely by default, even if PyGEOS is installed. If you only have PyGEOS installed to get speed-ups, this switch should be smooth. However, if you are using PyGEOS directly (calling PyGEOS functions on geometries from GeoPandas), this will then stop working and you are encouraged to migrate from PyGEOS to Shapely 2.0 (https://shapely.readthedocs.io/en/latest/migration_pygeos.html).\n  import geopandas as gpd\n\n\n\nchicago_flu = pd.read_csv(\"tracts.csv\").drop(columns=[\"week\", \"pop\", \"illit.r\", \"den.r\"])\ndeaths_total = chicago_flu.groupby(\"gisjoin\").counts.sum()\nchicago_flu = chicago_flu[~chicago_flu.duplicated(\"gisjoin\")].set_index(\"gisjoin\").drop(columns=\"counts\")\nchicago_flu[\"influenza\"] = deaths_total\nchicago_flu = chicago_flu.rename(columns={c:c.replace(\".\", \"_\").lower() for c in chicago_flu.columns})\nchicago_flu.index.name = \"geography_code\"\nchicago_flu.index = \"G\" + chicago_flu.index.astype('str')\n\n\nchicago_flu.to_csv(\"../../data_wrangling/data/chicago_influenza_1918.csv\")\n\n\nchicago_flu\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n496 rows × 12 columns\n\n\n\n\ngdf = gpd.read_file(\"shapefile.zip\")\n\n\ngdf[\"GISJOIN\"] = \"G\" + gdf[\"GISJOIN\"].astype('str')\n\n\ngdf = gdf[[\"GISJOIN\", \"geometry\"]].merge(chicago_flu, left_on=\"GISJOIN\", right_index=True)\n\n\ngdf.rename(columns={\"GISJOIN\": \"geography_code\"}).to_file(\"../../clustering/data/chicago_influenza_1918.geojson\")"
  },
  {
    "objectID": "data/cz_education_2021/preprocessing.html",
    "href": "data/cz_education_2021/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import tempfile\n\nimport pandas as pd\nimport geopandas as gpd\nimport pyogrio\nimport httpx\n\n\nwith tempfile.TemporaryDirectory() as tmpdirname:\n    with open(tmpdirname + \"/data.csv\", \"wb\") as f:\n        r = httpx.get(\"https://www.czso.cz/documents/62353418/205988586/sldb2021_vzdelani_vek2_pohlavi.csv/5d7a6d5c-a7b1-468f-aa48-80560fbce267?version=1.1\")\n        f.write(r.content)\n    edu_age_sex = pd.read_csv(tmpdirname + \"/data.csv\")\n\n\nedu_age_sex[\"pohlavi_txt\"] = edu_age_sex[\"pohlavi_txt\"].fillna(\"both\")\n\n\nobce = edu_age_sex[edu_age_sex.uzemi_typ == \"obec\"]\n\n\nvals = obce.set_index([\"uzemi_kod\", \"vzdelani_txt\", \"vek_txt\", \"pohlavi_txt\"])[\"hodnota\"]\nvals\n\nuzemi_kod  vzdelani_txt  vek_txt        pohlavi_txt\n500011     Bez vzdělání  15 - 64 let    both            6\n                                        muž             4\n                                        žena            2\n                         65 a více let  both            3\n                                        muž             2\n                                                       ..\n599999     Nezjištěno    15 - 64 let    muž            38\n                                        žena           13\n                         65 a více let  both           21\n                                        muž            10\n                                        žena           11\nName: hodnota, Length: 525336, dtype: int64\n\n\n\ntotal_population = vals[:, :, :, \"both\"].groupby(level=0).sum()\nby_edu = vals[:, :, :, \"both\"].groupby(level=[0, 1]).sum().unstack()\n\n\nproportions = by_edu.div(total_population, axis=0) * 100\n\n\nuzsz_url = \"https://vdp.cuzk.cz/vymenny_format/soucasna/20230930_ST_UZSZ.xml.zip\"\n\n\npyogrio.list_layers(uzsz_url)\n\narray([['Staty', 'Point'],\n       ['RegionySoudrznosti', 'Point'],\n       ['Kraje', 'Point'],\n       ['Vusc', 'Point'],\n       ['Okresy', 'Point'],\n       ['Orp', 'MultiPoint'],\n       ['Pou', 'MultiPoint'],\n       ['Obce', 'MultiPoint'],\n       ['SpravniObvody', 'Point'],\n       ['Mop', 'Point'],\n       ['Momc', 'Point'],\n       ['CastiObci', 'Point'],\n       ['KatastralniUzemi', 'MultiPoint'],\n       ['Zsj', 'MultiPoint']], dtype=object)\n\n\n\nobce = gpd.read_file(uzsz_url, layer=\"Obce\")\n\n\nobec_to_okres = obce.set_index(\"Kod\")[\"OkresKod\"].rename_axis(index=\"uzemi_kod\")\nobec_to_okres\n\nuzemi_kod\n569151    3601.0\n569291    3601.0\n569330    3811.0\n569402    3601.0\n569615    3601.0\n           ...  \n551503    3301.0\n530166    3201.0\n548235    3304.0\n550159    3306.0\n530611    3201.0\nName: OkresKod, Length: 6258, dtype: float64\n\n\n\nokresy = gpd.read_file(uzsz_url, layer=\"Okresy\")\n\n\nobec_to_okres = obec_to_okres.map(dict(zip(okresy.Kod, okresy.Nazev))).fillna(\"Praha\")\nobec_to_okres\n\nuzemi_kod\n569151      Havlíčkův Brod\n569291      Havlíčkův Brod\n569330             Jeseník\n569402      Havlíčkův Brod\n569615      Havlíčkův Brod\n                ...       \n551503    České Budějovice\n530166             Benešov\n548235           Pelhřimov\n550159          Prachatice\n530611             Benešov\nName: OkresKod, Length: 6258, dtype: object\n\n\n\nproportions_w_okres = proportions.assign(okres=obec_to_okres)\n\n\nproportions_w_okres.columns\n\nIndex(['Bez vzdělání', 'Nezjištěno', 'Neúplné základní vzdělání',\n       'Nižší střední a střední vzdělání', 'Nástavbové vzdělání',\n       'Pomaturitní studium', 'Vysokoškolské bakalářské vzdělání',\n       'Vysokoškolské doktorské vzdělání',\n       'Vysokoškolské magisterské vzdělání', 'Vyšší odborné vzdělání',\n       'Vyšší odborné vzdělání v konzervatoři', 'Základní vzdělání',\n       'Úplné střední odborné vzdělání', 'Úplné střední všeobecné vzdělání',\n       'okres'],\n      dtype='object', name='vzdelani_txt')\n\n\n\nproportions_w_okres.columns = [\n    'Without education',\n    'Undetermined',\n    'Incomplete primary education',\n    'Lower secondary and secondary education',\n    'Further education',\n    'Post_maturita studies',\n    'Bachelors degree',\n    'Doctoral degree',\n    'Masters degree',\n    'Higher vocational education',\n    'Higher vocational education in a conservatory',\n    'Primary education',\n    'Complete secondary vocational education',\n    'Complete secondary general education',\n    'Okres',\n]\nproportions_w_okres.columns = proportions_w_okres.columns.str.lower().str.replace(\" \", \"_\")\n\n\nproportions_w_okres\n\n\n\n\n\n\n\n\nwithout_education\nundetermined\nincomplete_primary_education\nlower_secondary_and_secondary_education\nfurther_education\npost_maturita_studies\nbachelors_degree\ndoctoral_degree\nmasters_degree\nhigher_vocational_education\nhigher_vocational_education_in_a_conservatory\nprimary_education\ncomplete_secondary_vocational_education\ncomplete_secondary_general_education\nokres\n\n\nuzemi_kod\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n500011\n0.570704\n3.741281\n1.141408\n34.242232\n1.775523\n0.507292\n2.853519\n0.634115\n12.935954\n1.395054\n0.126823\n11.350666\n17.945466\n10.779962\nZlín\n\n\n500020\n0.885827\n3.346457\n1.968504\n40.157480\n2.066929\n0.885827\n1.771654\n0.492126\n6.299213\n1.574803\n0.000000\n15.059055\n16.338583\n9.153543\nŠumperk\n\n\n500046\n0.359195\n3.232759\n0.790230\n39.152299\n2.514368\n0.790230\n3.520115\n0.215517\n10.632184\n1.364943\n0.143678\n9.770115\n15.301724\n12.212644\nNový Jičín\n\n\n500062\n0.238237\n3.573556\n1.072067\n32.757594\n2.084574\n1.131626\n3.037522\n0.178678\n13.281715\n0.714711\n0.119119\n11.316260\n18.701608\n11.792734\nVsetín\n\n\n500071\n0.412939\n2.890571\n1.238816\n34.067447\n1.720578\n0.757054\n3.028217\n0.137646\n11.080523\n0.894701\n0.000000\n9.772884\n20.027529\n13.971094\nVsetín\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n599930\n0.717703\n5.645933\n1.339713\n38.133971\n1.818182\n0.622010\n3.157895\n0.191388\n8.086124\n1.148325\n0.095694\n11.531100\n16.555024\n10.956938\nNový Jičín\n\n\n599948\n0.714031\n4.534095\n1.677972\n35.201714\n1.856480\n0.892538\n3.498750\n0.392717\n11.602999\n1.392360\n0.071403\n10.888968\n16.137094\n11.138879\nNový Jičín\n\n\n599956\n0.272480\n3.337875\n1.294278\n35.217984\n2.520436\n0.681199\n3.269755\n0.272480\n10.967302\n1.430518\n0.204360\n10.354223\n18.528610\n11.648501\nNový Jičín\n\n\n599964\n0.253807\n1.903553\n0.888325\n32.994924\n2.030457\n0.507614\n3.045685\n1.015228\n14.467005\n2.538071\n0.126904\n11.675127\n17.131980\n11.421320\nNový Jičín\n\n\n599999\n0.437318\n3.498542\n1.117590\n32.361516\n2.089407\n1.068999\n3.449951\n0.631681\n15.014577\n1.506317\n0.242954\n9.912536\n16.909621\n11.758989\nNový Jičín\n\n\n\n\n6254 rows × 15 columns\n\n\n\n\nproportions_w_okres.to_csv(\"../../regression/data/education.csv\")"
  },
  {
    "objectID": "data/cz_elections_2023/preprocessing.html",
    "href": "data/cz_elections_2023/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nimport pyogrio\nimport topojson as tp\n\nexport.csv comes from https://www.volby.cz/pls/prez2023nss/pe71?xjazyk=CZ#/0-01-2023-0.\n\nresults = pd.read_csv(\"export.csv\", sep=\";\", skiprows=[1, 2])\n\nDownload the 1.zip file from https://services.cuzk.cz/gml/inspire/au/epsg-5514/\n\nadmin_units = gpd.read_file(\"1.zip\", layer=\"AdministrativeUnit\")\n\n\nobce = admin_units.query(\"LocalisedCharacterString == 'Obec'\")\n\n\nr_with_code = results.merge(obce[[\"nationalCode\", \"text\"]], how=\"left\", left_on=\"Obec / Kandidát (2023-2)\", right_on=\"text\")\n\n\nextracted_code = r_with_code[\"Obec / Kandidát (2023-2)\"].str.extract(r',\\s*(\\d+)\\)$')\n\n\nr_with_code.loc[extracted_code[0].notna(), \"nationalCode\"] = extracted_code[0][extracted_code[0].notna()]\n\n\nr_with_code[\"nationalCode\"] = r_with_code[\"nationalCode\"].astype(obce.nationalCode.dtype)\n\n\nobce\n\n\n\n\n\n\n\n\ngml_id\nnationalCode\nlocalId\nnamespace\nLocalisedCharacterString\nlanguage\nsourceOfName\npronunciation\ntext\nscript\nresidenceOfAuthority\nbeginLifespanVersion\nendLifespanVersion\nidentifier\nidentifierScheme\ngeometry\n\n\n\n\n92\nAU.4.500852\n500852\nAU.4.500852\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nBohuňovice\nLatn\nNone\n2023-07-21T13:07:12Z\nNone\nCZ0712500852\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-546147.820 -1116859.910, -546...\n\n\n93\nAU.4.500861\n500861\nAU.4.500861\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nBouzov\nLatn\nNone\n2021-10-27T03:07:12Z\nNone\nCZ0712500861\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-575404.020 -1106019.400, -575...\n\n\n94\nAU.4.505081\n505081\nAU.4.505081\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nSenice na Hané\nLatn\nNone\n2021-12-03T11:07:12Z\nNone\nCZ0712505081\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-562638.830 -1116199.450, -562...\n\n\n95\nAU.4.500879\n500879\nAU.4.500879\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nBystročice\nLatn\nNone\n2023-06-01T17:07:12Z\nNone\nCZ0712500879\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-553889.210 -1125733.180, -553...\n\n\n96\nAU.4.501476\n501476\nAU.4.501476\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nDlouhá Loučka\nLatn\nNone\n2021-11-25T21:07:12Z\nNone\nCZ0712501476\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-546875.690 -1094194.530, -546...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6345\nAU.4.579530\n579530\nAU.4.579530\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nMaršov u Úpice\nLatn\nNone\n2022-04-29T17:07:12Z\nNone\nCZ0525579530\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-628631.120 -1013025.530, -628...\n\n\n6346\nAU.4.540692\n540692\nAU.4.540692\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nSedliště\nLatn\nNone\n2023-04-12T15:07:12Z\nNone\nCZ0324540692\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-809815.050 -1094938.250, -809...\n\n\n6347\nAU.4.573621\n573621\nAU.4.573621\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nHvozdnice\nLatn\nNone\n2023-05-30T11:07:12Z\nNone\nCZ0521573621\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-649691.240 -1042358.600, -649...\n\n\n6348\nAU.4.551465\n551465\nAU.4.551465\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nKošice\nLatn\nNone\n2023-04-03T11:07:12Z\nNone\nCZ0205551465\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-694427.300 -1071598.720, -694...\n\n\n6349\nAU.4.530611\n530611\nAU.4.530611\nCZ_00025712-CUZK_AU\nObec\nces\nČeský úřad zeměměřický a katastrální\nNone\nSmilkov\nLatn\nNone\n2023-05-23T13:07:12Z\nNone\nCZ0201530611\nhttp://www.cuzk.cz/RUIAN/SHNCode\nMULTIPOLYGON (((-734918.290 -1096640.520, -734...\n\n\n\n\n6258 rows × 16 columns\n\n\n\n\ndata = r_with_code.drop(columns=\"text\").merge(obce[[\"nationalCode\", \"sourceOfName\", \"geometry\"]], on='nationalCode').set_geometry(\"geometry\")\n\n\ntopo = tp.Topology(data, prequantize=False)\n\n/Users/martin/mambaforge/envs/sds/lib/python3.11/site-packages/topojson/core/dedup.py:107: RuntimeWarning: invalid value encountered in cast\n  data[\"bookkeeping_shared_arcs\"] = array_bk_sarcs.astype(np.int64).tolist()\n\n\n\nsimplified = topo.toposimplify(50).to_gdf()\nsimplified.geometry = simplified.geometry.make_valid()\n\n/Users/martin/mambaforge/envs/sds/lib/python3.11/site-packages/shapely/constructive.py:881: RuntimeWarning: invalid value encountered in simplify_preserve_topology\n  return lib.simplify_preserve_topology(geometry, tolerance, **kwargs)\n/Users/martin/mambaforge/envs/sds/lib/python3.11/site-packages/shapely/constructive.py:542: RuntimeWarning: invalid value encountered in make_valid\n  return lib.make_valid(geometry, **kwargs)\n\n\n\nsimplified = simplified.rename(columns={\"Obec / Kandidát (2023-2)\": \"name\"})\n\n\nsimplified[\"PetrPavel\"] = simplified[\"Petr Pavel\"].str.replace(\",\", \".\").astype(float)\nsimplified[\"AndrejBabis\"] = simplified[\"Andrej Babiš\"].str.replace(\",\", \".\").astype(float)\n\n\nsimplified.drop(columns=[\"Petr Pavel\", \"Andrej Babiš\"]).to_file(\"../../autocorrelation/data/cz_elections_2023.gpkg\")"
  },
  {
    "objectID": "data/prague_morphology/preprocessing.html",
    "href": "data/prague_morphology/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\nimport pandas as pd\nimport httpx\n\nhttps://figshare.com/articles/dataset/Data_for_Methodological_Foundation_of_a_Numerical_Taxonomy_of_Urban_Form_research_paper/16897102\n\nurl = \"https://figshare.com/ndownloader/files/31252828\"\n\n\nr = httpx.get(url)\n\n\nwith open(\"geoms.gpkg.zip\", \"wb\") as f:\n    f.write(r.content)\n\nUnzip\n\nbuildings = gpd.read_file(\"prg_geometry.gpkg\", engine='pyogrio', layer=\"buildings\")\n\n\nbuildings = buildings.set_geometry(buildings.centroid)\n\n\nclusters = pd.read_csv(\"https://figshare.com/ndownloader/files/31250203\", index_col=0)\n\n\nbuildings = buildings.merge(clusters, on=\"uID\")\n\n\nbuildings.cluster.nunique()\n\n10\n\n\n\nmapping = {\n    0: \"large-scale industry\",\n    1: \"single family housing\",\n    2: \"fringe development\",\n    3: \"grids\",\n    4: \"housing estates\",\n    5: \"periphery\",\n    6: \"grids\",\n    7: \"medieval city\",\n    8: \"single family housing\",\n    9: \"small-scale row houses\",\n}\n\n\nbuildings[\"cluster\"] = buildings[\"cluster\"].map(mapping)\n\n\nprague = gpd.read_file(\n    \"https://martinfleischmann.net/sds/spatial_graphs/data/zsj_prague_2021.gpkg\"\n)\n\n\nbuildings = buildings.sjoin(prague.to_crs(buildings.crs).drop(columns=\"n_people\"), how='left')\n\n\nr = httpx.get(\"https://figshare.com/ndownloader/files/31250227\")\nwith open(\"prg_primary.csv.gz\", \"wb\") as f:\n    f.write(r.content)\n\n\ndata = pd.read_csv(\"prg_primary.csv.gz\", index_col=0)\n\n\ndata = buildings.merge(data, on=\"uID\")\n\n\ndata\n\n\n\n\n\n\n\n\nuID\ngeometry\ncluster\nindex_right\nNAZ_ZSJ\nNAZ_KU\nbID\nstcOri\nsdcLAL\nsdcAre\n...\nldsMSL\nldsRea\nldkAre\nldkPer\nlskCCo\nlskERI\nlskCWA\nltkOri\nltkWNB\nlikWBB\n\n\n\n\n0\n0\nPOINT (-749841.681 -1052279.951)\nlarge-scale industry\n760.0\nU cementárny\nRadotín\n0\n7.603973\n33.817996\n342.233358\n...\n500.099794\n1.006508e+06\n397667.372035\n3615.243681\n0.404219\n0.724434\n880.163669\n28.214414\n0.000553\n0.000108\n\n\n1\n1\nPOINT (-744432.289 -1042699.409)\nmedieval city\n34.0\nHorní malostranský obvod\nMalá Strana\n1\n3.712491\n58.703914\n1435.882458\n...\n129.395330\n3.504396e+05\n262570.110986\n2902.374890\n0.392367\n0.742951\n714.928910\n8.174868\n0.003790\n0.000369\n\n\n2\n2\nPOINT (-733300.261 -1048136.856)\nperiphery\n553.0\nDolní Měcholupy-střed\nDolní Měcholupy\n4\n12.121107\n34.814040\n433.237769\n...\n245.801133\n4.159394e+05\n56345.646398\n1310.808733\n0.264617\n0.799244\n389.760230\n28.532001\n0.004577\n0.000461\n\n\n3\n3\nPOINT (-742468.177 -1039691.997)\nperiphery\n334.0\nTrojský obvod\nTroja\n5\n7.700002\n45.376335\n839.521945\n...\n334.823124\n1.586278e+06\n93980.927007\n1236.106936\n0.694690\n0.994124\n119.993680\n6.159727\n0.004045\n0.000638\n\n\n4\n4\nPOINT (-740093.985 -1043857.813)\ngrids\n62.0\nVrch Svatého kříže\nŽižkov\n6\n29.080840\n135.981870\n7058.965193\n...\n133.672812\n3.444156e+05\n7058.965193\n328.785377\n0.486059\n1.039719\n31.062697\n29.080840\n0.006083\n0.000142\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n140310\n140457\nPOINT (-742330.100 -1043654.354)\nmedieval city\n30.0\nJindřišský obvod\nNové Město\n5488\n28.178572\n98.965803\n3505.778714\n...\n117.971921\n3.082993e+05\n56606.217751\n951.571799\n0.596143\n1.009986\n94.926096\n35.086045\n0.008407\n0.000654\n\n\n140311\n140458\nPOINT (-745114.729 -1036851.623)\nperiphery\n313.0\nSuchdol-střed\nSuchdol\n1139\n24.776814\n92.897524\n5114.085960\n...\n129.984846\n4.016710e+05\n40933.111154\n1380.026247\n0.224597\n0.664578\n447.681498\n10.487112\n0.005797\n0.000220\n\n\n140312\n140459\nPOINT (-741484.617 -1045909.408)\ngrids\n143.0\nNuselský obvod\nNusle\n4960\n15.112430\n34.559509\n520.511963\n...\n93.310638\n1.411415e+05\n9762.288285\n426.012538\n0.550692\n0.956055\n61.986071\n4.259050\n0.011737\n0.002663\n\n\n140313\n140460\nPOINT (-741509.029 -1045897.128)\ngrids\n143.0\nNuselský obvod\nNusle\n4960\n20.447865\n19.148696\n193.498945\n...\n93.310638\n1.411415e+05\n9762.288285\n426.012538\n0.550692\n0.956055\n61.986071\n4.259050\n0.011737\n0.002663\n\n\n140314\n140461\nPOINT (-752191.036 -1045077.650)\nfringe development\n890.0\nNa Radosti-západ\nTřebonice\n995\n26.473486\n529.188185\n132182.587224\n...\n163.473174\n4.540435e+05\n908485.880353\n6184.489156\n0.372760\n0.659936\n1573.430287\n5.804051\n0.002749\n0.000179\n\n\n\n\n140315 rows × 88 columns\n\n\n\n\ndata[[\"geometry\", \"cluster\", \"sicFAR\", \"sdbHei\", \"ssbCCo\", \"stbSAl\", \"ltbIBD\", \"ldbPWL\", \"NAZ_ZSJ\", \"NAZ_KU\"]].rename(columns={\n    \"sicFAR\": \"floor_area_ratio\",\n    \"sdbHei\": \"height\",\n    \"ssbCCo\": \"compactness\",\n    \"stbSAl\": \"street_alignment\",\n    \"ltbIBD\": \"interbuilding_distance\",\n    \"ldbPWL\": \"block_perimeter_wall_length\",\n    \"NAZ_ZSJ\": \"basic_settlement_unit\",\n    \"NAZ_KU\": \"cadastral zone\"\n}).dropna(subset=\"basic_settlement_unit\").to_file(\"../../classification/data/prg_building_locations.gpkg\", engine=\"pyogrio\")\n\n\ndata\n\n\n\n\n\n\n\n\nuID\ngeometry\ncluster\nindex_right\nNAZ_ZSJ\nNAZ_KU\nbID\nstcOri\nsdcLAL\nsdcAre\n...\nldsMSL\nldsRea\nldkAre\nldkPer\nlskCCo\nlskERI\nlskCWA\nltkOri\nltkWNB\nlikWBB\n\n\n\n\n0\n0\nPOINT (-749841.681 -1052279.951)\nlarge-scale industry\n760.0\nU cementárny\nRadotín\n0\n7.603973\n33.817996\n342.233358\n...\n500.099794\n1.006508e+06\n397667.372035\n3615.243681\n0.404219\n0.724434\n880.163669\n28.214414\n0.000553\n0.000108\n\n\n1\n1\nPOINT (-744432.289 -1042699.409)\nmedieval city\n34.0\nHorní malostranský obvod\nMalá Strana\n1\n3.712491\n58.703914\n1435.882458\n...\n129.395330\n3.504396e+05\n262570.110986\n2902.374890\n0.392367\n0.742951\n714.928910\n8.174868\n0.003790\n0.000369\n\n\n2\n2\nPOINT (-733300.261 -1048136.856)\nperiphery\n553.0\nDolní Měcholupy-střed\nDolní Měcholupy\n4\n12.121107\n34.814040\n433.237769\n...\n245.801133\n4.159394e+05\n56345.646398\n1310.808733\n0.264617\n0.799244\n389.760230\n28.532001\n0.004577\n0.000461\n\n\n3\n3\nPOINT (-742468.177 -1039691.997)\nperiphery\n334.0\nTrojský obvod\nTroja\n5\n7.700002\n45.376335\n839.521945\n...\n334.823124\n1.586278e+06\n93980.927007\n1236.106936\n0.694690\n0.994124\n119.993680\n6.159727\n0.004045\n0.000638\n\n\n4\n4\nPOINT (-740093.985 -1043857.813)\ngrids\n62.0\nVrch Svatého kříže\nŽižkov\n6\n29.080840\n135.981870\n7058.965193\n...\n133.672812\n3.444156e+05\n7058.965193\n328.785377\n0.486059\n1.039719\n31.062697\n29.080840\n0.006083\n0.000142\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n140310\n140457\nPOINT (-742330.100 -1043654.354)\nmedieval city\n30.0\nJindřišský obvod\nNové Město\n5488\n28.178572\n98.965803\n3505.778714\n...\n117.971921\n3.082993e+05\n56606.217751\n951.571799\n0.596143\n1.009986\n94.926096\n35.086045\n0.008407\n0.000654\n\n\n140311\n140458\nPOINT (-745114.729 -1036851.623)\nperiphery\n313.0\nSuchdol-střed\nSuchdol\n1139\n24.776814\n92.897524\n5114.085960\n...\n129.984846\n4.016710e+05\n40933.111154\n1380.026247\n0.224597\n0.664578\n447.681498\n10.487112\n0.005797\n0.000220\n\n\n140312\n140459\nPOINT (-741484.617 -1045909.408)\ngrids\n143.0\nNuselský obvod\nNusle\n4960\n15.112430\n34.559509\n520.511963\n...\n93.310638\n1.411415e+05\n9762.288285\n426.012538\n0.550692\n0.956055\n61.986071\n4.259050\n0.011737\n0.002663\n\n\n140313\n140460\nPOINT (-741509.029 -1045897.128)\ngrids\n143.0\nNuselský obvod\nNusle\n4960\n20.447865\n19.148696\n193.498945\n...\n93.310638\n1.411415e+05\n9762.288285\n426.012538\n0.550692\n0.956055\n61.986071\n4.259050\n0.011737\n0.002663\n\n\n140314\n140461\nPOINT (-752191.036 -1045077.650)\nfringe development\n890.0\nNa Radosti-západ\nTřebonice\n995\n26.473486\n529.188185\n132182.587224\n...\n163.473174\n4.540435e+05\n908485.880353\n6184.489156\n0.372760\n0.659936\n1573.430287\n5.804051\n0.002749\n0.000179\n\n\n\n\n140315 rows × 88 columns"
  },
  {
    "objectID": "data/glasgow_simd_2020/preprocessing.html",
    "href": "data/glasgow_simd_2020/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import httpx\nimport geopandas as gpd\n\n\nurl = \"https://maps.gov.scot/ATOM/shapefiles/SG_SIMD_2020.zip\"\n\n\nr = httpx.get(url, verify=False)\n\n/Users/martin/mambaforge/envs/sds/lib/python3.11/site-packages/urllib3/connectionpool.py:1095: InsecureRequestWarning: Unverified HTTPS request is being made to host 'maps.gov.scot'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings\n  warnings.warn(\n\n\n\nsimd = gpd.read_file(r.content, engine=\"pyogrio\")\n\n\nglasgow = simd.query(\"LAName == 'Glasgow City'\")\n\n\nglasgow.to_file(\"../../clustering/data/glasgow_simd_2020.gpkg\")"
  },
  {
    "objectID": "spatial_graphs/concepts.html",
    "href": "spatial_graphs/concepts.html",
    "title": "Space as math",
    "section": "",
    "text": "Slides from the talk about the concept of spatial graphs or spatial weights as a formal mathematical representation of space.\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Weights from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis.",
    "crumbs": [
      "Spatial weights",
      "Space as math"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html",
    "href": "spatial_graphs/hands_on.html",
    "title": "Spatial weights in PySAL",
    "section": "",
    "text": "In this session, you will be learning the ins and outs of one of the key pieces in spatial analysis: spatial weights matrices. These are structured sets of numbers that formalise geographical relationships between the observations in a dataset. Essentially, a spatial weights matrix of a given geography is a positive definite matrix of dimensions \\(N\\) by \\(N\\), where \\(N\\) is the total number of observations:\n\\[\nW = \\left(\\begin{array}{cccc}\n0 & w_{12} & \\dots & w_{1N} \\\\\nw_{21} & \\ddots & w_{ij} & \\vdots \\\\\n\\vdots & w_{ji} & 0 & \\vdots \\\\\nw_{N1} & \\dots & \\dots & 0\n\\end{array} \\right)\n\\]\nwhere each cell \\(w_{ij}\\) contains a value that represents the degree of spatial contact or interaction between observations \\(i\\) and \\(j\\). A fundamental concept in this context is that of neighbour and neighbourhood. By convention, elements in the diagonal (\\(w_{ii}\\)) are set to zero. A neighbour of a given observation \\(i\\) is another observation with which \\(i\\) has some degree of connection. In terms of \\(W\\), \\(i\\) and \\(j\\) are thus neighbors if \\(w_{ij} &gt; 0\\). Following this logic, the neighbourhood of \\(i\\) will be the set of observations in the system with which it has a certain connection or those observations with a weight greater than zero.\nThere are several ways to create such matrices and many more to transform them so they contain an accurate representation that aligns with the way you understand spatial interactions between the elements of a system. This session will introduce the most commonly used ones and show how to compute them with PySAL.\n1import matplotlib.pyplot as plt\nimport contextily\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom libpysal import graph\n\n\n1\n\nA common standard is to do all the imports on top of your notebook.",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#data",
    "href": "spatial_graphs/hands_on.html#data",
    "title": "Spatial weights in PySAL",
    "section": "Data",
    "text": "Data\nFor this tutorial, you will use a dataset of Basic Settlement Units (ZSJ) in Prague for 2021. The table is available as part of this course, so it can be accessed remotely through the web. If you want to see how the table was created, a notebook is available here.\nTo make things easier, you will read data from a file posted online so, for now, you do not need to download any dataset:\n\nprague = gpd.read_file(\n    \"https://martinfleischmann.net/sds/spatial_graphs/data/zsj_prague_2021.gpkg\"\n)\n1prague = prague.set_index(\"NAZ_ZSJ\")\nprague.explore()\n\n\n1\n\nUse the name of each observation as an index. It will help you link them to the weights matrix.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nprague = gpd.read_file(\n    \"zsj_prague_2021.gpkg\",\n)",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#building-spatial-weights-in-pysal",
    "href": "spatial_graphs/hands_on.html#building-spatial-weights-in-pysal",
    "title": "Spatial weights in PySAL",
    "section": "Building spatial weights in PySAL",
    "text": "Building spatial weights in PySAL\n\nContiguity\nContiguity weights matrices define spatial connections through the existence of shared boundaries. This makes it directly suitable to use with polygons: if two polygons share boundaries to some degree, they will be labelled as neighbours under these kinds of weights. Exactly how much they need to share is what differentiates the two approaches we will learn: queen and rook.\n\nQueen\nUnder the queen criteria, two observations only need to share a vertex (a single point) of their boundaries to be considered neighbours. Constructing a weights matrix under these principles can be done by running:\n\n1queen = graph.Graph.build_contiguity(prague, rook=False)\nqueen\n\n\n1\n\nThe main class that represents a weights matrix is Graph. rook=False specifies to use queen contiguity, while rook=True would create rook contiguity.\n\n\n\n\n&lt;Graph of 953 nodes and 5670 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nThe command above creates an object queen of the class Graph. This is the format in which spatial weights matrices are stored in PySAL. By default, the weights builder (Graph.build_contiguity() will use the index of the table, which is useful so you can keep everything in line easily.\n\n\n\n\n\n\nNew Graph and old W\n\n\n\nThe graph module of libpysal is an implementation of spatial weights matrices released in September 2023. In the older resources, you will find the weights module and the W class instead. Graph will eventually replace W. Their API is similar, but there are some differences. Pay attention to the documentation when porting code from weights-based resources to graph-based implementation. Or use Graph.to_W() and Graph.from_W() to convert one to the other.\n\n\nA Graph object can be queried to find out about the contiguity relations it contains. For example, if you would like to know who is a neighbour of observation Albertov:\n\nqueen['Albertov']\n\nneighbor\nVodičkova                 1\nVojtěšský obvod           1\nŠtěpánský obvod-západ     1\nNuselské údolí            1\nVyšehrad                  1\nPodskalí                  1\nZderaz                    1\nŠtěpánský obvod-východ    1\nFolimanka-západ           1\nName: weight, dtype: int64\n\n\nThis returns a pandas.Series containing each neighbour’s ID codes as an index, with the weights assigned as values. Since you are looking at a raw queen contiguity matrix, every neighbour gets a weight of one. If you want to access the weight of a specific neighbour, Zderaz for example, you can do recursive querying:\n\nqueen['Albertov']['Zderaz']\n\n1\n\n\nAll of these relations can be easily visualised using Graph.explore() method you know from GeoPandas.\n\n1m = prague.explore()\nqueen.explore(\n2    prague, m=m, edge_kws=dict(style_kwds=dict(weight=1)), nodes=False\n)\n\n\n1\n\nUse (optionally) polygons as the underlying layer providing context.\n\n2\n\nGraph itself represents only topological relations between geometries. To plot the graph on a map, you need to pass geometries representing graph nodes.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nStatic plots\n\n\n\nSimilarly to GeoDataFrame, Graph can also be visualised as a static plot, using the Graph.plot() method working analogously to Graph.explore().\n\nax = queen.plot(prague, nodes=False, edge_kws={\"linewidth\": .5})\ncontextily.add_basemap(ax=ax, crs=prague.crs, source=\"CartoDB Positron\")\nax.set_axis_off()\n\n\n\n\nStatic plot of Queen contiguity\n\n\n\n\n\n\nOnce created, Graph objects can provide much information about the matrix beyond the basic attributes one would expect. You have direct access to the number of neighbours each observation has via the attribute cardinalities. For example, to find out how many neighbours observation E01006524 has:\n\nqueen.cardinalities['Albertov']\n\n9\n\n\nSince cardinalities is a Series, you can use all of the pandas functionality you know:\n\nqueen.cardinalities.head()\n\nfocal\nAlbertov             9\nAloisov             12\nAnděl-Na Skalce      8\nAntala Staška        8\nArbesovo náměstí     6\nName: cardinalities, dtype: int64\n\n\nYou can easily compute the mean number of neighbours.\n\nqueen.cardinalities.mean()\n\n5.949632738719832\n\n\nOr learn about the maximum number of neighbours a single geometry has.\n\nqueen.cardinalities.max()\n\n15\n\n\nThis also allows access to quick plotting, which comes in very handy in getting an overview of the size of neighbourhoods in general:\n\nsns.displot(queen.cardinalities, bins=14, kde=True)\n\n\n\n\nDistribution of cardinalites\n\n\n\n\nThe figure above shows how most observations have around five neighbours, but there is some variation around it. The distribution also seems to follow nearly a symmetric form, where deviations from the average occur both in higher and lower values almost evenly, with a minor tail towards higher values.\nSome additional information about the spatial relationships contained in the matrix is also easily available from a Graph object. You can ask about the number of observations (geometries) encoded in the graph:\n\nqueen.n\n\n953\n\n\nOr learn which geometries are isolates, the observations with no neighbours (think about islands).\n\n1queen.isolates\n\n\n1\n\nIn this case, this Series is empty since there are no isolates present.\n\n\n\n\nIndex([], dtype='object', name='focal')\n\n\nSpatial weight matrices can be explored visually in other ways. For example, you can pick an observation and visualise it in the context of its neighbourhood. The following plot does exactly that by zooming into the surroundings of ZSJ Albertov and displaying its polygon as well as those of its neighbours together with a relevant portion of the Graph:\n\nm = prague.loc[queen['Albertov'].index].explore(color=\"#25b497\")\nprague.loc[['Albertov']].explore(m=m, color=\"#fa94a5\")\nqueen.explore(prague, m=m, focal='Albertov')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nRook\nRook contiguity is similar to and, in many ways, superseded by queen contiguity. However, since it sometimes comes up in the literature, it is useful to know about it. The main idea is the same: two observations are neighbours if they share some of their boundary lines. However, in the rook case, it is not enough to share only one point. It needs to be at least a segment of their boundary. In most applied cases, these differences usually boil down to how the geocoding was done, but in some cases, such as when you use raster data or grids, this approach can differ more substantively, and it thus makes more sense.\nFrom a technical point of view, constructing a rook matrix is very similar:\n\nrook = graph.Graph.build_contiguity(prague, rook=True)\nrook\n\n&lt;Graph of 953 nodes and 5210 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nThe output is of the same type as before, a Graph object that can be queried and used in very much the same way as any other one.\n\n\nBishop\nIn a similar sense, you may want to create bishop contiguity - consider two geometries neighbouring if they share only one vertex. There’s no constructor for that but you can derive bishop contiguity from queen and rook as queen contains both shared vertex and shared edge relations. You can, therefore, subtract one from the other to get bishop contiguity:\n\nbishop = queen.difference(rook)\nbishop\n\n&lt;Graph of 953 nodes and 460 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nSee the remaining edges:\n\nax = bishop.plot(prague, nodes=False, edge_kws={\"linewidth\": .5})\ncontextily.add_basemap(ax=ax, crs=prague.crs, source=\"CartoDB Positron\")\nax.set_axis_off()\n\n\n\n\nBishop contiguity derived as a difference of Queen and Rook\n\n\n\n\nOnly a small fraction of queen neighbours are not rook neighbors at the same time (represented by the number of edges here), but there are some.\n\n\n\nDistance\nDistance-based matrices assign the weight to each pair of observations as a function of how far from each other they are. How this is translated into an actual weight varies across types and variants, but they all share that the ultimate reason why two observations are assigned some weight is due to the distance between them.\n\nK-Nearest Neighbors\nOne approach to define weights is to take the distances between a given observation and the rest of the set, rank them, and consider as neighbours the \\(k\\) closest ones. That is exactly what the \\(k\\)-nearest neighbours (KNN) criterium does.\nTo calculate KNN weights, you can use a similar function as before and derive them from a GeoDataFrame:\n\n1prague[\"centroid\"] = prague.centroid\n2prague = prague.set_geometry(\"centroid\")\nknn5 = graph.Graph.build_knn(prague, k=5)\nknn5\n\n\n1\n\nDistance-based methods usually work only with points (for performance reasons). Create a centroid representation of each geometry.\n\n2\n\nAssign it as an active geometry column.\n\n\n\n\n&lt;Graph of 953 nodes and 4765 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nSee the resulting graph visually:\n\nax = knn5.plot(prague, nodes=False, edge_kws={\"linewidth\": .5})\ncontextily.add_basemap(ax=ax, crs=prague.crs, source=\"CartoDB Positron\")\nax.set_axis_off()\n\n\n\n\nA graph representing 5 nearest neighbours\n\n\n\n\nNote how you need to specify the number of nearest neighbours you want to consider with the argument k. Since it is a polygon GeoDataFrame that you are passing, you need to compute the centroids to derive distances between observations. Alternatively, you can provide the points in the form of an array, skipping this way the dependency of a file on disk:\n\npts = pd.DataFrame(\n1    {\"X\": prague.geometry.x, \"Y\": prague.geometry.y}\n2).values\nknn5_from_pts = graph.Graph.build_knn(pts, k=5)\n\n\n1\n\nIf your GeoSeries contains Point geometries, you can access their coordinates using GeoSeries.x and GeoSeries.y.\n\n2\n\n.values returns only an array of values without the pandas index. It is the underlying data structure coming from the numpy package. You will learn more about numpy in due course.\n\n\n\n\n\n\nDistance band\nAnother approach to building distance-based spatial weights matrices is to draw a circle of certain radius and consider neighbour every observation that falls within the circle. The technique has two main variations: binary and continuous. In the former one, every neighbour is given a weight of one, while in the second one, the weights can be further tweaked by the distance to the observation of interest.\nTo compute binary distance matrices in PySAL, you can use the following command:\n\ndist1kmB = graph.Graph.build_distance_band(prague, 1000)\ndist1kmB\n\n&lt;Graph of 953 nodes and 6974 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nThis creates a binary matrix that considers neighbors of an observation every polygon whose centroid is closer than 1,000 metres (1 km) to the centroid of such observation. Check, for example, the neighbourhood of polygon Albertov:\n\ndist1kmB['Albertov']\n\nneighbor\nVodičkova                     1\nLondýnská                     1\nŠtěpánský obvod-západ         1\nNad muzeem                    1\nFolimanka-východ              1\nNuselské údolí                1\nVyšehrad                      1\nPodskalí                      1\nZderaz                        1\nU Čelakovského sadů           1\nŠtěpánský obvod-východ        1\nFolimanka-západ               1\nNad Nuselským údolím          1\nNa bělidle-nábřeží            1\nSmíchovský pivovar-nábřeží    1\nV Čelakovského sadech         1\nName: weight, dtype: int64\n\n\nNote that the units in which you specify the distance directly depend on the CRS in which the spatial data are projected, and this has nothing to do with the weights building but it can affect it significantly. Recall how you can check the CRS of a GeoDataFrame:\n\nprague.crs\n\n&lt;Projected CRS: EPSG:5514&gt;\nName: S-JTSK / Krovak East North\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: Czechia; Slovakia.\n- bounds: (12.09, 47.73, 22.56, 51.06)\nCoordinate Operation:\n- name: Krovak East North (Greenwich)\n- method: Krovak (North Orientated)\nDatum: System of the Unified Trigonometrical Cadastral Network\n- Ellipsoid: Bessel 1841\n- Prime Meridian: Greenwich\n\n\nIn this case, you can see the unit is expressed in metres (m). Hence you set the threshold to 1,000 for a circle of 1km radius. The whole graph looks like this:\n\nax = dist1kmB.plot(prague, nodes=False, edge_kws={\"linewidth\": .5})\ncontextily.add_basemap(ax=ax, crs=prague.crs, source=\"CartoDB Positron\")\nax.set_axis_off()\n\n\n\n\nA graph representing distance band of 1 km.\n\n\n\n\nAn extension of the weights above introduces further detail by assigning different weights to different neighbours within the radius circle based on how far they are from the observation of interest. For example, you could think of assigning the inverse of the distance between observations \\(i\\) and \\(j\\) as \\(w_{ij}\\). This can be computed with the following command:\n\ndist1kmC = graph.Graph.build_distance_band(prague, 1000, binary=False)\ndist1kmC\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/libpysal/graph/base.py:778: RuntimeWarning: divide by zero encountered in power\n  kernel=lambda distances, alpha: np.power(distances, alpha),\n\n\n&lt;Graph of 953 nodes and 6974 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Benice', 'Březiněves', 'Dolní Černošice', ...]&gt;\n\n\nIn dist1kmC, every observation within the 1km circle is assigned a weight equal to the inverse distance between the two:\n\\[\nw_{ij} = \\dfrac{1}{d_{ij}}\n\\]\nThis way, the further apart \\(i\\) and \\(j\\) are from each other, the smaller the weight \\(w_{ij}\\) will be.\nContrast the binary neighbourhood with the continuous one for Albertov:\n\ndist1kmC['Albertov']\n\nneighbor\nVodičkova                     0.001055\nLondýnská                     0.001162\nŠtěpánský obvod-západ         0.002192\nNad muzeem                    0.001084\nFolimanka-východ              0.001082\nNuselské údolí                0.001281\nVyšehrad                      0.001247\nPodskalí                      0.001803\nZderaz                        0.001436\nU Čelakovského sadů           0.001264\nŠtěpánský obvod-východ        0.002001\nFolimanka-západ               0.001636\nNad Nuselským údolím          0.001183\nNa bělidle-nábřeží            0.001158\nSmíchovský pivovar-nábřeží    0.001000\nV Čelakovského sadech         0.001121\nName: weight, dtype: float64\n\n\nFollowing this logic of more detailed weights through distance, there is a temptation to take it further and consider everyone else in the dataset as a neighbor whose weight will then get modulated by the distance effect shown above. However, although conceptually correct, this approach is not always the most computationally or practical one. Because of the nature of spatial weights matrices, particularly because of the fact their size is \\(N\\) by \\(N\\), they can grow substantially large. A way to cope with this problem is by making sure they remain fairly sparse (with many zeros). Sparsity is typically ensured in the case of contiguity or KNN by construction but, with inverse distance, it needs to be imposed as, otherwise, the matrix could be potentially entirely dense (no zero values other than the diagonal). In practical terms, what is usually done is to impose a distance threshold beyond which no weight is assigned and interaction is assumed to be non-existent. Beyond being computationally feasible and scalable, results from this approach usually do not differ much from a fully “dense” one as the additional information that is included from further observations is almost ignored due to the small weight they receive. In this context, a commonly used threshold, although not always best, is that which makes every observation to have at least one neighbor.\n\n\n\n\n\n\nComputing threshold\n\n\n\nSuch a threshold can be calculated using the min_threshold_distance function from libpysal.weights module:\n\nfrom libpysal import weights\n\nmin_thr = weights.min_threshold_distance(pts)\nmin_thr\n\n1920.0404365049942\n\n\nWhich can then be used to calculate an inverse distance weights matrix:\nmin_dist = graph.Graph.build_distance_band(prague, min_thr, binary=False)\n\n\n\n\n\nBlock weights\nBlock weights connect every observation in a dataset that belongs to the same category in a list provided ex-ante. Usually, this list will have some relation to geography and the location of the observations but, technically speaking, all one needs to create block weights is a list of memberships. In this class of weights, neighbouring observations, those in the same group, are assigned a weight of one, and the rest receive a weight of zero.\nIn this example, you will build a spatial weights matrix that connects every ZSJ with all the other ones in the same KU. See how the KU code is expressed for every ZSJ:\n\nprague.head()\n\n\n\n\n\n\n\n\nNAZ_KU\nn_people\ngeometry\ncentroid\n\n\nNAZ_ZSJ\n\n\n\n\n\n\n\n\nBěchovice\nBěchovice\n1563.0\nMULTIPOLYGON (((-728432.898 -1045340.836, -728...\nPOINT (-728983.854 -1045559.217)\n\n\nNová Dubeč\nBěchovice\n662.0\nMULTIPOLYGON (((-729878.896 -1045449.784, -729...\nPOINT (-730222.277 -1045630.462)\n\n\nBenice\nBenice\n728.0\nMULTIPOLYGON (((-730788.19 -1052695.343, -7307...\nPOINT (-730966.612 -1053057.39)\n\n\nBřeziněves\nBřeziněves\n1808.0\nMULTIPOLYGON (((-736983.473 -1034315.571, -737...\nPOINT (-737232.635 -1034903.671)\n\n\nDolní Černošice\nLipence\n150.0\nMULTIPOLYGON (((-748601.583 -1054231.394, -748...\nPOINT (-749780.041 -1055689.764)\n\n\n\n\n\n\n\nTo build a block spatial weights matrix that connects as neighbours all the ZSJ in the same KU, you only require the mapping of codes. Using PySAL, this is a one-line task:\n\nblock = graph.Graph.build_block_contiguity(prague['NAZ_KU'])\nblock\n\n&lt;Graph of 953 nodes and 11184 nonzero edges indexed by\n ['Běchovice', 'Nová Dubeč', 'Homole-U Čecha', 'Běchovice-jih', 'Běchovice-za tratí', ...]&gt;\n\n\nIf you query for the neighbors of observation by its name, it will work as usual:\n\nblock['Albertov']\n\nneighbor\nPetrský obvod                 1\nMasarykovo nádraží            1\nJindřišský obvod              1\nVodičkova                     1\nVojtěšský obvod               1\nŠtěpánský obvod-západ         1\nPodskalí                      1\nZderaz                        1\nAutobusové nádraží Florenc    1\nU Čelakovského sadů           1\nŠtěpánský obvod-východ        1\nV Čelakovského sadech         1\nMasarykovo nádraží-východ     1\nName: weight, dtype: int64\n\n\nNotice the resulting blocks are clearly visible when you visualise the graph:\n\nax = block.plot(prague, nodes=False, edge_kws={\"linewidth\": .5})\ncontextily.add_basemap(ax=ax, crs=prague.crs, source=\"CartoDB Positron\")\nax.set_axis_off()\n\n\n\n\nA graph representing block contiguity",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#standardizing-graph-relationships",
    "href": "spatial_graphs/hands_on.html#standardizing-graph-relationships",
    "title": "Spatial weights in PySAL",
    "section": "Standardizing Graph relationships",
    "text": "Standardizing Graph relationships\nIn the context of many spatial analysis techniques, a spatial weights matrix with raw values (e.g. ones and zeros for the binary case) is not always the best-suiting one for analysis and some sort of transformation is required. This implies modifying each weight so they conform to certain rules. PySAL has transformations baked right into the Graph object, so it is possible to check the state of an object as well as to modify it.\nConsider the original queen weights for observation Albertov:\n\nqueen['Albertov']\n\nneighbor\nVodičkova                 1\nVojtěšský obvod           1\nŠtěpánský obvod-západ     1\nNuselské údolí            1\nVyšehrad                  1\nPodskalí                  1\nZderaz                    1\nŠtěpánský obvod-východ    1\nFolimanka-západ           1\nName: weight, dtype: int64\n\n\nSince it is contiguity, every neighbour gets one, the rest zero weight. You can check if the object queen has been transformed or not by calling the property .transformation:\n\nqueen.transformation\n\n'O'\n\n\nwhere \"O\" stands for “original”, so no transformations have been applied yet. If you want to apply a row-based transformation so every row of the matrix sums up to one, you use the .transform() method as follows:\n\n1row_wise_queen = queen.transform(\"R\")\n\n\n1\n\n.transform() returns a new Graph with transformed weights. \"R\" stands for row-wise transformation.\n\n\n\n\nNow you can check the weights of the same observation as above and find they have been modified:\n\nrow_wise_queen['Albertov']\n\nneighbor\nVodičkova                 0.111111\nVojtěšský obvod           0.111111\nŠtěpánský obvod-západ     0.111111\nNuselské údolí            0.111111\nVyšehrad                  0.111111\nPodskalí                  0.111111\nZderaz                    0.111111\nŠtěpánský obvod-východ    0.111111\nFolimanka-západ           0.111111\nName: weight, dtype: float64\n\n\nThe sum of weights for all the neighbours is one:\n\nrow_wise_queen['Albertov'].sum()\n\n1.0\n\n\nPySAL currently supports the following transformations:\n\nO: original, returning the object to the initial state.\nB: binary, with every neighbour having assigned a weight of one.\nR: row, with all the neighbours of a given observation adding up to one.\nV: variance stabilising, with the sum of all the weights being constrained to the number of observations.\nD: double, with all the weights across all observations adding up to one.",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#reading-and-writing-spatial-weights-in-pysal",
    "href": "spatial_graphs/hands_on.html#reading-and-writing-spatial-weights-in-pysal",
    "title": "Spatial weights in PySAL",
    "section": "Reading and Writing spatial weights in PySAL",
    "text": "Reading and Writing spatial weights in PySAL\nSometimes, suppose a dataset is very detailed or large. In that case, it can be costly to build the spatial weights matrix of a given geography, and, despite the optimisations in the PySAL code, the computation time can quickly grow out of hand. In these contexts, it is useful not to have to rebuild a matrix from scratch every time you need to re-run the analysis. A useful solution, in this case, is to build the matrix once and save it to a file where it can be reloaded at a later stage if needed.\nPySAL has a way to efficiently write any kind of Graph object into a file using the method .to_parquet(). This will serialise the underlying adjacency table into an Apache Parquet file format that is very fast to read and write and can be compressed to a small size.\n\nqueen.to_parquet(\"queen.parquet\")\n\nYou can then read such a file back to the Graph from using graph.read_parquet() function:\n\nqueen_2 = graph.read_parquet(\"queen.parquet\")\n\n\n\n\n\n\n\nInteroperabilty with other tools\n\n\n\nWeights saved as a Parquet file are efficient if PySAL is the only tool you want to use to read and write them. If you want to save them to other file formats like GAL or GWT that are readable by tools like GeoDa, you can save graphs to interoperable GAL (binary) or GWT (non-binary) formats using:\nqueen.to_gal(\"queen.gal\")\n\nqueen.to_gwt(\"queen.gwt\")\nSimilarly, you can read such files with graph.read_gal() and graph.read_gwt().",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#spatial-lag",
    "href": "spatial_graphs/hands_on.html#spatial-lag",
    "title": "Spatial weights in PySAL",
    "section": "Spatial Lag",
    "text": "Spatial Lag\nOne of the most direct applications of spatial weight matrices is the so-called spatial lag. The spatial lag of a given variable is the product of a spatial weight matrix and the variable itself:\n\\[\nY_{sl} = W Y\n\\]\nwhere \\(Y\\) is a Nx1 vector with the values of the variable. Recall that the product of a matrix and a vector equals the sum of a row by column element multiplication for the resulting value of a given row. In terms of the spatial lag:\n\\[\ny_{sl-i} = \\displaystyle \\sum_j w_{ij} y_j\n\\]\nIf you are using row-standardized weights, \\(w_{ij}\\) becomes a proportion between zero and one, and \\(y_{sl-i}\\) can be seen as the average value of \\(Y\\) in the neighborhood of \\(i\\).\nFor this illustration, you will use the area of each polygon as the variable of interest. And to make things a bit nicer later on, you will keep the log of the area instead of the raw measurement. Hence, let’s create a column for it:\n\n1prague = prague.set_geometry(\"geometry\")\n2prague[\"area\"] = np.log(prague.area)\n\n\n1\n\nRemember to set active geometry back to polygons before computing area.\n\n2\n\nnp.log is a function from the numpy package that computes the natural logarithm of an array of values (elementwise).\n\n\n\n\nThe spatial lag is a key element of many spatial analysis techniques, as you will see later on and, as such, it is fully supported in PySAL. To compute the spatial lag of a given variable, area, for example:\n\n1queen_score = row_wise_queen.lag(prague[\"area\"])\n2queen_score[:5]\n\n\n1\n\nCompute spatial lag of area using row-wised standardised weights to get mean values. If you used binary weights, the resulting spatial lag would equal to sum of values.\n\n2\n\nPrint the first five elements\n\n\n\n\narray([13.84202483, 14.06442931, 13.83427974, 14.19385395, 14.10275008])\n\n\nLine 4 contains the actual computation, which is highly optimised in PySAL. Note that, despite passing in a pd.Series object, the output is a numpy array. This however, can be added directly to the table prague:\n\nprague['w_area'] = queen_score",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#moran-plot",
    "href": "spatial_graphs/hands_on.html#moran-plot",
    "title": "Spatial weights in PySAL",
    "section": "Moran Plot",
    "text": "Moran Plot\nThe Moran Plot is a graphical way to start exploring the concept of spatial autocorrelation, and it is a good application of spatial weight matrices and the spatial lag. In essence, it is a standard scatter plot in which a given variable (area, for example) is plotted against its own spatial lag. Usually, a fitted line is added to include more information:\n\n1f, ax = plt.subplots(1, figsize=(6, 6))\n2sns.regplot(x=\"area\", y=\"w_area\", data=prague, ci=None, ax=ax, marker=\".\");\n\n\n1\n\nSetup the figure (f) and axis (ax) to allow setting the size of the figure and forcing it to be square.\n\n2\n\nPlot the values. ci=None turns off the computation of the confidence interval for the regression line estimate.\n\n\n\n\n\n\n\nMoran plot\n\n\n\n\nIn order to easily compare different scatter plots and spot outlier observations, it is common practice to standardise the values of the variable before computing its spatial lag and plotting it. This can be accomplished by substracting the average value and dividing the result by the standard deviation:\n\\[\nz_i = \\dfrac{y - \\bar{y}}{\\sigma_y}\n\\]\nwhere \\(z_i\\) is the standardized version of \\(y_i\\), \\(\\bar{y}\\) is the average of the variable, and \\(\\sigma\\) its standard deviation.\nCreating a standardised Moran Plot implies that average values are centred in the plot (as they are zero when standardised), and dispersion is expressed in standard deviations, with the rule of thumb of values greater or smaller than two standard deviations being outliers. A standardised Moran Plot also partitions the space into four quadrants that represent different situations:\n\nHigh-High (HH): values above average surrounded by values above average.\nLow-Low (LL): values below average surrounded by values below average.\nHigh-Low (HL): values above average surrounded by values below average.\nLow-High (LH): values below average surrounded by values above average.\n\nThese will be further explored once spatial autocorrelation has been properly introduced in subsequent blocks.\n\n1std_prague = (prague['area'] - prague['area'].mean()) / prague['area'].std()\n2std_w_prague = pd.Series(\n    row_wise_queen.lag(std_prague), index=std_prague.index\n)\nf, ax = plt.subplots(1, figsize=(6, 6))\nsns.regplot(x=std_prague, y=std_w_prague, ci=None, marker=\".\")\n\n3plt.axvline(0, c='k', alpha=0.5)\n4plt.axhline(0, c='k', alpha=0.5);\n\n\n1\n\nStandardize the area.\n\n2\n\nCompute the spatial lag of the standardised version and save it as a Series indexed as the original variable.\n\n3\n\nPlot a vertical line dividing quadrants.\n\n4\n\nPlot a horizontal line dividing quadrants.\n\n\n\n\n\n\n\nMoran plot with quadrants",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "spatial_graphs/hands_on.html#acknowledgements",
    "href": "spatial_graphs/hands_on.html#acknowledgements",
    "title": "Spatial weights in PySAL",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The code was updated to use the new libpysal.graph module instead of libpysal.weights. The text was slightly adapted to accommodate a different dataset and the module change.",
    "crumbs": [
      "Spatial weights",
      "Spatial weights in PySAL"
    ]
  },
  {
    "objectID": "clustering/exercise_answers.html",
    "href": "clustering/exercise_answers.html",
    "title": "Find me a cluster",
    "section": "",
    "text": "One solution. You may have yours.\n\nimport geopandas as gpd\nimport seaborn as sns\nfrom libpysal import graph\nfrom sklearn import cluster, preprocessing\n\n\nchicago = gpd.read_file(\n    \"https://martinfleischmann.net/sds/clustering/data/chicago_influenza_1918.geojson\"\n)\n\nBefore working with clustering, do you remember that note about data standardisation? The demographic variables in the table are not using the same scale, so you need to do something about it before using K-means.\n\ndemographics = [\n    \"gross_acres\",\n    \"illit\",\n    \"unemployed_pct\",\n    \"ho_pct\",\n    \"agecat1\",\n    \"agecat2\",\n    \"agecat3\",\n    \"agecat4\",\n    \"agecat5\",\n    \"agecat6\",\n    \"agecat7\",\n]\nchicago[demographics] = preprocessing.robust_scale(chicago[demographics])\nchicago.head(2)\n\n\n\n\n\n\n\n\ngeography_code\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ngeometry\n\n\n\n\n0\nG17003100388\n-0.194708\n0.465558\n0.121762\n-0.577117\n-0.145658\n-0.430586\n-0.320059\n-0.367526\n-0.419623\n-0.304649\n-0.397324\n29\nPOLYGON ((358405.051 570342.347, 358371.811 57...\n\n\n1\nG17003100197\n-0.201697\n2.413302\n-0.701498\n-0.629427\n0.627451\n0.434924\n0.408555\n0.358749\n-0.009057\n-0.143917\n-0.205352\n30\nPOLYGON ((356903.353 580393.561, 356895.319 58...\n\n\n\n\n\n\n\nIf you check the values now, you will see that they are all distributed around 0.\n\n_ = sns.pairplot(chicago[demographics])\n\n\n\n\n\n\n\n\nPick a number of clusters\n\nn_clusters = 4\n\nRun K-Means for that number of clusters\n\nkmeans = cluster.KMeans(n_clusters=n_clusters, random_state=0, n_init=1000)\nkmeans.fit(chicago[demographics])\n\nKMeans(n_clusters=4, n_init=1000, random_state=0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KMeans?Documentation for KMeansiFittedKMeans(n_clusters=4, n_init=1000, random_state=0) \n\n\nPlot the different clusters on a map\n\nchicago[\"cluster\"] = kmeans.labels_\n\nchicago.explore(\"cluster\", categorical=True)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nAnalyse the results: - What do you find? - What are the main characteristics of each cluster? - How are clusters distributed geographically? - Can you identify some groups concentrated on particular areas?\n\ngroups = chicago.groupby('cluster')\ngroups.size()\n\ncluster\n0    356\n1     36\n2     99\n3      5\ndtype: int64\n\n\n\ngroups[demographics].mean().T\n\n\n\n\n\n\n\ncluster\n0\n1\n2\n3\n\n\n\n\ngross_acres\n0.191129\n9.231985\n1.214300\n28.355467\n\n\nillit\n0.136419\n0.374769\n2.098371\n0.290736\n\n\nunemployed_pct\n-0.185173\n0.217657\n-0.190443\n0.278034\n\n\nho_pct\n-0.004221\n1.288033\n0.097141\n1.885749\n\n\nagecat1\n-0.130173\n0.179272\n1.498118\n0.956863\n\n\nagecat2\n-0.146134\n0.290070\n1.586965\n1.138612\n\n\nagecat3\n-0.157950\n0.306211\n1.508939\n1.128909\n\n\nagecat4\n-0.168607\n0.164381\n1.276251\n0.918705\n\n\nagecat5\n-0.153945\n-0.101216\n1.146712\n0.677434\n\n\nagecat6\n-0.072975\n-0.119848\n0.921775\n0.542829\n\n\nagecat7\n0.006919\n-0.171417\n0.789859\n0.589063\n\n\n\n\n\n\n\nCreate spatially lagged K-Means.\n\nqueen = graph.Graph.build_contiguity(chicago).transform(\"r\")\n\nfor column in demographics:\n    chicago[column + \"_lag\"] = queen.lag(chicago[column])\n\ndemographics_spatial = demographics + [column + \"_lag\" for column in demographics]\n\nkmeans_lag = cluster.KMeans(n_clusters=n_clusters, random_state=42, n_init=1000)\nkmeans_lag.fit(chicago[demographics_spatial])\n\nchicago[\"cluster_lag\"] = kmeans_lag.labels_\n\nchicago.explore(\"cluster_lag\", categorical=True)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nDevelop a regionalisation using agglomerative clustering\n\nagg = cluster.AgglomerativeClustering(n_clusters=n_clusters, connectivity=queen.sparse)\nagg.fit(chicago[demographics])\n\nAgglomerativeClustering(connectivity=&lt;Compressed Sparse Row sparse array of dtype 'float64'\n    with 2274 stored elements and shape (496, 496)&gt;,\n                        n_clusters=4)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  AgglomerativeClustering?Documentation for AgglomerativeClusteringiFittedAgglomerativeClustering(connectivity=&lt;Compressed Sparse Row sparse array of dtype 'float64'\n    with 2274 stored elements and shape (496, 496)&gt;,\n                        n_clusters=4) \n\n\n\nchicago[\"cluster_agg\"] = agg.labels_\n\nchicago.explore(\"cluster_agg\", categorical=True)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nGenerate a geography that contains only the boundaries of each region and visualise it.\n\nregions = chicago[[\"cluster_agg\", \"geometry\"]].dissolve(\"cluster_agg\")\nregions.reset_index().explore(\"cluster_agg\", categorical=True)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "clustering/slides.html#the-need-to-group-data",
    "href": "clustering/slides.html#the-need-to-group-data",
    "title": "Similar data belong together",
    "section": "The need to group data",
    "text": "The need to group data"
  },
  {
    "objectID": "clustering/slides.html#grouping-as-simplifying",
    "href": "clustering/slides.html#grouping-as-simplifying",
    "title": "Similar data belong together",
    "section": "Grouping as simplifying",
    "text": "Grouping as simplifying\n\nDefine a given number of categories based on  many characteristics (multi-dimensional)\n\n\nFind the category where each observation fits best.\n\n\nReduce complexity, keep all the relevant information\n\n\nProduce easier-to-understand outputs"
  },
  {
    "objectID": "clustering/slides.html#types-of-grouping",
    "href": "clustering/slides.html#types-of-grouping",
    "title": "Similar data belong together",
    "section": "Types of grouping",
    "text": "Types of grouping\nNon-spatial clustering\nRegionalisation"
  },
  {
    "objectID": "clustering/slides.html#machine-learning",
    "href": "clustering/slides.html#machine-learning",
    "title": "Similar data belong together",
    "section": "Machine learning",
    "text": "Machine learning\nThe computer learns some of the dataset’s properties without the human specifying them.\nUnsupervised\n\nThere is no apriori structure imposed on the classification \\(\\rightarrow\\) before the analysis, no observations are in a category."
  },
  {
    "objectID": "clustering/slides.html#k-means",
    "href": "clustering/slides.html#k-means",
    "title": "Similar data belong together",
    "section": "K-means",
    "text": "K-means\nMost popular clustering algorithm\nGood but not perfect"
  },
  {
    "objectID": "clustering/slides.html#example",
    "href": "clustering/slides.html#example",
    "title": "Similar data belong together",
    "section": "Example",
    "text": "Example\nPalmer Penguins"
  },
  {
    "objectID": "clustering/slides.html#many-techniques",
    "href": "clustering/slides.html#many-techniques",
    "title": "Similar data belong together",
    "section": "Many techniques",
    "text": "Many techniques\nHierarchical clustering\nAgglomerative clustering\nSpectral clustering\nNeural networks (e.g. Self-Organizing Maps)\nDBSCAN"
  },
  {
    "objectID": "clustering/slides.html#algorithms",
    "href": "clustering/slides.html#algorithms",
    "title": "Similar data belong together",
    "section": "Algorithms",
    "text": "Algorithms\nAutomated Zoning Procedure (AZP)\nArisel\nMax-P\nSkater\nSee Duque et al. (2007) for an excellent, though advanced, overview."
  },
  {
    "objectID": "clustering/exercise.html",
    "href": "clustering/exercise.html",
    "title": "Find me a cluster",
    "section": "",
    "text": "Now, it is up to you to find some clusters.",
    "crumbs": [
      "Clustering",
      "Find me a cluster"
    ]
  },
  {
    "objectID": "clustering/exercise.html#chicago-1918",
    "href": "clustering/exercise.html#chicago-1918",
    "title": "Find me a cluster",
    "section": "Chicago 1918",
    "text": "Chicago 1918\nYou will work with the demographic characteristics of Chicago in 1918 linked to the influenza mortality during the pandemic that happened back then, coming from the research paper by Grantz et al. (2016) you used before in the Data wrangling session, but this time with geometries.\n\nimport geopandas as gpd\n\nchicago = gpd.read_file(\n    \"https://martinfleischmann.net/sds/clustering/data/chicago_influenza_1918.geojson\"\n)\nchicago.explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nBefore working with clustering, do you remember that note about data standardisation? The demographic variables in the table are not using the same scale, so you need to do something about it before using K-means.\nI’ll let you check the Data section of the chapter Clustering and Regionalization from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) by yourself for an explanation of what is happening below. In short, you take the variables and scale them using the robust scaler, ensuring that all of them are using the same scale and the scaling is not affected by outliers.\n\n1from sklearn import preprocessing\n\n2demographics = [\n    \"gross_acres\",\n    \"illit\",\n    \"unemployed_pct\",\n    \"ho_pct\",\n    \"agecat1\",\n    \"agecat2\",\n    \"agecat3\",\n    \"agecat4\",\n    \"agecat5\",\n    \"agecat6\",\n    \"agecat7\",\n]\n3chicago[demographics] = preprocessing.robust_scale(chicago[demographics])\nchicago.head(2)\n\n\n1\n\nImport the preprocessing module of scikit-learn.\n\n2\n\nSpecify a list of demographic variables.\n\n3\n\nScale the selected columns and assign them back to the table.\n\n\n\n\n\n\n\n\n\n\n\ngeography_code\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ngeometry\n\n\n\n\n0\nG17003100388\n-0.194708\n0.465558\n0.121762\n-0.577117\n-0.145658\n-0.430586\n-0.320059\n-0.367526\n-0.419623\n-0.304649\n-0.397324\n29\nPOLYGON ((358405.051 570342.347, 358371.811 57...\n\n\n1\nG17003100197\n-0.201697\n2.413302\n-0.701498\n-0.629427\n0.627451\n0.434924\n0.408555\n0.358749\n-0.009057\n-0.143917\n-0.205352\n30\nPOLYGON ((356903.353 580393.561, 356895.319 58...\n\n\n\n\n\n\n\nIf you check the values now, you will see that they are all distributed around 0.\nOnce this is ready, get to work with the following tasks:\n\nPick a number of clusters\nRun K-Means for that number of clusters\nPlot the different clusters on a map\nAnalyse the results:\n\nWhat do you find?\nWhat are the main characteristics of each cluster?\nHow are clusters distributed geographically?\nCan you identify some groups concentrated on particular areas?\n\nCreate spatially lagged K-Means.\n\nHow did the result change?\n\nDevelop a regionalisation using agglomerative clustering\n\nHow did the result change compared to the previous two?\n\nGenerate a geography that contains only the boundaries of each region and visualise it.\n\n\nRinse and repeat with several combinations of variables and number of clusters\nPick your best. Why have you selected it? What does it show? What are the main groups of areas based on the built environment?",
    "crumbs": [
      "Clustering",
      "Find me a cluster"
    ]
  },
  {
    "objectID": "clustering/exercise.html#acknowledgements",
    "href": "clustering/exercise.html#acknowledgements",
    "title": "Find me a cluster",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Clustering",
      "Find me a cluster"
    ]
  },
  {
    "objectID": "introduction/slides.html#data-science-is-about",
    "href": "introduction/slides.html#data-science-is-about",
    "title": "What is Spatial Data Science?",
    "section": "Data Science is about",
    "text": "Data Science is about\n\n\n\ndata collection\n\n\ndata cleaning and preprocessing\n\n\nexploratory data analysis\n\n\ndata visualization\n\n\ndata modeling\n\n\n\ndescriptive analytics\n\n\npredictive analytics\n\n\nprescriptive analytics\n\n\nmachine learning\n\n\ndeep learning"
  },
  {
    "objectID": "introduction/slides.html#different",
    "href": "introduction/slides.html#different",
    "title": "What is Spatial Data Science?",
    "section": "Different",
    "text": "Different"
  },
  {
    "objectID": "introduction/slides.html#new-data-revolution",
    "href": "introduction/slides.html#new-data-revolution",
    "title": "What is Spatial Data Science?",
    "section": "New data revolution",
    "text": "New data revolution\nRaw data\nLarge data\nExotic data\nStrange data"
  },
  {
    "objectID": "introduction/slides.html#computational-revolution",
    "href": "introduction/slides.html#computational-revolution",
    "title": "What is Spatial Data Science?",
    "section": "Computational revolution",
    "text": "Computational revolution\nPython\nR\nSQL\nJavaScript"
  },
  {
    "objectID": "introduction/slides.html#methodological-evolution",
    "href": "introduction/slides.html#methodological-evolution",
    "title": "What is Spatial Data Science?",
    "section": "Methodological evolution",
    "text": "Methodological evolution\nThe old in the new world\nThe new derived from the old\nThe new"
  },
  {
    "objectID": "introduction/slides.html#open-science",
    "href": "introduction/slides.html#open-science",
    "title": "What is Spatial Data Science?",
    "section": "Open science",
    "text": "Open science\nOpen data\nOpen tools\nOpen methods\nOpen mind"
  },
  {
    "objectID": "introduction/slides.html#spatial-data-science-vs-gis",
    "href": "introduction/slides.html#spatial-data-science-vs-gis",
    "title": "What is Spatial Data Science?",
    "section": "Spatial Data Science vs GIS",
    "text": "Spatial Data Science vs GIS\nadvanced statistical and computational techniques to analyse and derive insights from spatial data\ndeeper in computation\ncomplex data pipelines (unlimited power of coding)"
  },
  {
    "objectID": "introduction/slides.html#different-toolkit",
    "href": "introduction/slides.html#different-toolkit",
    "title": "What is Spatial Data Science?",
    "section": "different toolkit",
    "text": "different toolkit\n\nthough some overlaps in the Esri world do exist"
  },
  {
    "objectID": "introduction/slides.html#what-the-course-is-about",
    "href": "introduction/slides.html#what-the-course-is-about",
    "title": "What is Spatial Data Science?",
    "section": "What the course IS about?",
    "text": "What the course IS about?"
  },
  {
    "objectID": "introduction/slides.html#what-the-course-is-not-about",
    "href": "introduction/slides.html#what-the-course-is-not-about",
    "title": "What is Spatial Data Science?",
    "section": "What the course IS NOT about?",
    "text": "What the course IS NOT about?"
  },
  {
    "objectID": "introduction/slides.html#idea-behind-the-course-design",
    "href": "introduction/slides.html#idea-behind-the-course-design",
    "title": "What is Spatial Data Science?",
    "section": "Idea behind the course design",
    "text": "Idea behind the course design"
  },
  {
    "objectID": "introduction/slides.html#contents",
    "href": "introduction/slides.html#contents",
    "title": "What is Spatial Data Science?",
    "section": "Contents",
    "text": "Contents"
  },
  {
    "objectID": "introduction/slides.html#organisation",
    "href": "introduction/slides.html#organisation",
    "title": "What is Spatial Data Science?",
    "section": "Organisation",
    "text": "Organisation"
  },
  {
    "objectID": "introduction/slides.html#assignment",
    "href": "introduction/slides.html#assignment",
    "title": "What is Spatial Data Science?",
    "section": "Assignment",
    "text": "Assignment\n\n\nComputational essay\nAn essay whose narrative is supported by code and its results, which are part of the essay."
  },
  {
    "objectID": "introduction/slides.html#topic",
    "href": "introduction/slides.html#topic",
    "title": "What is Spatial Data Science?",
    "section": "Topic",
    "text": "Topic\nDefine your task\nA Barcelona case"
  },
  {
    "objectID": "introduction/slides.html#use-of-generative-ai",
    "href": "introduction/slides.html#use-of-generative-ai",
    "title": "What is Spatial Data Science?",
    "section": "Use of generative AI",
    "text": "Use of generative AI"
  },
  {
    "objectID": "introduction/exercise.html",
    "href": "introduction/exercise.html",
    "title": "Understanding Notebooks",
    "section": "",
    "text": "This is a “You do” part of the first lesson.\nYou now know what a Jupyter Notebook is, how to work with it in Jupyter Lab (or Google Colab) and how to run Python code in its cells. Let’s now move attention to cells with text.",
    "crumbs": [
      "Introduction",
      "Understanding Notebooks"
    ]
  },
  {
    "objectID": "introduction/exercise.html#master-markdown",
    "href": "introduction/exercise.html#master-markdown",
    "title": "Understanding Notebooks",
    "section": "Master Markdown",
    "text": "Master Markdown\nThe text in Jupyter Notebooks is formatted using Markdown, a straightforward syntax allowing you to format text, embed images or tables, and keep everything as plain text.\nFor this task, you will focus on getting to know Markdown better. To practise its syntax, try to reproduce the following Wikipedia entry:\n\nhttps://en.wikipedia.org/wiki/Waldo_R._Tobler\n\nYou should be able to figure out the proper Markdown syntax by yourself, with some help from your favourite search engine (or LLM).\n\n\n\n\n\n\nTip\n\n\n\nDo not overthink it. Focus on correctly formatting the bold, italics, links, headlines, and lists, but don’t worry too much about the overall layout. Bonus if you also manage to insert the image (it does not need to be properly placed as on the original page)!",
    "crumbs": [
      "Introduction",
      "Understanding Notebooks"
    ]
  },
  {
    "objectID": "introduction/exercise.html#play-with-the-math-module",
    "href": "introduction/exercise.html#play-with-the-math-module",
    "title": "Understanding Notebooks",
    "section": "Play with the math module",
    "text": "Play with the math module\nPlay a bit more with the math module you have explored in the previous section.\n\nCan you figure out how to round numbers?\nCan you create the natural logarithm of a variable? And can you get the original value back?\nHow would you do the base-10 logarithm?\nCan you convert an angle from radians to degrees and back?\nCan you figure out what the math.nan constant is for?\nWhich other constants are available in the math module?\n\nDon’t forget to document your code cells with Markdown cells.\n\n\n\n\n\n\nTip\n\n\n\nYou don’t need to answer all of the questions, but try if you have time. A good place to start would be a documentation of the math module but that is up to you.",
    "crumbs": [
      "Introduction",
      "Understanding Notebooks"
    ]
  },
  {
    "objectID": "interpolation/slides.html#interpolation-techniques",
    "href": "interpolation/slides.html#interpolation-techniques",
    "title": "Use space in your favour",
    "section": "Interpolation techniques",
    "text": "Interpolation techniques\nPolygon to polygon\nPoint to point"
  },
  {
    "objectID": "interpolation/slides.html#areal-interpolation",
    "href": "interpolation/slides.html#areal-interpolation",
    "title": "Use space in your favour",
    "section": "Areal interpolation",
    "text": "Areal interpolation"
  },
  {
    "objectID": "interpolation/slides.html#dasymetric-interpolation",
    "href": "interpolation/slides.html#dasymetric-interpolation",
    "title": "Use space in your favour",
    "section": "Dasymetric interpolation",
    "text": "Dasymetric interpolation\n\nareal interpolation with ancillary information"
  },
  {
    "objectID": "interpolation/slides.html#pycnophylactic-interpolation",
    "href": "interpolation/slides.html#pycnophylactic-interpolation",
    "title": "Use space in your favour",
    "section": "Pycnophylactic interpolation",
    "text": "Pycnophylactic interpolation"
  },
  {
    "objectID": "interpolation/slides.html#ordinary-kriging",
    "href": "interpolation/slides.html#ordinary-kriging",
    "title": "Use space in your favour",
    "section": "Ordinary Kriging",
    "text": "Ordinary Kriging\nlinear combination of observations that are nearby\nwhich takes into account geographical proximity,\nspatial arrangement of observations,\nand pattern of autocorrelation"
  },
  {
    "objectID": "interpolation/exercise.html",
    "href": "interpolation/exercise.html",
    "title": "What is in between?",
    "section": "",
    "text": "Going through this exercise is even more up to you than usual.",
    "crumbs": [
      "Interpolation",
      "What is in between?"
    ]
  },
  {
    "objectID": "interpolation/exercise.html#areal-interpolation",
    "href": "interpolation/exercise.html#areal-interpolation",
    "title": "What is in between?",
    "section": "Areal interpolation",
    "text": "Areal interpolation\nPick any dataset linked to polygon geometries used in previous chapters of the course. Or any of your own, if you wish.\n\nCreate a hexagonal grid of a reasonable resolution covering the area of your data.\nInterpolate data to the grid. Make sure to use extensive and intensive variables correctly.\nDo you understand the difference in how the intensive variables are interpolated vs. the extensive?\nIf you don’t have a categorical column in your data, create one. Interpolate this categorical column to the grid. What is different when dealing with categorical data?",
    "crumbs": [
      "Interpolation",
      "What is in between?"
    ]
  },
  {
    "objectID": "interpolation/exercise.html#point-interpolation",
    "href": "interpolation/exercise.html#point-interpolation",
    "title": "What is in between?",
    "section": "Point interpolation",
    "text": "Point interpolation\nWhen dealing with point patterns, you have worked with Airbnb listings in Prague. Use the same data to interpolate the price of a single-bedroom flat to a hexagonal grid of resolution 10.\n\n\n\n\n\n\nGenerating H3 polygons\n\n\n\nYou will need to pass a GeoSeries of polygons to the h3fy function. You can either get those from the Spatial weights session or creating a GeoSeries on-the-fly.\n\n\n\n\n\n\nCreating geometry on-the-fly\n\n\n\n\n\nThis would be one option:\nextent = gpd.GeoSeries([airbnb.unary_union.convex_hull], crs=airbnb.crs)\n\n\n\n\n\n\n\n\n\n\n\nData cleaning\n\n\n\nDon’t forget to remove outliers. Note that the price is now in CZK, not in GBP, as it was in the case of Edinburgh.\n\n\n\nPlay with different interpolation methods and try to understand the differences.\nTest how KNeighborsRegressor results differ when changing the number of neighbours.\nDo you understand the optimal parameters of Kriging?\nCan you figure out how to do Simple Kriging instead of Ordinary Kriging covered in the hands-on section?",
    "crumbs": [
      "Interpolation",
      "What is in between?"
    ]
  },
  {
    "objectID": "autocorrelation/concepts.html",
    "href": "autocorrelation/concepts.html",
    "title": "Explore space!",
    "section": "",
    "text": "Slides from the talk about the concept of exploratory spatial data analysis and spatial autocorrelation.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Explore space!"
    ]
  },
  {
    "objectID": "autocorrelation/concepts.html#acknowledgements",
    "href": "autocorrelation/concepts.html#acknowledgements",
    "title": "Explore space!",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Explore space!"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html",
    "href": "autocorrelation/hands_on.html",
    "title": "Spatial autocorrelation",
    "section": "",
    "text": "In the last section, you learned how to encode spatial relationships between geometries into weights matrices represented by Graph objects and started touching on spatial autocorrelation with spatial lag and Moran plot. This section explores spatial autocorrelation further in its global and local variants.\nSpatial autocorrelation has to do with the degree to which the similarity in values between observations in a dataset is related to the similarity in locations of such observations. Not completely unlike the traditional correlation between two variables -which informs us about how the values in one variable change as a function of those in the other- and analogous to its time-series counterpart -which relates the value of a variable at a given point in time with those in previous periods-, spatial autocorrelation relates the value of the variable of interest in a given location with values of the same variable in surrounding locations.\nA key idea in this context is that of spatial randomness: a situation in which the location of observation gives no information whatsoever about its value. In other words, a variable is spatially random if it is distributed following no discernible pattern over space. Spatial autocorrelation can thus be formally defined as the “absence of spatial randomness”, which gives room for two main classes of autocorrelation, similar to the traditional case: positive spatial autocorrelation, when similar values tend to group together in similar locations; and negative spatial autocorrelation, in cases where similar values tend to be dispersed and further apart from each other.\nIn this session, you will learn how to explore spatial autocorrelation in a given dataset, interrogating the data about its presence, nature, and strength. To do this, you will use a set of tools collectively known as Exploratory Spatial Data Analysis (ESDA), specifically designed for this purpose. The range of ESDA methods is very wide and spans from less sophisticated approaches like choropleths and general table querying to more advanced and robust methodologies that include statistical inference and explicit recognition of the geographical dimension of the data. The purpose of this session is to dip your toes into the latter group.\nESDA techniques are usually divided into two main groups: tools to analyse global, and local spatial autocorrelation. The former considers the overall trend that the location of values follows and makes possible statements about the degree of clustering in the dataset. Do values generally follow a particular pattern in their geographical distribution? Are similar values closer to other similar values than you would expect from pure chance? These are some of the questions that tools for global spatial autocorrelation allow to answer. You will practice with global spatial autocorrelation on the Join Counts statistic and Moran’s \\(I\\) statistic.\nTools for local spatial autocorrelation instead focus on spatial instability: the departure of parts of a map from the general trend. The idea here is that, even though there is a given trend for the data in terms of the nature and strength of spatial association, some particular areas can diverge quite substantially from the general pattern. Regardless of the overall degree of concentration in the values, you can observe pockets of unusually high (low) values close to other high (low) values in what you will call hot (cold) spots. Additionally, it is also possible to observe some high (low) values surrounded by low (high) values, and you will name these “spatial outliers”. The main technique you will review in this session to explore local spatial autocorrelation is the Local Indicators of Spatial Association (LISA).\nimport geopandas as gpd\nimport esda\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom libpysal import graph",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#data",
    "href": "autocorrelation/hands_on.html#data",
    "title": "Spatial autocorrelation",
    "section": "Data",
    "text": "Data\nFor this session, you will look at the election data. In particular, the results of the second round of the presidential elections in Czechia in 2023, between Petr Pavel and Andrej Babiš, on a level of municipalities. Each polygon has a percentage of votes for either of the candidates attached, as well as some additional information. Election data are provided by the Czech Statistical Office, and geometries are retrieved from ČÚZK. The dataset is preprocessed for the purpose of this course. If you want to see how the table was created, a notebook is available here.\nTo make things easier, you will read data from a file posted online, so you do not need to download any dataset:\n\nelections = gpd.read_file(\n    \"https://martinfleischmann.net/sds/autocorrelation/data/cz_elections_2023.gpkg\"\n)\n1elections = elections.set_index(\"name\")\n2elections.explore(\n3    \"PetrPavel\",\n4    cmap=\"coolwarm\",\n5    vmin=0,\n    vmax=100,\n6    prefer_canvas=True,\n7    tiles=\"CartoDB Positron\",\n)\n\n\n1\n\nUse the name of each municipality as an index. It will help you link them to the weights matrix.\n\n2\n\nCreate a plot to explore the data.\n\n3\n\n\"PetrPavel\" is the name of the column with the proportions of votes for Petr Pavel.\n\n4\n\nUse \"coolwarm\" divergent colormap to distinguish between municipalities where Petr Pavel won and those where Andrej Babiš did.\n\n5\n\nNormalise the colormap between 0 and 100 to ensure that the split between blue and red is at 50%.\n\n6\n\nWith larger tables, using Canvas rendering instead of the default one is helpful.\n\n7\n\nUse less intense background tiles than the default OpenStreetMap.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nelections = gpd.read_file(\n    \"cz_elections_2023.gpkg\",\n)",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#spatial-weights-refresher",
    "href": "autocorrelation/hands_on.html#spatial-weights-refresher",
    "title": "Spatial autocorrelation",
    "section": "Spatial weights refresher",
    "text": "Spatial weights refresher\nYou already know how to work with the spatial weights matrices from the previous session. In this case, you will need to create queen contiguity weights, which consider two observations as neighbours if they share at least one point of their boundary. In other words, for a pair of municipalities in the dataset to be considered neighbours under this \\(W\\), they must be sharing borders or “touching” each other to some degree.\nTechnically speaking, you will approach building the contiguity matrix in the same way you did before. You will begin with a GeoDataFrame and pass it on to the queen contiguity weights builder in libpysal. You will also make sure your table of data is previously indexed on the municipality name, so the \\(W\\) is also indexed on that form.\n\n1contiguity = graph.Graph.build_contiguity(elections, rook=False)\n\n\n1\n\nSince the default would be Rook contiguity, you set rook=False.\n\n\n\n\nNow, the contiguity object you have is the same type as any other one you have created. As such, you can inspect it in the same way. For example, you can check who is a neighbour of observation Hrazany:\n\ncontiguity[\"Hrazany\"]\n\nneighbor\nHrejkovice                     1\nChyšky                         1\nKovářov                        1\nMilevsko                       1\nPetrovice (Příbram, 541044)    1\nName: weight, dtype: int64\n\n\nSince you will be dealing with spatial lags, it may be wise to row-standardise the matrix.\n\ncontiguity_r = contiguity.transform(\"r\")\n\nNow, because you have row-standardize them, the weight given to each of the five neighbours is 0.2, which equals one.\n\ncontiguity_r[\"Hrazany\"]\n\nneighbor\nHrejkovice                     0.2\nChyšky                         0.2\nKovářov                        0.2\nMilevsko                       0.2\nPetrovice (Příbram, 541044)    0.2\nName: weight, dtype: float64",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#spatial-lag-refresher",
    "href": "autocorrelation/hands_on.html#spatial-lag-refresher",
    "title": "Spatial autocorrelation",
    "section": "Spatial lag refresher",
    "text": "Spatial lag refresher\nYou also know what spatial lag is. Once you have the data and the spatial weights matrix ready, you can start by computing the spatial lag of the percentage of votes that went to the winning candidate, Petr Pavel. Remember that the spatial lag is the product of the spatial weights matrix and a given variable. If \\(W\\) is row-standardized, the result amounts to the average value of the variable in the neighbourhood of each observation.\nWe can calculate the spatial lag for the variable \"PetrPavel\" and store it directly in the main table with the following line of code:\n\nelections['PP_lag'] = contiguity_r.lag(elections[\"PetrPavel\"])\nelections.head()\n\n\n\n\n\n\n\n\nPetrPavel\nAndrejBabis\nnationalCode\nsourceOfName\ngeometry\nPP_lag\n\n\nname\n\n\n\n\n\n\n\n\n\n\nAbertamy\n62.98\n37.01\n554979\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-849678.97 -996811.24, -849429...\n65.560000\n\n\nAdamov (Blansko, 581291)\n57.17\n42.82\n581291\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-590872.42 -1148832.36, -59116...\n66.058333\n\n\nAdamov (České Budějovice, 535826)\n65.17\n34.82\n535826\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-748969.5 -1162820.89, -749180...\n64.945000\n\n\nAdamov (Kutná Hora, 531367)\n53.84\n46.15\n531367\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-677775.47 -1077800.05, -67769...\n51.315000\n\n\nAdršpach\n62.18\n37.81\n547786\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-620084.55 -999987.8, -620131....\n53.143333\n\n\n\n\n\n\n\nThe way to interpret the spatial lag (PP_lag) for, say, the first observation is as follows: Abertamy, where Petr Pavel received 62.98%, is surrounded by neighbouring municipalities where, on average, more than 65% of the electorate also voted for him. For the purpose of illustration, you can, in fact, check this is correct by querying the spatial weights matrix to find out Abertamy’s neighbours:\n\ncontiguity_r['Abertamy']\n\nneighbor\nBoží Dar                          0.25\nJáchymov                          0.25\nMerklín (Karlovy Vary, 555363)    0.25\nPernink                           0.25\nName: weight, dtype: float64\n\n\nAnd then checking their values:\n\nneis = elections.loc[contiguity_r['Abertamy'].index, \"PetrPavel\"]\nneis\n\nneighbor\nBoží Dar                          89.09\nJáchymov                          53.88\nMerklín (Karlovy Vary, 555363)    50.42\nPernink                           68.85\nName: PetrPavel, dtype: float64\n\n\nAnd the average value, which you saw in the spatial lag is 65.56, can be calculated as follows:\n\nneis.mean()\n\n65.56\n\n\nFor some of the techniques you will see below, it makes more sense to operate with the standardised version of a variable rather than the raw one. Standardising means subtracting the average value and dividing it by the standard deviation. This can be done easily with a bit of basic algebra in pandas:\n\nelections[\"PP_std\"] = (\n    elections[\"PetrPavel\"] - elections[\"PetrPavel\"].mean()\n) / elections[\"PetrPavel\"].std()\n\nFinally, to be able to explore the spatial patterns of the standardised values, also called sometimes \\(z\\) values, you need to create its spatial lag:\n\nelections[\"PP_std_lag\"] = contiguity_r.lag(elections[\"PP_std\"])",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#global-spatial-autocorrelation",
    "href": "autocorrelation/hands_on.html#global-spatial-autocorrelation",
    "title": "Spatial autocorrelation",
    "section": "Global spatial autocorrelation",
    "text": "Global spatial autocorrelation\nSpatial autocorrelation is measured differently depending on the type of data. For boolean (True or False) variables, you can use the Join Counts statistic, while for continuous variables, you can use Moran’s \\(I\\). Let’s start with the boolean case.\n\nJoin Counts for boolean variables\nThe elections dataset does not contain any boolean variable, but it is easy to create one representing whether Petr Pavel lost in a municipality or not.\n\n1elections[\"PP_winner\"] = (elections[\"PetrPavel\"] &lt; 50).astype(int)\nelections.head()\n\n\n1\n\nGet a mask with True and False values (elections[\"PetrPavel\"] &gt; 50) and convert it to 1 and 0, which is what Join Counts expect.\n\n\n\n\n\n\n\n\n\n\n\nPetrPavel\nAndrejBabis\nnationalCode\nsourceOfName\ngeometry\nPP_lag\nPP_std\nPP_std_lag\nPP_winner\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbertamy\n62.98\n37.01\n554979\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-849678.97 -996811.24, -849429...\n65.560000\n0.787382\n1.012756\n0\n\n\nAdamov (Blansko, 581291)\n57.17\n42.82\n581291\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-590872.42 -1148832.36, -59116...\n66.058333\n0.279852\n1.056288\n0\n\n\nAdamov (České Budějovice, 535826)\n65.17\n34.82\n535826\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-748969.5 -1162820.89, -749180...\n64.945000\n0.978688\n0.959033\n0\n\n\nAdamov (Kutná Hora, 531367)\n53.84\n46.15\n531367\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-677775.47 -1077800.05, -67769...\n51.315000\n-0.011039\n-0.231609\n0\n\n\nAdršpach\n62.18\n37.81\n547786\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-620084.55 -999987.8, -620131....\n53.143333\n0.717498\n-0.071896\n0\n\n\n\n\n\n\n\nYou will be dealing with data that looks something like this now:\n\n_ = elections.plot(\"PP_winner\", cmap=\"binary\", linewidth=.1, edgecolor=\"grey\")\n\n\n\n\nBoolean representation of the result\n\n\n\n\nSince you are looking for spatial autocorrelation, you can already guess this will be a clear case since there are large clusters of black and white municipalities. However, your (even educated) guess is not enough. Instead, you can use the Join Count statistic. Its principle is simple. Given a checkboard with black (0) and white (1) cells, you can count how many times black is next to another black (BB), how many times white is next to white (WW) and how many times there are black-white relationships (BW). The prevalence of BB and WW indicates positive autocorrelation, while the prevalence of BW indicates a negative one. The significance is then derived from comparing how many BB, WW and BW occurrences you could expect under complete spatial randomness.\nThe weights for Join Counts are expected to be binary. So you could either use the original contiguity weights, which are binary by default, or transform contiguity_r to binary. You can then measure the statistics using the Join_Counts class from esda.\n\n1jc = esda.Join_Counts(\n2    elections[\"PP_winner\"],\n3    contiguity.to_W(),\n)\n\n\n1\n\nesda.Join_Counts will compute all you will need.\n\n2\n\nPass in a Series of the (binary) variable of interest.\n\n3\n\nAnd the spatial weights matric. Since contiguity is using the new Graph and esda hasn’t been updated yet, you need to convert it to the older W object.\n\n\n\n\nThe results are all stored in the jc object. You can ask for the observed number of black-black relations:\n\njc.bb\n\n3700.0\n\n\nOr for white-white relations.\n\njc.ww\n\n9679.0\n\n\nAnd the remaining black-white relations.\n\njc.bw\n\n5066.0\n\n\nThe total number of joins, composed of all three options summed together, is available as .J.\n\njc.J\n\n18445.0\n\n\nThe key aspect of the statistic is the comparison of the number of observed BB and BW joins with that coming from simulated randomness. If the variable was purely random, the number of BB joins would be roughly:\n\njc.mean_bb\n\n2207.7937937937936\n\n\nAnd the number of BW joins would be:\n\njc.mean_bw\n\n8354.253253253253\n\n\nGiven the simulated values are nowhere close to the observed counts, you can assume an existence of positive spatial autocorrelation. You can also retrieve the simulated pseudo-\\(p\\)-values indicating significance:\n\njc.p_sim_bb\n\n0.001\n\n\n\n\n\n\n\n\nMore information from Join_Counts\n\n\n\nThe Join_Counts class includes much more than these. Explore them yourself!\n\n\n\n\nMoran Plot\nWhen dealing with continuous variables, the first indication of spatial autocorrelation can be obtained using the Moran plot. You already know how to create one, so let’s have a look at what it looks like in this case based on the standardised values you made above.\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nsns.regplot(\n    x=\"PP_std\",\n    y=\"PP_std_lag\",\n    data=elections,\n    marker=\".\",\n1    scatter_kws={\"alpha\": 0.2},\n    line_kws=dict(color=\"lightcoral\")\n)\nplt.axvline(0, c=\"black\", alpha=0.5)\nplt.axhline(0, c=\"black\", alpha=0.5)\n2plt.text(2.3, 2.7, \"High-high\", fontsize=10)\nplt.text(2.3, -2.7, \"High-low\", fontsize=10)\nplt.text(-4.4, 2.7, \"Low-high\", fontsize=10)\nplt.text(-4.4, -2.7, \"Low-low\", fontsize=10);\n\n\n1\n\nMake points semi-transparent to mitigate their density.\n\n2\n\nAnnotate different quadrants.\n\n\n\n\n\n\n\n\n\n\nFigure 1: Moran Plot\n\n\n\n\n\nThe figure above displays the relationship between the standardised percentage that voted for Petr Pavel (\"PP_std\") and its spatial lag, which, because the \\(W\\) that was used is row-standardized, can be interpreted as the average percentage that voted to Petr Pavel in the surrounding areas of a given municipality. In order to guide the interpretation of the plot, a linear fit is also included in the post. This line represents the best linear fit to the scatter plot or, in other words, the best way to represent the relationship between the two variables as a straight line.\nThe plot displays a positive relationship between both variables. This is associated with the presence of positive spatial autocorrelation: similar values tend to be located close to each other. This means that the overall trend is for high values to be close to other high values, and for low values to be surrounded by other low values. This, however, does not mean that this is only situation in the dataset: there can, of course, be particular cases where high values are surrounded by low ones, and vice versa. But it means that if you had to summarise the main pattern of the data in terms of how clustered similar values are, the best way would be to say they are positively correlated and, hence, clustered over space.\nIn the context of the example, this can be interpreted along the lines of: municipalities display positive spatial autocorrelation in the way they voted in the presidential elections. This means that municipalities with a high percentage of Pavel’s voters tend to be located near other municipalities where a significant share of the electorate also voted for him and vice versa.\n\n\nMoran’s \\(I\\)\nThe Moran Plot is an excellent tool to explore the data and understand to which degree values are clustered over space. However, because it is a graphical device, it is sometimes hard to concisely condense its insights. For these cases, a good approach is to come up with a statistical measure that summarises the figure. This is exactly what Moran’s \\(I\\) is meant to do.\nVery much in the same way the mean summarises a crucial element of the distribution of values in a non-spatial setting, so does Moran’s \\(I\\) for a spatial dataset. Continuing the comparison, you can think of the mean as a single numerical value summarising a histogram or a kernel density plot. Similarly, Moran’s \\(I\\) captures much of the essence of the Moran Plot. In fact, there is an even closer connection between the two: the value of Moran’s \\(I\\) corresponds with the slope of the linear fit overlayed on top of the Moran Plot.\nIn order to calculate Moran’s \\(I\\) in your dataset, you can call a specific function in PySAL’s ‘esda’ module directly:\n\n1mi = esda.Moran(elections['PetrPavel'], contiguity_r.to_W())\n\n\n1\n\nMoran assumes a row-standardised matrix in the old W format. Note how you do not need to use the standardised version of the variable in this context, as you will not represent it visually.\n\n\n\n\nThe class esda.Moran creates an object that contains much more information than the actual statistic. If you want to retrieve the value of the statistic, you can do it this way:\n\nmi.I\n\n0.5381167295003768\n\n\nThe other bit of information you will extract from Moran’s \\(I\\) relates to statistical inference: How likely is the pattern you observe in the map and Moran’s \\(I\\) captures in its value to be generated by an entirely random process? If you consider the same variable but shuffled its locations randomly, would you obtain a map with a similar characteristics?\nThe specific details of the mechanism to calculate this are beyond the scope of the session, but it is important to know that a small enough \\(p\\)-value associated with the Moran’s \\(I\\) of a map allows you to reject the hypothesis that the map is random. In other words, you can conclude that the map displays more spatial patterns than you would expect if the values had been randomly allocated to a particular location.\nThe most reliable \\(p\\)-value for Moran’s \\(I\\) can be found in the attribute .p_sim:\n\nmi.p_sim\n\n0.001\n\n\nThat is just 0.1%, and, by standard terms, it would be considered statistically significant. You can quickly elaborate on its intuition. What that 0.001 (or 0.1%) means that if you generated a large number of maps with the same values but randomly allocated over space, and calculated the Moran’s \\(I\\) statistic for each of those maps, only 0.1% of them would display a larger (absolute) value than the one you obtain from the real data and the other 99.9% of the random maps would receive a smaller (absolute) value of Moran’s \\(I\\). If you remember again, the value of Moran’s \\(I\\) can also be interpreted as the slope of the Moran Plot, what you have is that, in this case, the particular spatial arrangement of values for Pavel’s votes is more concentrated than if the values had been allocated following a completely spatially random process, hence the statistical significance.\nAs a first step, the global autocorrelation analysis can teach us that observations do seem to be positively correlated over space. In terms of your initial goal to find spatial structure in the attitude towards elections, this view seems to align: if the vote had no such structure; it should not show a pattern over space -technically, it would show a random one.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#local-spatial-autocorrelation",
    "href": "autocorrelation/hands_on.html#local-spatial-autocorrelation",
    "title": "Spatial autocorrelation",
    "section": "Local Spatial autocorrelation",
    "text": "Local Spatial autocorrelation\nMoran’s \\(I\\) is a good tool to summarise a dataset into a single value that informs about its degree of clustering. However, it is not an appropriate measure to identify areas within the map where specific values are located. In other words, Moran’s \\(I\\) can tell us values are clustered overall, but it will not inform us about where the clusters are. For that purpose, you need to use a local measure of spatial autocorrelation. Local measures consider every single observation in a dataset and operate on them, as opposed to on the overall data, as global measures do. Because of that, they are not good at summarising a map, but they allow you to obtain further insight.\nIn this session, you will consider Local Indicators of Spatial Association (LISAs), a local counterpart of global measures like Moran’s \\(I\\). At the core of these methods is a classification of the observations in a dataset into four groups derived from the Moran Plot: high values surrounded by high values (HH), low values nearby other low values (LL), high values among low values (HL), and vice versa (LH). Each of these groups are typically called “quadrants”. An illustration of where each of these groups falls into the Moran Plot can be seen in the Figure 1 above.\nSo far, you have classified each observation in the dataset depending on its value and that of its neighbours. This is only halfway into identifying areas of unusual concentration of values. To know whether each of the locations is a statistically significant cluster of a given kind, you again need to compare it with what you would expect if the data were allocated in a completely random way. After all, by definition, every observation will be of one kind or another, based on the comparison above. However, what you are interested in is whether the strength with which the values are concentrated is unusually high.\nThis is exactly what LISAs are designed to do. As before, a more detailed description of their statistical underpinnings is beyond the scope in this context, but you will try to shed some light on the intuition of how they go about it. The core idea is to identify cases in which the comparison between the value of an observation and the average of its neighbours is either more similar (HH, LL) or dissimilar (HL, LH) than you would expect from pure chance. The mechanism to do this is similar to the one in the global Moran’s \\(I\\), but applied in this case to each observation, resulting in as many statistics as original observations.\nLISAs are widely used in many fields to identify clusters of values in space. They are a very useful tool that can quickly return areas in which values are concentrated and provide suggestive evidence about the processes that might be at work. For that, they have a prime place in the exploratory toolbox. Examples of contexts where LISAs can be useful include identification of spatial clusters of poverty in regions, detection of ethnic enclaves, delineation of areas of particularly high/low activity of any phenomenon, etc.\nIn Python, you can calculate LISAs in a very streamlined way thanks to esda:\n\nlisa = esda.Moran_Local(elections['PetrPavel'], contiguity_r.to_W())\n\nAll you need to pass is the variable of interest -the percentage of Pavel’s votes- and the spatial weights that describe the neighbourhood relations between the different observation that make up the dataset.\nBecause of their very nature, looking at the numerical result of LISAs is not always the most useful way to exploit all the information they can provide. Remember that you are calculating a statistic for every observation in the data, so it will be difficult to extract any meaningful pattern if you have many of them. Instead, what is typically done is to create a map, a cluster map as it is usually called, that extracts the significant observations (those that are highly unlikely to have come from pure chance) and plots them with a specific col or depending on their quadrant category.\nAll of the needed pieces are contained inside the lisa object you have created above. But, to make the map-making more straightforward, it is convenient to pull them out and insert them in the main data table, elections:\n\n1elections.loc[lisa.p_sim &lt; 0.05, 'cluster'] = lisa.q[lisa.p_sim &lt; 0.05]\n2elections[\"cluster\"] = elections[\"cluster\"].fillna(0)\n3elections[\"cluster\"] = elections[\"cluster\"].map(\n    {\n        0: \"Not significant\",\n        1: \"High-high\",\n        2: \"Low-high\",\n        3: \"Low-low\",\n        4: \"High-low\",\n    }\n)\nelections.head()\n\n\n1\n\nUse lisa.p_sim &lt; 0.05 as a filter to assign a quadrant from lisa.q only to observations that can be considered significant.\n\n2\n\nFill the remaining - non-significant - observations with 0.\n\n3\n\nReplace the numerical codes of quadrants with spelled-out versions.\n\n\n\n\n\n\n\n\n\n\n\nPetrPavel\nAndrejBabis\nnationalCode\nsourceOfName\ngeometry\nPP_lag\nPP_std\nPP_std_lag\nPP_winner\ncluster\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbertamy\n62.98\n37.01\n554979\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-849678.97 -996811.24, -849429...\n65.560000\n0.787382\n1.012756\n0\nHigh-high\n\n\nAdamov (Blansko, 581291)\n57.17\n42.82\n581291\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-590872.42 -1148832.36, -59116...\n66.058333\n0.279852\n1.056288\n0\nHigh-high\n\n\nAdamov (České Budějovice, 535826)\n65.17\n34.82\n535826\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-748969.5 -1162820.89, -749180...\n64.945000\n0.978688\n0.959033\n0\nHigh-high\n\n\nAdamov (Kutná Hora, 531367)\n53.84\n46.15\n531367\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-677775.47 -1077800.05, -67769...\n51.315000\n-0.011039\n-0.231609\n0\nNot significant\n\n\nAdršpach\n62.18\n37.81\n547786\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-620084.55 -999987.8, -620131....\n53.143333\n0.717498\n-0.071896\n0\nNot significant\n\n\n\n\n\n\n\nSimilarly as with global Moran’s \\(I\\), esda is automatically computing a \\(p\\)-value for each LISA. Because not every observation represents a statistically significant one, you want to identify those with a \\(p\\)-value small enough that it rules out the possibility of obtaining a similar situation from pure chance. Following a similar reasoning as with global Moran’s \\(I\\), you select 5% as the threshold for statistical significance. To identify these values, you use lisa.p_sim &lt; 0.05 to create a mask, that contains True if the \\(p\\)-value of the observation satisfies the condition, and False if otherwise. Then, you can assign the actual quadrant and drop that are not significant.\nYou can quickly map these results using another PySAL module called splot.\n\nfrom splot.esda import lisa_cluster, moran_scatterplot\n\n_ = lisa_cluster(lisa, elections)\n\n\n\n\nLISA clusters\n\n\n\n\n\n\n\n\n\n\nPlotting LISA manually\n\n\n\n\n\nIf you want to have more control over what is being displayed and how each component is presented, you can “cook” the plot ourselves:\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nelections.loc[elections[\"cluster\"] == \"Not significant\"].plot(ax=ax, color=\"lightgrey\")\nelections.loc[(elections[\"cluster\"] == \"High-high\")].plot(ax=ax, color=\"#d7191c\")\nelections.loc[(elections[\"cluster\"] == \"Low-low\")].plot(ax=ax, color=\"#2c7bb6\")\nelections.loc[(elections[\"cluster\"] == \"Low-high\")].plot(ax=ax, color=\"#abd9e9\")\nelections.loc[(elections[\"cluster\"] == \"High-low\")].plot(ax=ax, color=\"#fdae61\");\n\n\n\n\n\n\n\n\n\n\n\nThe map above displays the LISA results of the presidential elections. In bright red, you find those municipalities with an unusual concentration of high levels of Pavel’s voters also surrounded by high levels of his voters. This corresponds with areas in the Prague Metropolitan region, around other large cities like Pilsen or Brno and some other areas. On the other hand, areas in the dark blue voted against Pavel, similarly to their surrounding municipalities. In orange, you find the first type of spatial outliers. These are areas with high Pavel’s gain but surrounded by areas voting for Babiš (e.g. Mariánské Lázně). Finally, in light blue, you find the other type of spatial outlier: municipalities with low Pavel’s support surrounded by other municipalities with high support.\n\n\n\n\n\n\nExplore LISA clusters interactively\n\n\n\nTry elections.explore(\"cluster\", prefer_canvas=True) to create an interactive map of LISA cluster for easier exploration.\n\n\nThe substantive interpretation of a LISA map needs to relate its output to the original intention of the analyst who created the map. In this case, your original idea was to explore the spatial structure of support of Petr Pavel. The LISA proves a fairly useful tool in this context. Comparing the LISA map above with the choropleth you started with, you can interpret the LISA as a “simplification” of the detailed but perhaps too complicated picture in the choropleth that focuses the reader’s attention to the areas that display a particularly high concentration of (dis)similar values, helping the spatial structure of the vote emerge in a more explicit way. The result of this highlights the relevance that the cities had in voting for Pavel, as well as the regions of the map where there was a lot less excitement about him.\n\n\n\n\n\n\nLinking map with Moran plot\n\n\n\nsplot also comes with a way of plotting the Moran Plot, allowing you to link both together:\n\n_ = moran_scatterplot(lisa, p=0.05, scatter_kwds={\"s\": 5, \"alpha\":.2})",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#other-options",
    "href": "autocorrelation/hands_on.html#other-options",
    "title": "Spatial autocorrelation",
    "section": "Other options",
    "text": "Other options\nJoin counts and Moran’s methods are not the only ways of computing spatial autocorrelation. esda offers way more, including Geary’s \\(C\\), Getis-Ord \\(G\\), which can both be measured as global or local statistics, and other methods, exposed in a similar way as those you have used today.\n\n\n\n\n\n\nAdditional reading\n\n\n\n\nHave a look at the chapters Global Spatial Autocorrelation and Local Spatial Autocorrelation from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details and some other extensions.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "autocorrelation/hands_on.html#acknowledgements",
    "href": "autocorrelation/hands_on.html#acknowledgements",
    "title": "Spatial autocorrelation",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The code was updated to use the new libpysal.graph module instead of libpysal.weights. The text was slightly adapted to accommodate a different dataset, the module change, and the inclusion of Join counts.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Spatial autocorrelation"
    ]
  },
  {
    "objectID": "course_information/assignment.html",
    "href": "course_information/assignment.html",
    "title": "Assignment",
    "section": "",
    "text": "This course is assessed based on a single final assignment - a computational essay.",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/assignment.html#computational-essay",
    "href": "course_information/assignment.html#computational-essay",
    "title": "Assignment",
    "section": "Computational essay",
    "text": "Computational essay\nA computational essay is an essay whose narrative is supported by code and its results, which are part of the essay. Think of a Jupyter Notebook with cells corresponding to text explaining the process and its results and cells with executed code doing the computation.\n\n\n\n\n\n\nAn example of a computational essay\n\n\n\nOne nice example of a computational essay is the Age Capsule by Dani Arribas-Bel. The code in there is a bit more advanced than what you are asked to do and you will need to include some maps and possibly tables, but you get the gist.\n\n\nThe essay corresponds to a range of 2,500-5,000 words. That does not mean that you have to write that many words. Since you will have to produce not only text (in English or Czech) but also code and its outputs, the following requirements are specified:\n\nThe approximate number of words in Markdown cells is 1,500 (the bibliography, if provided, does not count towards the word count). Try to stay within 20% margin.\nThe approximate number of maps or other graphic outputs is 5 (one output may contain more than one map and will only count as one, but it must be included in the same matplotlib object).\nThe approximate number of tables is 2, where a table is considered an output of a DataFrame automatically rendered by the Notebook.\n\nThe rest of the word count is assumed to be consumed by code.\nYou have two options regarding topics. The first one is to work on your data on the topic of your choice, while the second is a semi-defined task if you prefer that.\n\nDefine your task\nOption one is to come up with your own idea for an essay, supported by data you either already have or can gather from openly available sources.\nThe requirement is to cover:\n\nInitial data exploration and visualisation1\nExploration of a degree of randomness of data (e.g. spatial autocorrelation, point pattern analysis)2\nAt least one other technique of your choice (clustering, interpolation, regression, prediction)3\n\nConsult the second option to get a better sense of the extent.\n\n\n\n\n\n\nEvery topic needs to be approved\n\n\n\nIf you decide to define your own task, the topic and the extent need to be approved by the tutor. Essays on custom topics without prior approval will not be accepted and will be marked with 0%. Reach out via Discord or email to get approval.\n\n\nThis option is recommended for students of Master’s and Postgraduate courses enrolled in MZ340V17.\nThe second option is more defined but still leaves some space for your creativity.\n\n\nA Barcelona case\nYou will take the role of a real-world data scientist tasked to explore a dataset on the city of Barcelona (Spain) and find useful insights for a variety of decision-makers. It does not matter if you have never been to Barcelona. In fact, this will help you focus on what you can learn about the city through the data, without the influence of prior knowledge. Furthermore, the assessment will not be marked based on how much you know about Barcelona but instead on how much you can show you have learned through analysing data.\n\nPart one\nIn the first part, you are asked to provide an overview of the socio-economic structure of Barcelona.\n\nData\nHead to the Open Data BCN data service of Barcelona’s City Hall and download data reflecting two aspects (two variables) of the population structure of the city at the level of census areas (Secció censal in Spanish), find relevant geometry, and link them together.\n\nExplore the spatial distribution of the data using choropleths. Comment on the details of your maps and interpret the results.\nExplore the degree of spatial autocorrelation. Describe the concepts behind your approach and interpret your results.\n\n\n\n\nPart two\nFor this one, you need to pick one of the following three options.\n\nCreate a classification (clustering) of Barcelona based on your socioeconomic data and interpret the results. In the process, answer the following questions:\n\nWhat are the main types of neighbourhoods you identify?\nWhich characteristics help you delineate this typology?\nIf you had to use this classification to target areas in most need, how would you use it? Why?\nHow is the city partitioned by your data?\n\n\nThe other two options share the basics:\n\nDownload listings for Barcelona from Inside Airbnb. You have already used Airbnb data before in the course, so you can refer to the code used there.\nBarcelona is known for its issue with Airbnb density. Visualise the data appropriately and discuss why you have taken your specific approach.\n\n\nAsses the distribution of Airbnbs in Barcelona\n\nAre the Airbnb listings distributed equally across the city? Does it depend on the type of listing or its price?\nCan you create a regionalisation of Barcelona census areas based on the presence of Airbnbs? What does it say about the city?\n\nAsses the relationship between the socio-economic profile of Barcelona and the presence of Airbnb.\n\nUse regression techniques to asses a link between the socio-economic data from part one and the variable of your choice from the Airbnb dataset. Think of a density of listings or an average price.\nDiscuss the implications of the results. What does it mean for policy?",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/assignment.html#submission",
    "href": "course_information/assignment.html#submission",
    "title": "Assignment",
    "section": "Submission",
    "text": "Submission\nThe submission will contain an executed Jupyter Notebook. The code needs to be reproducible. That means that all the data used in the essay need to be available online (and ideally fetched directly from the notebook but a link to a download page is also fine, although data manipulation outside of the Notebook is not allowed) or shared as part of the submission. Any additional Python packages apart from those available in the provided sds environment need to be explicitly specified on top of the notebook. However, it is not expected that you will need it.",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/assignment.html#evalutation-criteria",
    "href": "course_information/assignment.html#evalutation-criteria",
    "title": "Assignment",
    "section": "Evalutation criteria",
    "text": "Evalutation criteria\nThe essay is primarily evaluated on a percentage scale of 0-100. To successfully complete the class, a minimum of 40% is required:\n\n0-15: the code does not work and there is no documentation for it.\n16-39: the code does not work or works but does not lead to the expected result. There is some documentation explaining its logic.\n40-49: the code runs and produces the expected output. There is some documentation explaining its logic.\n50-59: the code runs and produces the expected output. There is extensive documentation explaining its logic.\n60-69: the code runs and produces the expected output. There is extensive documentation, properly formatted, explaining its logic.\n70-79: everything as above, plus the code design includes clear evidence of skills presented in advanced parts of the course (e.g., custom methods, list comprehension, etc.).\n80-100: everything as above, plus the code includes new knowledge that extends/improves the functionality provided to the student (e.g., algorithm optimization, new methods to perform the task, etc.).\n\nThe expected relationship between the score and a final mark (potential change will be discussed ahead):\n\n0-39: 4\n40-49: 3\n50-69: 2\n70-100: 1\n\nThe documentation should be formatted using Markdown syntax, not HTML.",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/assignment.html#acknowledgements",
    "href": "course_information/assignment.html#acknowledgements",
    "title": "Assignment",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe assignment structure is partially derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/assignment.html#footnotes",
    "href": "course_information/assignment.html#footnotes",
    "title": "Assignment",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBased on sessions Introduction - Spatial data.↩︎\nBased on sessions Spatial weights - Point patterns.↩︎\nBased on sessions Clustering) - [Machine learning].↩︎",
    "crumbs": [
      "Course information",
      "Assignment"
    ]
  },
  {
    "objectID": "course_information/infrastructure.html",
    "href": "course_information/infrastructure.html",
    "title": "Infrastructure",
    "section": "",
    "text": "The course does not use any university-specific resources. It is designed to run entirely on students’ machines using solely open-source software.",
    "crumbs": [
      "Course information",
      "Infrastructure"
    ]
  },
  {
    "objectID": "course_information/infrastructure.html#communication",
    "href": "course_information/infrastructure.html#communication",
    "title": "Infrastructure",
    "section": "Communication",
    "text": "Communication\nStudents enrolled in the course at Charles University will be invited to a dedicated Discord server for online discussion. Students are encouraged to use the platform to seek help from peers, share thoughts and tips, and other meaningful contributions the rest of the group can benefit from. Learn from the mistakes of the others.\nThe tutor will be part of the discussion forum but the priority is to help each other, rather than seek guidance outside of class.",
    "crumbs": [
      "Course information",
      "Infrastructure"
    ]
  },
  {
    "objectID": "course_information/infrastructure.html#software-stack",
    "href": "course_information/infrastructure.html#software-stack",
    "title": "Infrastructure",
    "section": "Software stack",
    "text": "Software stack\nThere are many options on how to run Python. You may already have a copy on your machine, you can run it in the browser and install it in a myriad ways. This course uses what is considered a standard for scientific computing based on two key components - a package manager (you will be using conda) and an interface (Jupyter Lab).\nThe basics will be explained in the first lesson but it would be beneficial if you could create an environment before the class.\n\nCreate an environment\nTo run the course material, you will need a Python environment with all the packages for spatial data science installed. Unless you already know how to work with conda or mamba, follow the instructions below.\n\nWindowsmacOS & Linux\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWindows may complain that the app is not recognised. Click More information and you will be able to run the installer.\n\n\n\nDownload miniconda package manager from Anaconda for your operating system.\nExecute the installer and make sure to create start menu shortcuts (there’s a tick box during installation).\nOpen the installed Anaconda Prompt application.\nCreate a Python environment using the following command:\n\nconda env create -f https://martinfleischmann.net/sds/environment.yml\n\nActivate the environment using:\n\nconda activate sds\n\nStart JupyterLab interface:\n\njupyter lab\n\n\n\n\n\n\nImportant\n\n\n\nEnsure that you install miniconda in a directory without any special characters in the name. It may occasionally break things.\n\n\n\n\n\nDownload miniconda package manager from Anaconda for your operating system and install it.\nOpen Terminal application.\nCreate a Python environment using the following command:\n\nconda env create -f https://martinfleischmann.net/sds/environment.yml\n\nActivate the environment using:\n\nconda activate sds\n\nStart JupyterLab interface:\n\njupyter lab\n\n\n\nA Jupyter Lab interface will show up in your browser. If it hasn’t opened automatically, copy the link printed in your command line/terminal.\n\n\nClosing Jupyter Lab\nThe best way to close the Jupyter Lab and shut down its process running in the terminal is to use the Jupyter Lab’s interface. In the menu find File &gt; Shut Down.\n\n\n\nShutting down Jupyter Lab\n\n\n\n\nOpening Jupyter Lab next time\nThe steps above are needed only the first time. Once you create the environment, it won’t disappear and you can use it until you don’t delete it. Once you close Jupyter Lab session, you can always start a new one:\n\nWindowsmacOS & Linux\n\n\n\nOpen Anaconda Prompt\nActivate the environment:\n\nconda activate sds\n\nStart JupyterLab interface:\n\njupyter lab\n\n\n\nOpen Terminal\nActivate the environment:\n\nconda activate sds\n\nStart JupyterLab interface:\n\njupyter lab\n\n\n\n\n\n\n\n\n\nAlways activate an environment\n\n\n\nYou should never use conda install in the base environment. Remember to always activate the environment.\n\n\n\n\nPlan B with Google Colab\nIf you are unable to install an environment using the instructions above, you can follow the course using Google Colab. You will just need to install the required packages to your Colab environment. Reach out in class or via Discord if you need to set it up.\n\n\nTroubleshooting\nIn case of any issues related to environment creation, reach out in the class or via Discord.",
    "crumbs": [
      "Course information",
      "Infrastructure"
    ]
  },
  {
    "objectID": "autocorrelation/exercise.html",
    "href": "autocorrelation/exercise.html",
    "title": "Does it correlate?",
    "section": "",
    "text": "In this part, you will try to explore spatial autocorrelation on your own.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Does it correlate?"
    ]
  },
  {
    "objectID": "autocorrelation/exercise.html#scottish-index-of-multiple-deprivation-again",
    "href": "autocorrelation/exercise.html#scottish-index-of-multiple-deprivation-again",
    "title": "Does it correlate?",
    "section": "Scottish Index of Multiple Deprivation again",
    "text": "Scottish Index of Multiple Deprivation again\nIn the exercise on pandas, you have worked with the Scottish Index of Multiple Deprivation (SIMD). Since you learned how to work with spatial data later, there was no geometry assigned. That will change today.\n\nDownload the ESRI Shapefile version of the Scottish Index of Multiple Deprivation 2020 from this link.\nRead it as a GeoDataFrame and assign a column you think would be the best as an index.\n\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nIf the link does not work, please report it and use the backup.\n\n\n\n\nFilter the data to work only with Glasgow.\nCreate contiguity weights based on the reduced dataset.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Does it correlate?"
    ]
  },
  {
    "objectID": "autocorrelation/exercise.html#global-spatial-autocorrelation",
    "href": "autocorrelation/exercise.html#global-spatial-autocorrelation",
    "title": "Does it correlate?",
    "section": "Global spatial autocorrelation",
    "text": "Global spatial autocorrelation\nWith the data prepared like this:\n\nJoin Counts\n\nCreate a binary variable from \"Rankv2\" encoding areas with rank above city-wide mean.\nMeasure Join Counts statistic on your new variable.\nWhat conclusions can you reach from the Join Counts?\n\n\n\nMoran’s \\(I\\)\n\nVisualise the main \"Rankv2\" with a Moran Plot\nCalculate Moran’s \\(I\\)\nWhat conclusions can you reach from the Moran Plot and Moran’s I? What’s the main spatial pattern? Does it agree with Join counts?",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Does it correlate?"
    ]
  },
  {
    "objectID": "autocorrelation/exercise.html#local-spatial-autocorrelation",
    "href": "autocorrelation/exercise.html#local-spatial-autocorrelation",
    "title": "Does it correlate?",
    "section": "Local spatial autocorrelation",
    "text": "Local spatial autocorrelation\nNow that you have a good sense of the overall pattern in the SIMD dataset, let’s move to the local scale:\n\nCalculate LISA statistics for the areas\nMake a map of significant clusters at the 5%\nCan you identify hotspots or coldspots? If so, what do they mean? What about spatial outliers?\n\n\n\n\n\n\n\nWarning\n\n\n\nThe last action is a bit more sophisticated, put all your brain power into it and you’ll achieve it!\n\n\n\nCreate cluster maps for significance levels 1% and 10%; compare them with the one we obtained. What are the main changes? Why?\nCan you create both interactive and static versions of those maps?",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Does it correlate?"
    ]
  },
  {
    "objectID": "autocorrelation/exercise.html#acknowledgements",
    "href": "autocorrelation/exercise.html#acknowledgements",
    "title": "Does it correlate?",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The text was slightly adapted to accommodate a different dataset and the inclusion of Join counts.",
    "crumbs": [
      "Exploratory spatial data analysis",
      "Does it correlate?"
    ]
  },
  {
    "objectID": "autocorrelation/slides.html#questions-that-esda-helps",
    "href": "autocorrelation/slides.html#questions-that-esda-helps",
    "title": "Explore space!",
    "section": "Questions that ESDA helps…",
    "text": "Questions that ESDA helps…"
  },
  {
    "objectID": "autocorrelation/slides.html#spatial-autocorrelation-1",
    "href": "autocorrelation/slides.html#spatial-autocorrelation-1",
    "title": "Explore space!",
    "section": "Spatial Autocorrelation",
    "text": "Spatial Autocorrelation\n\n\nStatistical representation of Tobler’s law\n\n\n\nSpatial counterpart of traditional correlation\n\n\nDegree to which similar values are located in similar locations"
  },
  {
    "objectID": "autocorrelation/slides.html#two-flavours",
    "href": "autocorrelation/slides.html#two-flavours",
    "title": "Explore space!",
    "section": "Two flavours",
    "text": "Two flavours\n\n\nPositive: similar values \\(\\rightarrow\\) similar location (closeby)\n\n\n\nNegative: similar values \\(\\rightarrow\\) disimilar location (further apart)"
  },
  {
    "objectID": "autocorrelation/slides.html#two-scales",
    "href": "autocorrelation/slides.html#two-scales",
    "title": "Explore space!",
    "section": "Two scales",
    "text": "Two scales\n\n\nGlobal: do values tend to be close to other (dis)similar values?\n\n\n\nLocal: are there any specific parts of a map with an extraordinary concentration of (dis)similar values?"
  },
  {
    "objectID": "autocorrelation/slides.html#clustering",
    "href": "autocorrelation/slides.html#clustering",
    "title": "Explore space!",
    "section": "“Clustering”",
    "text": "“Clustering”\n\nOverall trend where the distribution of values follows a particular pattern over space."
  },
  {
    "objectID": "autocorrelation/slides.html#moran-plot",
    "href": "autocorrelation/slides.html#moran-plot",
    "title": "Explore space!",
    "section": "Moran Plot",
    "text": "Moran Plot"
  },
  {
    "objectID": "autocorrelation/slides.html#morans-i",
    "href": "autocorrelation/slides.html#morans-i",
    "title": "Explore space!",
    "section": "Moran’s I",
    "text": "Moran’s I\nFormal test of global spatial autocorrelation\nStatistically identify the presence of clustering in a variable\nSlope of the Moran plot"
  },
  {
    "objectID": "autocorrelation/slides.html#clusters",
    "href": "autocorrelation/slides.html#clusters",
    "title": "Explore space!",
    "section": "“Clusters”",
    "text": "“Clusters”\n\nPockets of spatial instability\n\n\nPortions of a map where values are correlated in a particularly strong and specific way"
  },
  {
    "objectID": "autocorrelation/slides.html#lisas",
    "href": "autocorrelation/slides.html#lisas",
    "title": "Explore space!",
    "section": "LISAs",
    "text": "LISAs\nLocal Indicators of Spatial Association\nStatistical tests for spatial cluster detection\nCompares the observed map with many randomly generated ones to see how likely it is to obtain the observed associations for each location"
  },
  {
    "objectID": "autocorrelation/exercise_answers.html",
    "href": "autocorrelation/exercise_answers.html",
    "title": "Does it correlate?",
    "section": "",
    "text": "Here is one way of getting the solution. There are others, feel free to share yours.\nimport geopandas as gpd\nimport esda\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom libpysal import graph\nRead it as a GeoDataFrame and assign a column you think would be the best as an index.\nsimd = gpd.read_file(\"SG_SIMD_2020.zip\")\nsimd = simd.set_index(\"DataZone\")\nFilter the data to work only with Glasgow.\nIf you check the Excel file in the zip above, you will learn that a column LAName represents Local Authority name. You can use it to filter Glasgow.\nSince the string may be something else than “Glasgow”, let’s find out the right one. You can list all unique names in the LAName column.\nsimd.LAName.unique()\nFrom that you can see that the right string is ‘Glasgow City’. You can use that directly. But if you’d like to know the programmatic way (you can ask chatGPT to explain the code if you need):\nglasgow_name = simd.LAName[simd.LAName.str.contains('Glasgow')].unique()[0]\nglasgow_name\nglasgow = simd[simd.LAName == \"Glasgow City\"]\nCreate contiguity weights based on the reduced dataset.\ncontiguity = graph.Graph.build_contiguity(glasgow)\nCreate a binary variable from \"Rankv2\" encoding areas with rank above city-wide mean.\nmean_rank = glasgow[\"Rankv2\"].mean()\nglasgow[\"better_half\"] = glasgow[\"Rankv2\"] &gt; mean_rank\nMeasure Join Counts statistic on your new variable.\njc = esda.Join_Counts(\n    glasgow[\"better_half\"],\n    contiguity.to_W(),\n)\nLet’s print the results i a nice way. Using a multi-line f-string (google!):\nprint(f\"\"\"BB: {jc.bb}\nWW: {jc.ww}\nBW: {jc.bw}\nJ: {jc.J}\nmean BB: {jc.mean_bb}\nmean BW: {jc.mean_bw}\np_sim BB: {jc.p_sim_bb}\n\"\"\")\nVisualise the main \"Rankv2\" with a Moran Plot\nglasgow['rank_std'] = (\n    glasgow[\"Rankv2\"] - glasgow[\"Rankv2\"].mean()\n) / glasgow[\"Rankv2\"].std()\ncontiguity_r = contiguity.transform(\"r\")\n\nglasgow['rank_lag'] = contiguity_r.lag(glasgow['rank_std'])\nf, ax = plt.subplots(figsize=(6, 6))\nsns.regplot(\n    x=\"rank_std\",\n    y=\"rank_lag\",\n    data=glasgow,\n    marker=\".\",\n    scatter_kws={\"alpha\": 0.2},\n    line_kws=dict(color=\"lightcoral\")\n)\nax.axvline(0, c=\"black\", alpha=0.5)\nax.axhline(0, c=\"black\", alpha=0.5)\nCalculate Moran’s \\(I\\)\nmi = esda.Moran(glasgow['rank_std'], contiguity_r.to_W())\nmi.I\nmi.p_sim\nCalculate LISA statistics for the areas\nlisa = esda.Moran_Local(glasgow['rank_std'], contiguity_r.to_W())\nMake a map of significant clusters at the 5%\nfrom splot.esda import lisa_cluster\n\n_ = lisa_cluster(lisa, glasgow)\nCreate cluster maps for significance levels 1%\n_ = lisa_cluster(lisa, glasgow, p=.01)\nCreate cluster maps for significance levels 10%;\n_ = lisa_cluster(lisa, glasgow, p=.1)\nCan you create both interactive and static versions of those maps?\nglasgow.loc[lisa.p_sim &lt; 0.05, 'cluster'] = lisa.q[lisa.p_sim &lt; 0.05]\nglasgow[\"cluster\"] = glasgow[\"cluster\"].fillna(0)\nglasgow[\"cluster\"] = glasgow[\"cluster\"].map(\n    {\n        0: \"Not significant\",\n        1: \"High-high\",\n        2: \"Low-high\",\n        3: \"Low-low\",\n        4: \"High-low\",\n    }\n)\nm = glasgow.loc[glasgow[\"cluster\"] == \"Not significant\"].explore(color=\"lightgrey\", prefer_canvas=True, tiles=\"CartoDB Positron\")\nglasgow.loc[(glasgow[\"cluster\"] == \"High-high\")].explore(m=m, color=\"#d7191c\")\nglasgow.loc[(glasgow[\"cluster\"] == \"Low-low\")].explore(m=m, color=\"#2c7bb6\")\nglasgow.loc[(glasgow[\"cluster\"] == \"Low-high\")].explore(m=m, color=\"#abd9e9\")\nglasgow.loc[(glasgow[\"cluster\"] == \"High-low\")].explore(m=m, color=\"#fdae61\")"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "interpolation/hands_on.html",
    "href": "interpolation/hands_on.html",
    "title": "Spatial interpolation",
    "section": "",
    "text": "In your life as a spatial data scientist, you will find yourself in a situation where you have plenty of data to work with, just linked to different geometries or representing slightly different locations that you need. When this happens, you need to interpolate the data from one set of geometries, on which the data is shipped, to the other, the one you are interested in.\nAny interpolation method is necessarily an approximation but some are better than others.\nimport geopandas as gpd\nimport tobler\nimport pyinterpolate\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom libpysal import graph\nfrom sklearn import neighbors\nfrom scipy import interpolate\nThis chapter of the course covers two types of interpolation - from one set of polygons to another set of polygons, and from a sparse set of points to other locations in the same area.",
    "crumbs": [
      "Interpolation",
      "Spatial interpolation"
    ]
  },
  {
    "objectID": "interpolation/hands_on.html#areal-interpolation-and-dasymetric-mapping",
    "href": "interpolation/hands_on.html#areal-interpolation-and-dasymetric-mapping",
    "title": "Spatial interpolation",
    "section": "Areal interpolation and dasymetric mapping",
    "text": "Areal interpolation and dasymetric mapping\nThe first use case is the interpolation of data from one set of geometries to the other one, otherwise known as areal interpolation or dasymetric mapping.\n\nData zones and H3\nYou are already familiar with the Scottish Index of Multiple Deprivation, so let’s use it as an example of areal interpolation. Load the subset of SIMD 2020 for the City of Edinburgh.\n\nsimd = gpd.read_file(\n    \"https://martinfleischmann.net/sds/interpolation/data/edinburgh_simd_2020.gpkg\"\n)\nsimd.head(2)\n\n\n\n\n\n\n\n\nDataZone\nDZName\nLAName\nSAPE2017\nWAPE2017\nRankv2\nQuintilev2\nDecilev2\nVigintilv2\nPercentv2\n...\nCrimeRate\nCrimeRank\nHouseNumOC\nHouseNumNC\nHouseOCrat\nHouseNCrat\nHouseRank\nShape_Leng\nShape_Area\ngeometry\n\n\n\n\n0\nS01008417\nBalerno and Bonnington Village - 01\nCity of Edinburgh\n708\n397\n5537\n4\n8\n16\n80\n...\n86\n5392.0\n17\n8\n2%\n1%\n6350.0\n20191.721420\n1.029993e+07\nPOLYGON ((315157.369 666212.846, 315173.727 66...\n\n\n1\nS01008418\nBalerno and Bonnington Village - 02\nCity of Edinburgh\n691\n378\n6119\n5\n9\n18\n88\n...\n103\n5063.0\n7\n10\n1%\n1%\n6650.0\n25944.861787\n2.357050e+07\nPOLYGON ((317816 666579, 318243 666121, 318495...\n\n\n\n\n2 rows × 52 columns\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nsimd = gpd.read_file(\n    \"edinburgh_simd_2020.gpkg\",\n)\n\n\n\nGet an interactive map with one of the variables to get more familiar with the data.\n\nsimd[[\"EmpNumDep\", \"geometry\"]].explore(\"EmpNumDep\", tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThis is the source - data linked to SIMD Data Zones. Let’s now focus on the target geometries. Popular spatial units of analysis are hexagonal grids and Uber’s hierarchical H3 grid especially.\n\n\n\n\n\n\nMore on H3\n\n\n\nH3 grids are a very interesting concept as they often allow for very efficient spatial operations based on known relationships between individual cells (encoded in their index). Check the official documentation if you want to learn more.\nPay specific attention to the meaning of the resolution.\n\n\nYou can create the H3 grid covering the area of Edinburgh using the tobler package.\n\n1grid_8 = tobler.util.h3fy(simd, resolution=8)\ngrid_8.head(2)\n\n\n1\n\nThe h3fy function takes the GeoDataFrame you want to cover and a resolution of the H3 grid. In this case, 8 could be a good choice but feel free to play with other resolutions to see the difference.\n\n\n\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/pyproj/crs/crs.py:1293: UserWarning: You will likely lose important projection information when converting to a PROJ string from another format. See: https://proj.org/faq.html#what-is-the-best-format-for-describing-coordinate-reference-systems\n  proj = self._crs.to_proj4(version=version)\n\n\n\n\n\n\n\n\n\ngeometry\n\n\nhex_id\n\n\n\n\n\n8819727707fffff\nPOLYGON ((316825.323 675489.516, 316361.224 67...\n\n\n8819727563fffff\nPOLYGON ((312415.483 672905.818, 311951.055 67...\n\n\n\n\n\n\n\nLet’s check how the H3 grid overlaps the data zones of SIMD.\n\nm = simd.boundary.explore(tiles=\"CartoDB Positron\")\ngrid_8.boundary.explore(m=m, color=\"red\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSome grid cells are fully within a data zone geometry, some data zones are fully within a single grid cell but overall, there is a lot of partial overlap.\n\n\ntobler and Tobler\nThe task ahead can be done in many ways falling under the umbrella of dasymetric mapping. PySAL has a package designed for areal interpolation called tobler. You have already used it to create the H3 grid but that is only a small utility function included in tobler. The name of the package is a homage to the Waldo R. Tobler, a famous geographer and an author of a Pycnophylactic interpolation covered below\n\n\nSimple areal interpolation\nBut before getting to the Pycnophylactic interpolation, let’s start with the simple case of basic areal interpolation. The logic behind it is quite simple - the method redistributes values from the source geometries to target geometries based on the proportion of area that is shared between each source polygon and each target polygon. It is not a simple join as you would get with sjoin() or overlay() methods from geopandas but it is not far from it. Areal interpolation brings an additional step of taking the values and redistributing them instead of merging. That means that if the source geometry contains a count of 10 people and 40% of the geometry is covered by a target polygon A, 40% by a target polygon B and 20% by a target polygon C, each gets a relevant proportion of the original count (4, 4, and 2). Similarly are treated intensive variables (e.g. a percentage).\nThe function you need to use for this kind of areal interpolation lives in the area_weighted module of tobler and is called simply area_interpolate. Use it to interpolate a subset of data from simd to grid_8.\n\ninterpolated = tobler.area_weighted.area_interpolate(\n1    source_df=simd,\n2    target_df=grid_8,\n3    extensive_variables=[\"EmpNumDep\", \"IncNumDep\"],\n4    intensive_variables=[\"EmpRate\", \"IncRate\"],\n)\ninterpolated.head(2)\n\n\n1\n\nSpecify the source GeoDataFrame.\n\n2\n\nSpecify the target GeoDataFrame.\n\n3\n\nSpecify the list of extensive variables to be interpolated.\n\n4\n\nSpecify the list of intensive variables to be interpolated.\n\n\n\n\n\n\n\n\n\n\n\nEmpNumDep\nIncNumDep\nEmpRate\nIncRate\ngeometry\n\n\nhex_id\n\n\n\n\n\n\n\n\n\n8819727707fffff\n1.006345\n1.697727\n3.885038\n4.114962\nPOLYGON ((316825.323 675489.516, 316361.224 67...\n\n\n8819727563fffff\n1.846515\n4.454234\n4.074600\n7.037300\nPOLYGON ((312415.483 672905.818, 311951.055 67...\n\n\n\n\n\n\n\nThe resulting interpolated GeoDataFrame contains the selected variables from simd but linked to the grid_8 geometries. You can check the result on a map and compare it to the one above.\n\ninterpolated.explore(\"EmpNumDep\", tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nRaster masking\n\n\n\nYou may have noticed that even if the actual location where a grid cell lies does not contain any buildings, it gets a proportion of data based on the area of overlap. That may not be an issue in some cases but if you want to be more precise, you can use a raster layer as a mask to further influence the redistribution of values. See the documentation for details.\n\n\n\n\nPycnophylactic interpolation\nAnother option is to use Pycnophylactic interpolation (Tobler 1979), a method that creates a smooth contour map of the original data while preserving the volume but avoiding sharp boundaries and uses this to interpolate values onto the target polygons. Unlike area_interpolate, pycno_interpolate does not handle intensive variables.\n\npycno_8 = tobler.pycno.pycno_interpolate(\n1    source_df=simd,\n2    target_df=grid_8,\n3    variables=[\"EmpNumDep\", \"IncNumDep\"],\n4    cellsize=200,\n)\n\n\n1\n\nSpecify the source GeoDataFrame.\n\n2\n\nSpecify the target GeoDataFrame.\n\n3\n\nSpecify the list of (extensive) variables to be interpolated.\n\n4\n\nThe size of a cell of the intermediate raster (see below).\n\n\n\n\nWARNING: nan_treatment='interpolate', however, NaN values detected post convolution. A contiguous region of NaN values, larger than the kernel size, are present in the input array. Increase the kernel size to avoid this. [astropy.convolution.convolve]\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:134: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = (val - nansum(data[mask])) / mask.sum()\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:145: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = val / nansum(data[mask])\nWARNING: nan_treatment='interpolate', however, NaN values detected post convolution. A contiguous region of NaN values, larger than the kernel size, are present in the input array. Increase the kernel size to avoid this. [astropy.convolution.convolve]\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:134: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = (val - nansum(data[mask])) / mask.sum()\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:145: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = val / nansum(data[mask])\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:145: RuntimeWarning: invalid value encountered in scalar divide\n  correct = val / nansum(data[mask])\n\n\nFrom the user perspective, both area_interpolate and pycno_interpolate look similar but the results will likely differ.\n\npycno_8.explore(\"EmpNumDep\", tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nFor a better understanding of the method, you can look at the intermediate array of smoothed values by accessing the pycno function from the depth of the tobler.pycno module.\n\narr, _, _ = tobler.pycno.pycno.pycno(\n    gdf=simd, value_field=\"EmpNumDep\", cellsize=200, verbose=False\n)\n\nWARNING: nan_treatment='interpolate', however, NaN values detected post convolution. A contiguous region of NaN values, larger than the kernel size, are present in the input array. Increase the kernel size to avoid this. [astropy.convolution.convolve]\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:134: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = (val - nansum(data[mask])) / mask.sum()\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/tobler/pycno/pycno.py:145: RuntimeWarning: divide by zero encountered in scalar divide\n  correct = val / nansum(data[mask])\n\n\nThe function returns a numpy array of smoothed values and two pieces of information related to CRS, that are not relevant here. The array itself can be explored directly using matplotlib:\n\n_ = plt.imshow(arr)\n\n\n\n\nPycnophylactic smooth raster\n\n\n\n\n\n\n\n\n\n\nTheory behind\n\n\n\nFor more details on the theory behind both areal and Pycnophylactic interpolation methods, check this resource by Comber and Zeng (2022).",
    "crumbs": [
      "Interpolation",
      "Spatial interpolation"
    ]
  },
  {
    "objectID": "interpolation/hands_on.html#point-interpolation",
    "href": "interpolation/hands_on.html#point-interpolation",
    "title": "Spatial interpolation",
    "section": "Point interpolation",
    "text": "Point interpolation\nAnother case of interpolation is an interpolation of values from a sparse set of points to any other location in between. Let’s explore our options based on the Airbnb data in Edinburgh.\n\nAirbnb in Edinburgh\nYou are already familiar with the Airbnb data from the Is there a pattern? exercise. The dataset for Edinburgh looks just like that for Prague you used before. The only difference is that, for this section, it is pre-processed to create geometry and remove unnecessary columns.\n\nairbnb = gpd.read_file(\n    \"https://martinfleischmann.net/sds/interpolation/data/edinburgh_airbnb_2023.gpkg\"\n)\nairbnb.head()\n\n\n\n\n\n\n\n\nid\nbedrooms\nproperty_type\nprice\ngeometry\n\n\n\n\n0\n15420\n1.0\nEntire rental unit\n$126.00\nPOINT (325921.137 674478.931)\n\n\n1\n790170\n2.0\nEntire condo\n$269.00\nPOINT (325976.36 677655.252)\n\n\n2\n24288\n2.0\nEntire loft\n$95.00\nPOINT (326069.186 673072.913)\n\n\n3\n821573\n2.0\nEntire rental unit\n$172.00\nPOINT (326748.646 674001.683)\n\n\n4\n822829\n3.0\nEntire rental unit\n$361.00\nPOINT (325691.831 674328.127)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nairbnb = gpd.read_file(\n    \"edinburgh_airbnb_2023.gpkg\",\n)\n\n\n\nYou will be focusing on the price of each listing. Let’s check that column.\n\nairbnb.price.head()\n\n0    $126.00\n1    $269.00\n2     $95.00\n3    $172.00\n4    $361.00\nName: price, dtype: object\n\n\nWhile the values represent numbers, they are encoded as strings starting with the $ sign. That will not work for any interpolation (or any other mathematical method). Use pandas to strip the string of the $ character, remove , and cast the remaining to float.\n\nairbnb[\"price_float\"] = (\n1    airbnb.price.str.strip(\"$\").str.replace(\",\", \"\").astype(float)\n)\n\n\n1\n\nAccess string methods using the .str accessor. Remove , by replacing it with an empty string.\n\n\n\n\nThat is set now, you have numbers as expected. Since the dataset represents all types of Airbnb listings, it may be better to select only one type. Filter out only those with 2 bedrooms that can be rented as the whole flat and have a price under £300 per night (there are some crazy outliers).\n\ntwo_bed_homes = airbnb[\n    (airbnb[\"bedrooms\"] == 2)\n    & (airbnb[\"property_type\"] == \"Entire rental unit\")\n    & (airbnb[\"price_float\"] &lt; 300)\n].copy()\ntwo_bed_homes.head()\n\n\n\n\n\n\n\n\nid\nbedrooms\nproperty_type\nprice\ngeometry\nprice_float\n\n\n\n\n3\n821573\n2.0\nEntire rental unit\n$172.00\nPOINT (326748.646 674001.683)\n172.0\n\n\n5\n834777\n2.0\nEntire rental unit\n$264.00\nPOINT (324950.724 673875.598)\n264.0\n\n\n6\n450745\n2.0\nEntire rental unit\n$177.00\nPOINT (326493.725 672853.904)\n177.0\n\n\n10\n485856\n2.0\nEntire rental unit\n$157.00\nPOINT (326597.124 673869.551)\n157.0\n\n\n17\n51505\n2.0\nEntire rental unit\n$155.00\nPOINT (325393.807 674177.409)\n155.0\n\n\n\n\n\n\n\nAnother useful check before heading to the land of interpolation is for duplicated geometries. Having two points at the same place, each with a different value could lead to unexpected results.\n\ntwo_bed_homes.geometry.duplicated().any()\n\nTrue\n\n\nThere are some duplicated geometries. Let’s simply drop rows with duplicated locations and keep only the first occurrence (the default behaviour of drop_duplicates).\n\ntwo_bed_homes = two_bed_homes.drop_duplicates(\"geometry\")\n\nCheck how the cleaned result looks on a map.\n\ntwo_bed_homes.explore(\"price_float\", tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThere are some visible patterns of higher and lower prices, but it may be tricky to do interpolation since the data is a bit too chaotic. In general, point interpolation methods work only when there is a spatial autocorrelation in the data and stronger autocorrelation leads to better interpolation. As you know, spatially lagged variable of already autocorrelated variable shows higher levels of autocorrelation, hence using the spatial lag will be beneficial for this section.\n\n1knn = graph.Graph.build_kernel(two_bed_homes, k=10).transform(\"r\")\ntwo_bed_homes[\"price_lag\"] = knn.lag(two_bed_homes.price_float)\ntwo_bed_homes.explore(\"price_lag\", tiles=\"CartoDB Positron\")\n\n\n1\n\nBuild weights based on 10 nearest neighbours weighted by the distance, so those neighbours that are closer have more power to affect the lag.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThis looks much better. Let’s start with some interpolation. Create another H3 grid, this time with a resolution of 10 (much smaller cells than before). You will use it as a target of interpolation.\n\ngrid_10 = tobler.util.h3fy(simd, resolution=10)\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/pyproj/crs/crs.py:1293: UserWarning: You will likely lose important projection information when converting to a PROJ string from another format. See: https://proj.org/faq.html#what-is-the-best-format-for-describing-coordinate-reference-systems\n  proj = self._crs.to_proj4(version=version)\n\n\nAll of the methods below do not expect geometries as an input, but arrays of coordinates. That is an easy task. An array from the grid can be extracted from the centroid of each cell:\n\ngrid_coordinates = grid_10.centroid.get_coordinates()\ngrid_coordinates.head()\n\n\n\n\n\n\n\n\nx\ny\n\n\nhex_id\n\n\n\n\n\n\n8a197276aaaffff\n323824.562316\n667745.329423\n\n\n8a197275c7affff\n315812.244063\n667196.068775\n\n\n8a197274c89ffff\n322544.083766\n666474.749903\n\n\n8a197276129ffff\n324627.825547\n671184.272146\n\n\n8a1972395c2ffff\n331248.833782\n673388.751050\n\n\n\n\n\n\n\nAnd an array from the Airbnb subset can be retrieved directly from point data:\n\nhomes_coordinates = two_bed_homes.get_coordinates()\nhomes_coordinates.head()\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n3\n326748.645636\n674001.683211\n\n\n5\n324950.723888\n673875.598033\n\n\n6\n326493.725178\n672853.903917\n\n\n10\n326597.123684\n673869.551295\n\n\n17\n325393.807222\n674177.408961\n\n\n\n\n\n\n\n\n\nNearest\nThe simplest case is the nearest interpolation. That assigns a value to a given point based on the value of the nearest point in the original dataset. You can use the griddata function from the scipy.interpolate module to do that efficiently.\n\nnearest = interpolate.griddata(\n1    points=homes_coordinates,\n2    values=two_bed_homes.price_lag,\n3    xi=grid_coordinates,\n4    method=\"nearest\",\n)\nnearest\n\n\n1\n\nUse the array of coordinates of Airbnb as input points.\n\n2\n\nThe lagged prices are the values linked to points.\n\n3\n\nxi is the array of point coordinates at which to interpolate data.\n\n4\n\nSpecify the \"nearest\" as a method. Check the other options in the documentation yourself but be aware that not all may work well on your data (like in this case).\n\n\n\n\narray([159.99997088,  34.        , 190.00000167, ..., 188.70398583,\n       188.70398583,  84.        ])\n\n\nThe result is provided as a numpy.ndarray object aligned with grid_coordinates, so you can directly assign it as a column.\n\ngrid_10[\"nearest\"] = nearest\n\nCheck the result of the nearest interpolation on a map.\n\n_ = grid_10.plot('nearest', legend=True)\n\n\n\n\nNearest interpolation\n\n\n\n\nYou can see that the result is actually a Voronoi tessellation. If you plot the original points on top, it is even clearer.\n\nax = grid_10.plot('nearest', legend=True)\n_ = two_bed_homes.plot(ax=ax, color=\"red\", markersize=1)\n\n\n\n\nNearest interpolation with point overlay\n\n\n\n\nNearest interpolation may be fine for some use cases, but it is not a good interpolation method in general.\n\n\nK-nearest neighbours regression\nExpanding the nearest method, which takes a single nearest neighbour and allocates the values, you can use the K-nearest neighbours regression (KNN) method. KNN takes into account multiple nearest neighbours and interpolates the value based on all of them.\n\nUniform\nThe simple KNN option is to find \\(K\\) nearest neighbours (say 10), treat all equally (uniform weights), and obtain the interpolated value as a mean of values these neighbours have. The implementation of KNN is available in scikit-learn, so it has the API you are already familiar with from the Clustering and regionalisation section.\n\n1interpolation_uniform = neighbors.KNeighborsRegressor(\n2    n_neighbors=10, weights=\"uniform\"\n)\n\n\n1\n\nCreate the regressor object.\n\n2\n\nUse 10 neighbors and uniform weights.\n\n\n\n\nAs with the clustering, use the fit() method to train the object.\n\ninterpolation_uniform.fit(\n1    homes_coordinates, two_bed_homes.price_lag\n)\n\n\n1\n\nFit the model based on coordinates and lagged price.\n\n\n\n\nKNeighborsRegressor(n_neighbors=10)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KNeighborsRegressor?Documentation for KNeighborsRegressoriFittedKNeighborsRegressor(n_neighbors=10) \n\n\nOnce the model is ready, you can predict the values on the grid coordinates.\n\nprice_on_grid = interpolation_uniform.predict(grid_coordinates)\nprice_on_grid\n\narray([140.03750744, 111.56773545, 146.41000389, ..., 122.78457712,\n       120.36697169, 120.36697169])\n\n\nThis is, again, a numpy.ndarray that is aligned and can be directly set as a column.\n\ngrid_10[\"knn_uniform\"] = price_on_grid\n\nCheck the result on a map.\n\n_ = grid_10.plot(\"knn_uniform\", legend=True)\n\n\n\n\nUniform KNN interpolation\n\n\n\n\nThis is already much better than the simple nearest join based on a single neighbor but there are still a lot of artefacts in the areas where you have only a few points far away from each other.\n\n\n\n\n\n\nUsing KNeighborsRegressor for the nearest join\n\n\n\nYou have probably figured out that you don’t need scipy.interpolate.griddata to do the nearest join if you have access to sklearn.neighbors.KNeighborsRegressor. With n_neighbors=1, the result should be the same. However, there are situations when only one is available, so it is good to know your options.\n\n\n\n\nDistance-weighted\nOne way to mitigate the artefacts and take geography a bit more into the equation is to use distance-weighted KNN regression. Instead of treating each neighbour equally, no matter how far from the location of interest they are, you can weigh the importance of each by distance, or to be more precise, by the inverse of the distance. This ensures that points that are closer and considered more important for the interpolation than those that are further away.\n\ninterpolation_distance = neighbors.KNeighborsRegressor(\n    n_neighbors=10, weights=\"distance\"\n)\n\nThe only difference is in the weight argument. The rest is the same.\n\ninterpolation_distance.fit(\n    homes_coordinates, two_bed_homes.price_lag\n)\n\nKNeighborsRegressor(n_neighbors=10, weights='distance')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KNeighborsRegressor?Documentation for KNeighborsRegressoriFittedKNeighborsRegressor(n_neighbors=10, weights='distance') \n\n\nTrain the model, predict the values for the grid and assign to the GeoDataFrame.\n\ngrid_10[\"knn_distance\"] = interpolation_distance.predict(grid_coordinates)\n\nIf you look at the resulting map, you can see that most of the artefacts are gone.\n\n_ = grid_10.plot(\"knn_distance\", legend=True)\n\n\n\n\nDistance-weighted KNN interpolation\n\n\n\n\n\n\n\nDistance band regression\nDistance can be employed in another way as well. Instead of selecting the neighbours from which the values are interpolated based on K-nearest neighbours, you can select them based on distance. For example, find all points in a radius of 1000 metres around a location of interest and draw the interpolated value from them. You can also further weigh these neighbours using the inverse distance. The code looks nearly identical. Just use neighbors.RadiusNeighborsRegressor instead of neighbors.KNeighborsRegressor.\n\ninterpolation_radius = neighbors.RadiusNeighborsRegressor(\n    radius=1000, weights=\"distance\"\n)\ninterpolation_radius.fit(\n    homes_coordinates, two_bed_homes.price_lag\n)\n\ngrid_10[\"radius\"] = interpolation_radius.predict(grid_coordinates)\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/sklearn/neighbors/_regression.py:505: UserWarning: One or more samples have no neighbors within specified radius; predicting NaN.\n  warnings.warn(empty_warning_msg)\n\n\nCheck the result. The issue with sparsely populated areas on the map is a bit different this time. When there is no neighbour in 1000m, the model is not able to produce any prediction and returns np.nan. This may be seen as an issue but it can actually be a strength of the model as it is upfront with the issues caused by sparsity. Note that the model warns you about this situation during the prediction phase.\n\n_ = grid_10.plot(\"radius\", legend=True, missing_kwds={'color': 'lightgrey'})\n\n\n\n\nDistance band regression\n\n\n\n\n\n\nOrdinary Kriging\nThe final method of this section is ordinary kriging. Kriging is based on a linear combination of observations that are nearby, like all the cases above, but the model is more complex and takes into account geographical proximity, but also the spatial arrangement of observations and the pattern of autocorrelation. As such, it can be seen as the most robust of the presented options.\nYou will use the package pyinterpolate to do kriging. It requires all input data in a single numpy.ndarray composed of coordinates and values.\n\n1input_data = np.hstack(\n2    [homes_coordinates, two_bed_homes.price_lag.values.reshape(-1, 1)]\n)\ninput_data\n\n\n1\n\nUse the np.hstack function to horizontally stack the arrays together.\n\n2\n\ntwo_bed_homes.price_lag.values gives you an underlying array of lagged prices. But it needs to be shaped differently for hstack than it is. reshape(-1, 1) fixes that. Try exploring what happens independently.\n\n\n\n\narray([[3.26748646e+05, 6.74001683e+05, 2.07033397e+02],\n       [3.24950724e+05, 6.73875598e+05, 1.54805935e+02],\n       [3.26493725e+05, 6.72853904e+05, 1.43865293e+02],\n       ...,\n       [3.28513265e+05, 6.74048892e+05, 1.06875409e+02],\n       [3.26840903e+05, 6.74767224e+05, 1.68848108e+02],\n       [3.25415664e+05, 6.73345158e+05, 2.15847334e+02]])\n\n\nThe input_data is now an array pyinterpolate expects. The first step is to build an experimental variogram based on the data and a couple of parameters.\n\nexp_semivar = pyinterpolate.build_experimental_variogram(\n    input_array=input_data,\n1    step_size=100,\n2    max_range=5000,\n)\n\n\n1\n\nstep_size is the distance between lags within each point in included in the calculations.\n\n2\n\nmax_range is the maximum range of analysis.\n\n\n\n\nThe result can be plotted and explored using the plot() method. The experimental variogram is a plot that shows how the semivariance between pairs of sample points changes with distance. The variogram is calculated by taking pairs of sample points and computing the semivariance of the differences in their values at different distances. It measures the degree of relationship between points at different distances. Semivariance is half the variance of the differences in values between pairs of points at a set distance.\n\nexp_semivar.plot()\n\n\n\n\nExperimental variogram\n\n\n\n\nNext, you need to build a theoretical semivariogram based on the experimental variogram.\n\nsemivar = pyinterpolate.build_theoretical_variogram(\n1    experimental_variogram=exp_semivar,\n2    model_name='linear',\n3    sill=exp_semivar.variance,\n4    rang=5000,\n)\n\n\n1\n\nThe first input is the experimental variogram from the previous step.\n\n2\n\nType of model used in kriging. \"linear\" will be the fastest but may not be the best.\n\n3\n\nsill captures the value at which dissimilarity is close to its maximum if the model is bounded. You can pass the variance from the experimental variogram.\n\n4\n\nThe semivariogram range is the distance at which spatial correlation exists. It shouldn’t be set at a distance larger than half of the study extent.\n\n\n\n\nAgain, you can plot the result. The theoretical variogram is a model or a mathematical function that is fitted to the experimental variogram.\n\nsemivar.plot()\n\n\n\n\nTheoretical semivariogram\n\n\n\n\nYou can see that the linear model does not precisely follow the experimental semivariances. Let’s try another option.\n\nsemivar_spherical = pyinterpolate.build_theoretical_variogram(\n    experimental_variogram=exp_semivar,\n1    model_name='spherical',\n    sill=exp_semivar.variance,\n2    rang=2500,\n)\n\n\n1\n\nChange the model type to spherical.\n\n2\n\nChange the range of the semivariogram to get a better fit.\n\n\n\n\nLet’s see if it is a bit better.\n\nsemivar_spherical.plot()\n\n\n\n\nTheoretical semivariogram using spherical model\n\n\n\n\nNow you are ready to use kriging to interpolate data on your grid.\n\nordinary_kriging = pyinterpolate.kriging(\n1    observations=input_data,\n2    theoretical_model=semivar_spherical,\n3    points=grid_coordinates.values,\n4    how=\"ok\",\n5    no_neighbors=10,\n6    show_progress_bar=False,\n)\n\n\n1\n\nInput data representing Airbnb data, both coordinates and values.\n\n2\n\nTheoretical semivariogram.\n\n3\n\nCoordinates of the grid to interpolate on. Use .values to extract the underlying numpy.ndarray from the DataFrame.\n\n4\n\nType of kriging. \"ok\" is for ordinary kriging, \"sk\" would stand for simple kriging.\n\n5\n\nThe number of the nearest neighbours used for interpolation.\n\n6\n\nWhether to show a progress bar or not. Feel free to use True but it breaks the website :).\n\n\n\n\nThe resulting ordinary_kriging is a numpy.ndarray with four columns representing predicted value, variance error, x, and y. You can select the first one and assign it as a column.\n\ngrid_10[\"ordinary_kriging\"] = ordinary_kriging[:, 0]\n\nAnd check the result.\n\n_ = grid_10.plot(\"ordinary_kriging\", legend=True)\n\n\n\n\nOrdinary kriging\n\n\n\n\nOrdinary kriging looks great in dense areas but shows yet another type of artefact in sparse areas. While there are ways to mitigate the issue by changing the radius and other parameters of the model, it is worth noting that the reliability of any interpolation method in sparsely populated areas (in terms of the density of original points) is questionable. Kriging has a method to indicate the error rate using the variance error, which may help assess the issue. Variance error is the second column of the ordinary_kriging array.\n\ngrid_10[\"variance_error\"] = ordinary_kriging[:, 1]\n_ = grid_10.plot(\"variance_error\", legend=True)\n\n\n\n\nVariance error\n\n\n\n\nYou can see from the plot of variance error that anything further away from existing points becomes fairly unreliable. You can, for example, set the specific threshold of the variance error you think is acceptable and treat all the other locations as missing or unreliable.\n\n\n\n\n\n\nCheck the effect of the theoretical semivariogram model\n\n\n\nExplore the difference between kriging using linear and spherical models in theoretical semivariograms. What are the other options and their effects?\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\nHave a look at the chapter Spatial Feature Engineering from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) to learn a bit more about areal interpolation or look at the Areal Interpolation topic of The Geographic Information Science & Technology Body of Knowledge by Comber and Zeng (2022). The same source also contains a nice explanation of kriging by Goovaerts (2019).",
    "crumbs": [
      "Interpolation",
      "Spatial interpolation"
    ]
  },
  {
    "objectID": "interpolation/concepts.html",
    "href": "interpolation/concepts.html",
    "title": "Use space in your favour",
    "section": "",
    "text": "Slides from the talk on areal interpolation and point pattern interpolation.\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Feature Engineering from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis.",
    "crumbs": [
      "Interpolation",
      "Use space in your favour"
    ]
  },
  {
    "objectID": "introduction/hands_on.html",
    "href": "introduction/hands_on.html",
    "title": "Jupyter and Python",
    "section": "",
    "text": "Welcome to the first hands-on section of the course. You will familiarise yourself with the tools you will be using, ensure that all works as it should, and prepare for some Python code.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/hands_on.html#computer-science-101",
    "href": "introduction/hands_on.html#computer-science-101",
    "title": "Jupyter and Python",
    "section": "Computer Science 101",
    "text": "Computer Science 101\nSpatial Data Science depends on code, and coding environments can be unfriendly to an average user. People designing the tools are often computer scientists or have a strong knowledge of CS-related environments. It means we sometimes need to deal with the tools that look a bit scary, like a Terminal or a Command line. Below is a brief introduction to the tools you will need for this course.\n\nTerminal and Command line\nDepending on your operating system, you will have either Terminal (macOS, Linux) or Anaconda Prompt application installed. It will look like this:\n\n\n\nTerminal on macOS\n\n\nTerminal (and Anaconda Prompt or Command line, but we will refer to all as the terminal for simplicity) is used to interact with applications that do not have any graphic interface or with the apps that do have one, but you want to use them programmatically. The terminal usage is straightforward. Let’s start with a few examples.\n\nCreate a folder (or maybe you already have) to store files for this course.\nDownload this notebook by clicking on the Jupyter option on the right side of this page and move the notebook to the folder.\n\nYou want to see a list of files and folders you have in the folder. First, you need to navigate to the folder. For that, you can use the cd command, which stands for change directory.\ncd courses/sds/\nLet’s assume that you have the folder with course material in the folder called sds in another folder called courses. The full command is then composed of the cd part, saying set the current directory to… and waits for the parameter, which is a path to the folder in this case - courses/sds/.\nOnce in the correct folder, you can use another command, ls, which stands for list and allows you to list the contents of the current directory.\nls\nThe output would look like this:\n\n\n\nOutput of the ls command.\n\n\nYou can also pass a parameter -l, specifying that you want a long listing including attributes.\nls -l\nThat changes the output to this:\n\n\n\nOutput of the ls -l command.\n\n\nThe syntax is always the same, starting with the app name and then followed by parameters.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/hands_on.html#conda",
    "href": "introduction/hands_on.html#conda",
    "title": "Jupyter and Python",
    "section": "Conda",
    "text": "Conda\nIf you followed the installation of Python described in the infrastructure section, you have used conda with parameters specifying that you want to use it to create an environment based on an environment.yml file. But what is conda?\nConda, is a tool you will use to create “environments” and install Python and Python packages. It is a package manager, ensuring all the necessary parts work together. For example, if you want to create a new environment and install Python in it, you type the following command in your terminal.\nconda create -n my_environment python\nYou don’t need to do that now but it is useful as you will probably need that at some point later. You can check more in the documentation of conda.\n\nOther options\nConda is not the only way of setting up a Python environment. If you don’t want to install anything on your local machine, you can use Google Colab, which gives you an environment with Python and an interface to work with Jupyter Notebooks.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/hands_on.html#jupyter-notebook-and-jupyter-lab",
    "href": "introduction/hands_on.html#jupyter-notebook-and-jupyter-lab",
    "title": "Jupyter and Python",
    "section": "Jupyter Notebook and Jupyter Lab",
    "text": "Jupyter Notebook and Jupyter Lab\nWhile you can interact with Python from the terminal, it is inconvenient. Instead, you will use Jypyter Notebooks and Jupyter Lab. Jupyter Notebooks are documents that allow you to mix text and code, execute small pieces of code one at a time and include graphical outputs of your code. Jupyter Lab is a handy interface that allows you to work with multiple notebooks and switch between your Python environments created with conda.\nIt is time to say goodbye to the terminal and start Jupyter Lab. You should ensure you have your sds environment activated first:\nconda activate sds\nThen you can start Lab using:\njupyter lab\nThis command should open your browser and load the Jupyter Lab interface.\n\n\n\nJupyter Lab interface\n\n\nIn the launcher, we can create a new Notebook by clicking on the Python logo representing our current environment. If you have more of them, you will see them there, as well as other environments using different programming languages like R or Julia.\nThe notebook is composed of cells. This is a cell:\n\n\n\nJupyter Notebook cell\n\n\nCells can contain either code or text. A typical notebook is then a series of cells where some include text describing what is happening while others contain the code, either waiting for execution or already executed. The cells with the executed code may also contain outputs.\nWe can start with simple math that Python can do natively. Run the following code cell. To do that, you can either click the “play” button on top or hit Shift + Enter:\n\n1 + 1\n\n2\n\n\nYou now have a code cell with the output. Jupyter Lab automatically created a new cell. Change its type to Markdown and write a short text describing what the cell above does.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/hands_on.html#let-the-snake-in",
    "href": "introduction/hands_on.html#let-the-snake-in",
    "title": "Jupyter and Python",
    "section": "Let the snake in",
    "text": "Let the snake in\nYou can start exploring Python.\n\nSimple Python math\nAs shown above, Python can be used as a simple calculator. Remember, you can press Shift + Enter to execute the code in the cells below. Try it out by typing some simple math into new cells and see what you get.\n\n42 * 12\n\n504\n\n\n\n12 / 3\n\n4.0\n\n\nIf you want to edit and re-run some code, change the cell and press Shift + Enter to execute the modified code.\n\n\nFunctions\nYou can use Python for more advanced math by using a function. Functions are pieces of code that perform a single action, such as printing information to the screen (e.g., the print() function). Functions exist for a huge number of operations in Python.\nLet’s try out a few simple examples using functions to find the sine or square root of a value. You can type sin(3) or sqrt(4) into the cells below to test this out.\n\nsin(3)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 sin(3)\n\nNameError: name 'sin' is not defined\n\n\n\n\nsqrt(4)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 sqrt(4)\n\nNameError: name 'sqrt' is not defined\n\n\n\nWell, that didn’t work. Python can calculate square roots or do basic trigonometry, but we need one more step.\n\nMath operations\nThe table below shows the list of basic arithmetic operations that can be done by default in Python.\n\n\n\nOperation\nSymbol\nExample syntax\nReturned value\n\n\n\n\nAddition\n+\n2 + 2\n4\n\n\nSubtraction\n-\n4 - 2\n2\n\n\nMultiplication\n*\n2 * 3\n6\n\n\nDivision\n/\n4 / 2\n2\n\n\nExponentiation\n**\n2 ** 3\n8\n\n\n\nFor anything more advanced, we need to load a module or a package. For math operations, this module is called math and can be loaded by typing import math.\n\nimport math\n\nNow that we have access to functions in the math module, we can use it by typing the module name, a period (dot), and the name of the function we want to use. For example, math.sin(3). Try this with the sine and square root examples from above.\n\nmath.sin(3)\n\n0.1411200080598672\n\n\n\nmath.sqrt(4)\n\n2.0\n\n\nLet’s summarise what you’ve just done with modules:\n\nA module is a group of code items, such as functions, related to one another. Individual modules are often in a group called a package.\nModules can be loaded using import. Functions that are part of the module modulename can then be used by typing modulename.functionname(). For example, sin() is a function that is part of the math module and is used by typing math.sin() with some number between the parentheses.\nWithin a Jupyter Notebook, the variables you defined earlier in the notebook will be available for use in the following cells as long as you have executed the cells.\nModules may also contain constants such as math.pi (notice no parentheses at the end). Type this in the cell below to see the constant’s math.pi value.\n\n\nmath.pi\n\n3.141592653589793\n\n\n\n\nCombining functions\nFunctions can also be combined. The print() function returns values within the parentheses as text on the screen. Below, try printing the value of the square root of four.\n\nprint(math.sqrt(4))\n\n2.0\n\n\nYou can also combine text with other calculated values using the print() function. For example, print('Two plus two is', 2+2) would generate the text reading 'Two plus two is 4'. Combine the print() function with the math.sqrt() function in the cell below to produce text that reads 'The square root of 4 is 2.0'.\n\nprint(\"The square root of 4 is\", math.sqrt(4))\n\nThe square root of 4 is 2.0\n\n\n\n\n\nVariables\nA variable can store values calculated in expressions and used for other calculations. Assigning value to variables is straightforward. To assign a value, you type variable_name = value, where variable_name is the name of the variable you wish to define. In the cell below, define a variable called temp_celsius, assign it a value of 10.0, and then print that variable value using the print() function. Note that you should do this on two separate lines.\n\ntemp_celsius = 10.0\nprint(temp_celsius)\n\n10.0\n\n\nAs we did above, you can combine text and even use some math when printing out variable values. The idea is similar to adding 2+2 or calculating the square root of four from the previous section. In the cell below, print out the value of temp_celsius in degrees Fahrenheit by multiplying temp_celsius by 9/5 and adding 32. This should be done within the print() function to produce output that reads 'Temperature in Fahrenheit: 50.0'.\n\nprint(\"Temperature in Fahrenheit:\", 9 / 5 * temp_celsius + 32)\n\nTemperature in Fahrenheit: 50.0\n\n\n\n\nUpdating variables\nValues stored in variables can also be updated. Let’s redefine the value of temp_celsius to be equal to 15.0 and print its value in the cells below.\n\ntemp_celsius = 15.0\n\n\nprint(\"temperature in Celsius is now:\", temp_celsius)\n\ntemperature in Celsius is now: 15.0\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you try to run some code that accesses a variable that has not yet been defined, you will get a NameError message. Try printing out the value of the variable temp_fahrenheit using the print() function in the cell below.\n\n\n\nprint(\"Temperature in Celsius:\", 5 / 9 * (temp_fahrenheit - 32))\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[16], line 1\n----&gt; 1 print(\"Temperature in Celsius:\", 5 / 9 * (temp_fahrenheit - 32))\n\nNameError: name 'temp_fahrenheit' is not defined\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOne of the interesting things here is that if we define the undefined variable in a cell lower down in the notebook and execute that cell, we can return to the earlier cell, and the code should now work. That was a bit of a complicated sentence, so let’s test this all out. First, let’s define a variable called temp_fahrenheit in the cell below and assign it to be equal to 9/5 * temp_celsius + 32, the conversion factor from temperatures in Celsius to Fahrenheit. Then, return to the cell above this text and run that cell again. See how the error message has gone away? temp_fahrenheit has now been defined, and thus, the cell above no longer generates a NameError when the code is executed.\nAlso, the number beside the cell, for example, In [2], tells you the order in which the Python cells have been executed. This way, you can see a history of the order in which you have run the cells.\n\n\n\ntemp_fahrenheit = 9 / 5 * temp_celsius + 32\n\nTo check their current values, print out the values of temp_celsius and temp_fahrenheit in the cell below.\n\nprint(\"temperature in Celsius:\", temp_celsius, \"and in Fahrenheit:\", temp_fahrenheit)\n\ntemperature in Celsius: 15.0 and in Fahrenheit: 59.0\n\n\n\n\nData types\nA data type determines the characteristics of data in a program. There are four basic data types in Python, as shown in the table below.\n\n\n\nData type name\nData type\nExample\n\n\n\n\nint\nWhole integer values\n4\n\n\nfloat\nDecimal values\n3.1415\n\n\nstr\nCharacter strings\n'Hot'\n\n\nbool\nTrue/false values\nTrue\n\n\n\nThe data type can be found using the type() function. As you will see, the data types are essential because some are incompatible.\nLet’s define a variable weather_forecast and assign it the value 'Hot'. After this, we can check its data type using the type() function.\n\nweather_forecast = \"Hot\"\ntype(weather_forecast)\n\nstr\n\n\nLet’s also check the type of temp_fahrenheit. What happens if you try to combine temp_fahrenheit and weather_forecast in a single math equation such as temp_fahrenheit = temp_fahrenheit + 5.0 * weather_forecast?\n\ntype(temp_fahrenheit)\n\nfloat\n\n\n\ntemp_fahrenheit = temp_fahrenheit + 5.0 * weather_forecast\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[21], line 1\n----&gt; 1 temp_fahrenheit = temp_fahrenheit + 5.0 * weather_forecast\n\nTypeError: can't multiply sequence by non-int of type 'float'\n\n\n\nIn this case, we get at TypeError because we are trying to execute a math operation with data types that are not compatible. There is no way in Python to multiply numbers with a character string.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/hands_on.html#acknowledgements",
    "href": "introduction/hands_on.html#acknowledgements",
    "title": "Jupyter and Python",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe ‘Let the snake in’ section is derived from A taste of Python section of the Geo-Python course 2022 by D. Whipp, H. Tenkanen, V. Heikinheimo, H. Aagesen, and C. Fink from the Department of Geosciences and Geography, University of Helsinki, licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Introduction",
      "Jupyter and Python"
    ]
  },
  {
    "objectID": "introduction/concepts.html",
    "href": "introduction/concepts.html",
    "title": "What is Spatial Data Science?",
    "section": "",
    "text": "Below are slides from the introductory talk to the course, covering a brief introduction to data science and spatial data science, followed by practical information about the course structure and organisation.\n\n\n\n\n\n\n\nRelated content\n\n\n\nYou may find interesting a short (6-minute) video from Carto on What is Spatial Data Science composed of the answers of many spatial data scientists. Available on Youtube.",
    "crumbs": [
      "Introduction",
      "What is Spatial Data Science?"
    ]
  },
  {
    "objectID": "clustering/hands_on.html",
    "href": "clustering/hands_on.html",
    "title": "Clustering and regionalisation",
    "section": "",
    "text": "This session is all about finding groups of similar observations in data using clustering techniques.\nMany questions and topics are complex phenomena that involve several dimensions and are hard to summarise into a single variable. In statistical terms, you call this family of problems multivariate, as opposed to univariate cases where only a single variable is considered in the analysis. Clustering tackles this kind of questions by reducing their dimensionality -the number of relevant variables the analyst needs to look at - and converting it into a more intuitive set of classes that even non-technical audiences can look at and make sense of. For this reason, it is widely used in applied contexts such as policymaking or marketing. In addition, since these methods do not require many preliminary assumptions about the structure of the data, it is a commonly used exploratory tool, as it can quickly give clues about the shape, form and content of a dataset.\nThe basic idea of statistical clustering is to summarise the information contained in several variables by creating a relatively small number of categories. Each observation in the dataset is then assigned to one, and only one, category depending on its values for the variables originally considered in the classification. If done correctly, the exercise reduces the complexity of a multi-dimensional problem while retaining all the meaningful information contained in the original dataset. This is because once classified, the analyst only needs to look at in which category every observation falls into, instead of considering the multiple values associated with each of the variables and trying to figure out how to put them together in a coherent sense. When the clustering is performed on observations that represent areas, the technique is often called geodemographic analysis.\nAlthough there exist many techniques to statistically group observations in a dataset, all of them are based on the premise of using a set of attributes to define classes or categories of observations that are similar within each of them, but differ between groups. How similarity within groups and dissimilarity between them is defined and how the classification algorithm is operationalised is what makes techniques differ and also what makes each of them particularly well suited for specific problems or types of data.\nIn the case of analysing spatial data, there is a subset of methods that are of particular interest for many common cases in Spatial Data Science. These are the so-called regionalisation techniques. Regionalisation methods can also take many forms and faces but, at their core, they all involve statistical clustering of observations with the additional constraint that observations need to be geographical neighbours to be in the same category. Because of this, rather than category, you will use the term area for each observation and region for each category, hence regionalisation, the construction of regions from smaller areas.\nThe Python package you will use for clustering today is called scikit-learn and can be imported as sklearn.\nimport geopandas as gpd\nimport seaborn as sns\nfrom libpysal import graph\nfrom sklearn import cluster",
    "crumbs": [
      "Clustering",
      "Clustering and regionalisation"
    ]
  },
  {
    "objectID": "clustering/hands_on.html#attribute-based-clustering",
    "href": "clustering/hands_on.html#attribute-based-clustering",
    "title": "Clustering and regionalisation",
    "section": "Attribute-based clustering",
    "text": "Attribute-based clustering\nIn this session, you will be working with another dataset you should already be familiar with - the Scottish Index of Multiple Deprivation. This time, you will focus only on the area of Glasgow City prepared for this course.\n\nScottish Index of Multiple Deprivation\nAs always, the table can be read from the site:\n\nsimd = gpd.read_file(\n    \"https://martinfleischmann.net/sds/clustering/data/glasgow_simd_2020.gpkg\"\n)\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nsimd = gpd.read_file(\n    \"glasgow_simd_2020.gpkg\",\n)\n\n\n\nInspect the structure of the table:\n\nsimd.info()\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 746 entries, 0 to 745\nData columns (total 52 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   DataZone    746 non-null    object  \n 1   DZName      746 non-null    object  \n 2   LAName      746 non-null    object  \n 3   SAPE2017    746 non-null    int64   \n 4   WAPE2017    746 non-null    int64   \n 5   Rankv2      746 non-null    int64   \n 6   Quintilev2  746 non-null    int64   \n 7   Decilev2    746 non-null    int64   \n 8   Vigintilv2  746 non-null    int64   \n 9   Percentv2   746 non-null    int64   \n 10  IncRate     746 non-null    object  \n 11  IncNumDep   746 non-null    int64   \n 12  IncRankv2   746 non-null    float64 \n 13  EmpRate     746 non-null    object  \n 14  EmpNumDep   746 non-null    int64   \n 15  EmpRank     746 non-null    float64 \n 16  HlthCIF     746 non-null    int64   \n 17  HlthAlcSR   746 non-null    int64   \n 18  HlthDrugSR  746 non-null    int64   \n 19  HlthSMR     746 non-null    int64   \n 20  HlthDprsPc  746 non-null    object  \n 21  HlthLBWTPc  746 non-null    object  \n 22  HlthEmergS  746 non-null    int64   \n 23  HlthRank    746 non-null    int64   \n 24  EduAttend   746 non-null    object  \n 25  EduAttain   746 non-null    float64 \n 26  EduNoQuals  746 non-null    int64   \n 27  EduPartici  746 non-null    object  \n 28  EduUniver   746 non-null    object  \n 29  EduRank     746 non-null    int64   \n 30  GAccPetrol  746 non-null    float64 \n 31  GAccDTGP    746 non-null    float64 \n 32  GAccDTPost  746 non-null    float64 \n 33  GAccDTPsch  746 non-null    float64 \n 34  GAccDTSsch  746 non-null    float64 \n 35  GAccDTRet   746 non-null    float64 \n 36  GAccPTGP    746 non-null    float64 \n 37  GAccPTPost  746 non-null    float64 \n 38  GAccPTRet   746 non-null    float64 \n 39  GAccBrdbnd  746 non-null    object  \n 40  GAccRank    746 non-null    int64   \n 41  CrimeCount  746 non-null    int64   \n 42  CrimeRate   746 non-null    int64   \n 43  CrimeRank   746 non-null    float64 \n 44  HouseNumOC  746 non-null    int64   \n 45  HouseNumNC  746 non-null    int64   \n 46  HouseOCrat  746 non-null    object  \n 47  HouseNCrat  746 non-null    object  \n 48  HouseRank   746 non-null    float64 \n 49  Shape_Leng  746 non-null    float64 \n 50  Shape_Area  746 non-null    float64 \n 51  geometry    746 non-null    geometry\ndtypes: float64(16), geometry(1), int64(22), object(13)\nmemory usage: 303.2+ KB\n\n\nBefore you jump into exploring the data, one additional step that will come in handy down the line. Not every variable in the table is an attribute that you will want for the clustering. In particular, you are interested in sub-ranks based on individual SIMD domains, so you will only consider those. Hence, first manually write them so they are easier to subset:\n\nsubranks = [\n    \"IncRankv2\",\n    \"EmpRank\",\n    \"HlthRank\",\n    \"EduRank\",\n    \"GAccRank\",\n    \"CrimeRank\",\n    \"HouseRank\"\n]\n\nYou can quickly familiarise yourself with those variables by plotting a few maps like the one below to build your intuition about what is going to happen.\n\nsimd[[\"IncRankv2\", \"geometry\"]].explore(\"IncRankv2\", tiles=\"CartoDB Positron\", tooltip=False)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nYou can see a decent degree of spatial variation between different sub-ranks. Even though you only have seven variables, it is very hard to “mentally overlay” all of them to come up with an overall assessment of the nature of each part of Glasgow. For bivariate correlations, a useful tool is the correlation matrix plot, available in seaborn:\n\n_ = sns.pairplot(simd[subranks],height=1, plot_kws={\"s\":1})\n\n\n\n\nPair plot of sub-ranks\n\n\n\n\nThis is helpful to consider uni and bivariate questions such as: what is the relationship between the ranks? Is health correlated with income? However, sometimes, this is not enough and you are interested in more sophisticated questions that are truly multivariate and, in these cases, the figure above cannot help us. For example, it is not straightforward to answer questions like: what are the main characteristics of the South of Glasgow? What areas are similar to the core of the city? Are the East and West of Glasgow similar in terms of deprivation levels? For these kinds of multi-dimensional questions -involving multiple variables at the same time- you require a truly multidimensional method like statistical clustering.\n\n\nK-Means\nA cluster analysis involves the classification of the areas that make up a geographical map into groups or categories of observations that are similar within each other but different between them. The classification is carried out using a statistical clustering algorithm that takes as input a set of attributes and returns the group (“labels” in the terminology) each observation belongs to. Depending on the particular algorithm employed, additional parameters, such as the desired number of clusters employed or more advanced tuning parameters (e.g. bandwith, radius, etc.), also need to be entered as inputs. For your classification of SIMD in Glasgow, you will start with one of the most popular clustering algorithms: K-means. This technique only requires as input the observation attributes and the final number of groups that you want it to cluster the observations into. In your case, you will use five to begin with as this will allow us to have a closer look into each of them.\nAlthough the underlying algorithm is not trivial, running K-means in Python is streamlined thanks to scikit-learn. Similar to the extensive set of available algorithms in the library, its computation is a matter of two lines of code. First, you need to specify the parameters in the KMeans method (which is part of scikit-learn’s cluster submodule). Note that, at this point, you do not even need to pass the data:\n\n1kmeans5 = cluster.KMeans(n_clusters=5, random_state=42)\n\n\n1\n\nn_clusters specifies the number of clusters you want to get and random_state sets the random generator to a known state, ensuring that the result is always the same.\n\n\n\n\nThis sets up an object that holds all the parameters required to run the algorithm. To actually run the algorithm on the attributes, you need to call the fit method in kmeans5:\n\n1kmeans5.fit(simd[subranks])\n\n\n1\n\nfit() takes an array of data; therefore, pass the columns of simd with sub-ranks and run the clustering algorithm on that.\n\n\n\n\nKMeans(n_clusters=5, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KMeans?Documentation for KMeansiFittedKMeans(n_clusters=5, random_state=42) \n\n\nThe kmeans5 object now contains several components that can be useful for an analysis. For now, you will use the labels, which represent the different categories in which you have grouped the data. Remember, in Python, life starts at zero, so the group labels go from zero to four. Labels can be extracted as follows:\n\nkmeans5.labels_\n\narray([1, 0, 0, 1, 0, 4, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 4, 4, 1, 1, 4, 0, 0, 0,\n       0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 4, 2, 2, 2, 2, 0,\n       2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 2, 0, 2, 2, 2, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2,\n       3, 2, 2, 0, 2, 2, 0, 0, 0, 4, 2, 4, 2, 2, 3, 2, 2, 2, 2, 0, 2, 0,\n       0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 3, 3, 2, 2, 3, 2, 2, 0, 3, 2, 3, 3,\n       3, 4, 4, 3, 1, 4, 4, 2, 3, 3, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 3, 0,\n       3, 0, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 2, 2, 0, 2, 4, 4, 4, 4, 2, 2,\n       2, 4, 4, 4, 4, 3, 3, 4, 3, 4, 4, 4, 3, 4, 0, 0, 2, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 1, 3, 2, 2, 1, 4, 1,\n       2, 2, 2, 1, 4, 2, 2, 3, 2, 2, 4, 2, 1, 2, 2, 3, 2, 0, 0, 0, 2, 0,\n       2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 3, 4, 0, 0, 3, 2, 2, 2, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0,\n       0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 4, 4, 1, 1, 0, 0, 1, 0, 1,\n       4, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 1,\n       0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0,\n       0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0,\n       2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 1, 1, 4, 4, 1, 4, 1, 2, 2, 0, 0,\n       0, 0, 2, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1,\n       4, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 2,\n       0, 0, 0, 0, 0, 2, 3, 2, 3, 3, 2, 0, 2, 0, 0, 2, 4, 2, 3, 1, 0, 3,\n       2, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 0, 2, 2, 3, 3, 2, 3, 3, 2,\n       3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 0, 2, 2, 0, 3, 0, 0, 0, 0, 3, 3,\n       3, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2,\n       0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 1, 1, 0, 4, 1, 0, 2, 0, 0, 2,\n       0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 2, 4, 3, 4, 3,\n       4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 0, 2, 0, 3, 2, 2, 4, 3, 0, 2,\n       2, 3, 3, 4, 3, 3, 4, 4, 3, 4, 3, 3, 2, 4, 4, 4, 3, 4, 4, 0, 4, 4,\n       4, 4, 4, 4, 3, 0, 0, 0, 2, 0, 4, 4, 0, 4, 0, 0, 0, 2, 0, 2, 0, 0,\n       0, 2, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 4, 0,\n       0, 2, 2, 1, 4, 1, 4, 2, 2, 2, 2, 3, 2, 1, 2, 2, 0, 2, 2, 0, 2, 2,\n       2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0],\n      dtype=int32)\n\n\nEach number represents a different category, so two observations with the same number belong to the same group. The labels are returned in the same order as the input attributes were passed in, which means you can append them to the original table of data as an additional column:\n\nsimd[\"kmeans_5\"] = kmeans5.labels_\nsimd[\"kmeans_5\"].head()\n\n0    1\n1    0\n2    0\n3    1\n4    0\nName: kmeans_5, dtype: int32\n\n\nIt is useful to display the categories created on a map to better understand the classification you have just performed. For this, you will use a unique values choropleth, which will automatically assign a different colour to each category:\n\nsimd[[\"kmeans_5\", 'geometry']].explore(\"kmeans_5\", categorical=True, tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThe map above represents the geographical distribution of the five categories created by the K-means algorithm. A quick glance shows a strong spatial structure in the distribution of the colours: group 3 (grey) is mostly in central areas and towards the west, group 1 (green) covers peripheries and so on, but not all clusters are equally represented.\n\n\n\n\n\n\nNot all data can go to clustering in their raw form\n\n\n\nClustering, as well as many other statistical methods, often depends on pairwise distances between observations based on the variables passed. That has, in practice, serious implications on what can be used. For example, you cannot use one variable that is limited to a range between 0 and 1 and another that stretches from 0 to 100 000. The latter would dominate the distance and the former would have negligible effect on the results. For these reasons, the data usually need to be standardised in some way. See the Data section of the chapter Clustering and Regionalization from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details.\nIn this case, all the sub-ranks are defined the same way so you don’t need any standardisation.\n\n\n\n\nExploring the nature of the categories\nOnce you have a sense of where and how the categories are distributed over space, it is also useful to explore them statistically. This will allow you to characterise them, giving you an idea of the kind of observations subsumed into each of them. As a first step, find how many observations are in each category. To do that, you will make use of the groupby operator introduced before, combined with the function size, which returns the number of elements in a subgroup:\n\nk5sizes = simd.groupby('kmeans_5').size()\nk5sizes\n\nkmeans_5\n0    331\n1     64\n2    195\n3     84\n4     72\ndtype: int64\n\n\nThe groupby operator groups a table (DataFrame) using the values in the column provided (kmeans_5) and passes them onto the function provided aftwerards, which in this case is size. Effectively, what this does is to groupby the observations by the categories created and count how many of them each contains. For a more visual representation of the output, a bar plot is a good alternative:\n\n_ = k5sizes.plot.bar()\n\n\n\n\nBar plot of cluster sizes\n\n\n\n\nAs you suspected from the map, groups vary in size, with group 2 having over 200 observations, groups 0, 1 and 4 over 100 and a group 3 having 74 observations.\nIn order to describe the nature of each category, you can look at the values of each of the attributes you have used to create them in the first place. Remember you used the sub-ranks on many aspects of deprivation to create the classification, so you can begin by checking the average value of each. To do that in Python, you will rely on the groupby operator which you will combine with the function mean:\n\n1k5_means = simd.groupby('kmeans_5')[subranks].mean()\n2k5_means.T\n\n\n1\n\nUse groupby to calculate mean per each sub-rank.\n\n2\n\nTranspose the table so it is not too wide\n\n\n\n\n\n\n\n\n\n\nkmeans_5\n0\n1\n2\n3\n4\n\n\n\n\nIncRankv2\n496.981873\n4255.531250\n2153.517949\n4653.613095\n5573.236111\n\n\nEmpRank\n569.829305\n4423.476562\n2517.353846\n5152.315476\n5792.256944\n\n\nHlthRank\n490.589124\n3753.734375\n2148.020513\n5074.702381\n5705.986111\n\n\nEduRank\n922.356495\n3978.468750\n2545.923077\n4814.261905\n6112.319444\n\n\nGAccRank\n4851.619335\n2800.453125\n5125.887179\n5641.654762\n4226.388889\n\n\nCrimeRank\n1311.149547\n4683.640625\n2526.074359\n2418.833333\n4210.666667\n\n\nHouseRank\n611.625378\n2527.101562\n1080.535897\n817.880952\n4104.729167\n\n\n\n\n\n\n\nWhen interpreting the values, remember that a lower value represents higher deprivation. While the results seem plausible and there are ways of interpreting them, you haven’t used any spatial methods.",
    "crumbs": [
      "Clustering",
      "Clustering and regionalisation"
    ]
  },
  {
    "objectID": "clustering/hands_on.html#spatially-lagged-clustering",
    "href": "clustering/hands_on.html#spatially-lagged-clustering",
    "title": "Clustering and regionalisation",
    "section": "Spatially-lagged clustering",
    "text": "Spatially-lagged clustering\nK-means (in its standard implementation) does not have a way of including of spatial restriction. However, it is still a very powerful and efficient algorithm and it would be a shame not to make a use of it when dealing with spatial data. To include spatial dimension in (nearly any) non-spatial model, you can use spatially lagged variables. Instead of passing in only the variables observed in each data zone, you also pass in their spatial lags. Due to the nature of the spatial lag, this encodes a certain degree of spatial contiguity into data that are being clustered, often resulting in spatially more homogenous areas.\nStart with building a queen contiguity weights matrix.\n\nqueen = graph.Graph.build_contiguity(simd)\n\nAs always, you will need a row-standardised matrix.\n\nqueen_row = queen.transform(\"R\")\n\nYou need a lagged version of each of the sub-ranks as its own, new column. You can loop through the subranks list and create them one by one, using a basic for loop.\n\n1for column in subranks:\n2    simd[column + \"_lag\"] = queen_row.lag(simd[column])\n\n\n1\n\nFor loop picks an item form subranks, assigns it to a column variable and runs the code inside the loop. Then it picks the second item from the list and runs the code again, with the second item as column. And so on until it covers the whole iterable item.\n\n2\n\nIn the first pass, column contains \"IncRankv2\", so create a column called \"IncRankv2_lag\" with a spatial lag.\n\n\n\n\nYou can check that the simd table now has new columns.\n\nsimd.info()\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 746 entries, 0 to 745\nData columns (total 60 columns):\n #   Column         Non-Null Count  Dtype   \n---  ------         --------------  -----   \n 0   DataZone       746 non-null    object  \n 1   DZName         746 non-null    object  \n 2   LAName         746 non-null    object  \n 3   SAPE2017       746 non-null    int64   \n 4   WAPE2017       746 non-null    int64   \n 5   Rankv2         746 non-null    int64   \n 6   Quintilev2     746 non-null    int64   \n 7   Decilev2       746 non-null    int64   \n 8   Vigintilv2     746 non-null    int64   \n 9   Percentv2      746 non-null    int64   \n 10  IncRate        746 non-null    object  \n 11  IncNumDep      746 non-null    int64   \n 12  IncRankv2      746 non-null    float64 \n 13  EmpRate        746 non-null    object  \n 14  EmpNumDep      746 non-null    int64   \n 15  EmpRank        746 non-null    float64 \n 16  HlthCIF        746 non-null    int64   \n 17  HlthAlcSR      746 non-null    int64   \n 18  HlthDrugSR     746 non-null    int64   \n 19  HlthSMR        746 non-null    int64   \n 20  HlthDprsPc     746 non-null    object  \n 21  HlthLBWTPc     746 non-null    object  \n 22  HlthEmergS     746 non-null    int64   \n 23  HlthRank       746 non-null    int64   \n 24  EduAttend      746 non-null    object  \n 25  EduAttain      746 non-null    float64 \n 26  EduNoQuals     746 non-null    int64   \n 27  EduPartici     746 non-null    object  \n 28  EduUniver      746 non-null    object  \n 29  EduRank        746 non-null    int64   \n 30  GAccPetrol     746 non-null    float64 \n 31  GAccDTGP       746 non-null    float64 \n 32  GAccDTPost     746 non-null    float64 \n 33  GAccDTPsch     746 non-null    float64 \n 34  GAccDTSsch     746 non-null    float64 \n 35  GAccDTRet      746 non-null    float64 \n 36  GAccPTGP       746 non-null    float64 \n 37  GAccPTPost     746 non-null    float64 \n 38  GAccPTRet      746 non-null    float64 \n 39  GAccBrdbnd     746 non-null    object  \n 40  GAccRank       746 non-null    int64   \n 41  CrimeCount     746 non-null    int64   \n 42  CrimeRate      746 non-null    int64   \n 43  CrimeRank      746 non-null    float64 \n 44  HouseNumOC     746 non-null    int64   \n 45  HouseNumNC     746 non-null    int64   \n 46  HouseOCrat     746 non-null    object  \n 47  HouseNCrat     746 non-null    object  \n 48  HouseRank      746 non-null    float64 \n 49  Shape_Leng     746 non-null    float64 \n 50  Shape_Area     746 non-null    float64 \n 51  geometry       746 non-null    geometry\n 52  kmeans_5       746 non-null    int32   \n 53  IncRankv2_lag  746 non-null    float64 \n 54  EmpRank_lag    746 non-null    float64 \n 55  HlthRank_lag   746 non-null    float64 \n 56  EduRank_lag    746 non-null    float64 \n 57  GAccRank_lag   746 non-null    float64 \n 58  CrimeRank_lag  746 non-null    float64 \n 59  HouseRank_lag  746 non-null    float64 \ndtypes: float64(23), geometry(1), int32(1), int64(22), object(13)\nmemory usage: 346.9+ KB\n\n\nLet’s create a list of these new columns.\n\n1subranks_lag = [column + \"_lag\" for column in subranks]\nsubranks_lag\n\n\n1\n\nThis is also a for loop but in the form of a list comprehension. The whole loop is there to fill the values of the list.\n\n\n\n\n['IncRankv2_lag',\n 'EmpRank_lag',\n 'HlthRank_lag',\n 'EduRank_lag',\n 'GAccRank_lag',\n 'CrimeRank_lag',\n 'HouseRank_lag']\n\n\nNow, combine the list of original variables and those with a lag to make it easier to pass the data to K-means.\n\n1subranks_spatial = subranks + subranks_lag\nsubranks_spatial\n\n\n1\n\nWith arrays like pandas.Series, this would perform element-wise addition. With lists, this combines them together.\n\n\n\n\n['IncRankv2',\n 'EmpRank',\n 'HlthRank',\n 'EduRank',\n 'GAccRank',\n 'CrimeRank',\n 'HouseRank',\n 'IncRankv2_lag',\n 'EmpRank_lag',\n 'HlthRank_lag',\n 'EduRank_lag',\n 'GAccRank_lag',\n 'CrimeRank_lag',\n 'HouseRank_lag']\n\n\nInitialise a new clustering model.\n\nkmeans5_lag = cluster.KMeans(n_clusters=5, random_state=42)\n\nAnd run it using the new subset, adding lagged variables on top of the original ones.\n\nkmeans5_lag.fit(simd[subranks_spatial])\n\nKMeans(n_clusters=5, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KMeans?Documentation for KMeansiFittedKMeans(n_clusters=5, random_state=42) \n\n\nAssing the result as a column.\n\nsimd[\"kmeans_5_lagged\"] = kmeans5_lag.labels_\n\nAnd explore as a map.\n\nsimd[[\"kmeans_5_lagged\", 'geometry']].explore(\"kmeans_5_lagged\", categorical=True, tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nComparing the spatially-lagged clusters with the original results shows that the new clusters are much more homogenous spatially, delineating relatively compact regions of data zones.\nAs you have seen, the essence of this approach is to group areas based on a purely statistical basis: where each area is located is irrelevant for the label it receives from the clustering algorithm. In many contexts, this is not only permissible but even desirable, as the interest is to see if particular combinations of values are distributed over space in any discernible way. However, in other contexts, you may be interested in creating groups of observations that follow certain spatial constraints. For that, you now turn to regionalisation techniques.",
    "crumbs": [
      "Clustering",
      "Clustering and regionalisation"
    ]
  },
  {
    "objectID": "clustering/hands_on.html#spatially-constrained-clustering-regionalisation",
    "href": "clustering/hands_on.html#spatially-constrained-clustering-regionalisation",
    "title": "Clustering and regionalisation",
    "section": "Spatially-constrained clustering (regionalisation)",
    "text": "Spatially-constrained clustering (regionalisation)\nRegionalisation is the subset of clustering techniques that impose a spatial constraint on the classification. In other words, the result of a regionalisation algorithm contains areas that are spatially contiguous. While spatially lagged clustering may result in contiguous areas, it does not enforce them. Regionalisation does. Effectively, what this means is that these techniques aggregate areas into a smaller set of larger ones, called regions. In this context, then, areas are nested within regions. Real-world examples of this phenomenon include counties within states or, in Scotland, data zones (DZName) into Local Authorities (LAName). The difference between those examples and the output of a regionalisation algorithm is that while the former are aggregated based on administrative principles, the latter follows a statistical technique that, very much the same as in the standard statistical clustering, groups together areas that are similar on the basis of a set of attributes. Only now, such statistical clustering is spatially constrained.\nAs in the non-spatial case, there are many different algorithms to perform regionalization, and they all differ on details relating to the way they measure (dis)similarity, the process to regionalize, etc. However, same as above too, they all share a few common aspects. In particular, they all take a set of input attributes and a representation of space in the form of a binary spatial weights matrix. Depending on the algorithm, they also require the desired number of output regions into which the areas are aggregated.\nTo illustrate these concepts, you will run a regionalisation algorithm on the SIMD data you have been using. In this case, the goal will be to delineate regions of similar levels of deprivation. In this way, the resulting regions will represent a consistent set of areas that are similar to each other in terms of the SIMD sub-ranks received.\nAt this point, you have all the pieces needed to run a regionalisation algorithm since you have already created a queen contiguity matrix above. For this example, you will use a spatially-constrained version of the agglomerative algorithm. This is a similar approach to that used above (the inner workings of the algorithm are different, however) with the difference that, in this case, observations can only be labelled in the same group if they are spatial neighbours, as defined by your spatial weights matrix queen. The way to interact with the algorithm is very similar to that above. You first set the parameters:\n\n1agg5 = cluster.AgglomerativeClustering(n_clusters=5, connectivity=queen.sparse)\n\n\n1\n\nscikit-learn expects the connectivity graph as a sparse array, rather than a libpysal.Graph.\n\n\n\n\nAnd you can run the algorithm by calling fit:\n\nagg5.fit(simd[subranks])\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/sklearn/cluster/_agglomerative.py:323: UserWarning: the number of connected components of the connectivity matrix is 2 &gt; 1. Completing it to avoid stopping the tree early.\n  connectivity, n_connected_components = _fix_connectivity(\n\n\nAgglomerativeClustering(connectivity=&lt;Compressed Sparse Row sparse array of dtype 'float64'\n    with 4126 stored elements and shape (746, 746)&gt;,\n                        n_clusters=5)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  AgglomerativeClustering?Documentation for AgglomerativeClusteringiFittedAgglomerativeClustering(connectivity=&lt;Compressed Sparse Row sparse array of dtype 'float64'\n    with 4126 stored elements and shape (746, 746)&gt;,\n                        n_clusters=5) \n\n\nAnd then you append the labels to the table in the same way as before:\n\nsimd[\"agg_5\"] = agg5.labels_\n\nAt this point, the column agg_5 is no different than kmeans_5: a categorical variable that can be mapped into a unique values choropleth. In fact, the following code snippet is exactly the same as before, only replacing the name of the variable to be mapped and the title:\n\nsimd[[\"agg_5\", 'geometry']].explore(\"agg_5\", categorical=True, tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nExtracting the region boundaries\nWith this result, you may want to extract the boundaries of the regions, rather than labels of individual data zones. To create the new boundaries “properly”, you need to dissolve all the polygons in each category into a single one. This is a standard GIS operation that is supported by geopandas.\n\n1simd_regions = simd[[\"agg_5\", \"geometry\"]].dissolve(\"agg_5\")\nsimd_regions\n\n\n1\n\nIf you are interested only in the boundaries, you can select just the two relevant colunms and dissolve geoemtries by values in the \"agg_5\" column. This uses groubpy under the hood, so you can potentially also aggregate other variables. See the documentation on how.\n\n\n\n\n\n\n\n\n\n\n\ngeometry\n\n\nagg_5\n\n\n\n\n\n0\nMULTIPOLYGON (((259347.187 665724.819, 259330 ...\n\n\n1\nPOLYGON ((253798.6 657973.6, 253742.3 657996.5...\n\n\n2\nMULTIPOLYGON (((251902.559 667950.621, 251901....\n\n\n3\nPOLYGON ((254848.289 667194.445, 254815.53 667...\n\n\n4\nPOLYGON ((257119.3 659900.4, 257112.887 659904...\n\n\n\n\n\n\n\n\nsimd_regions.reset_index().explore(\"agg_5\", categorical=True, tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\nHave a look at the chapter Clustering and Regionalization from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details and some other extensions.",
    "crumbs": [
      "Clustering",
      "Clustering and regionalisation"
    ]
  },
  {
    "objectID": "clustering/hands_on.html#acknowledgements",
    "href": "clustering/hands_on.html#acknowledgements",
    "title": "Clustering and regionalisation",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The code was updated. The text was slightly adapted to accommodate a different dataset, the module change, and the inclusion of spatially lagged K-means.",
    "crumbs": [
      "Clustering",
      "Clustering and regionalisation"
    ]
  },
  {
    "objectID": "clustering/concepts.html",
    "href": "clustering/concepts.html",
    "title": "Similar data belong together",
    "section": "",
    "text": "Slides from the talk introducing concepts of clustering and regionalisation.",
    "crumbs": [
      "Clustering",
      "Similar data belong together"
    ]
  },
  {
    "objectID": "clustering/concepts.html#acknowledgements",
    "href": "clustering/concepts.html#acknowledgements",
    "title": "Similar data belong together",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Clustering",
      "Similar data belong together"
    ]
  },
  {
    "objectID": "spatial_graphs/exercise.html",
    "href": "spatial_graphs/exercise.html",
    "title": "Graph here, graph there",
    "section": "",
    "text": "It is time to work with spatial weights matrices by yourself.",
    "crumbs": [
      "Spatial weights",
      "Graph here, graph there"
    ]
  },
  {
    "objectID": "spatial_graphs/exercise.html#zones-of-suburbanisation",
    "href": "spatial_graphs/exercise.html#zones-of-suburbanisation",
    "title": "Graph here, graph there",
    "section": "Zones of suburbanisation",
    "text": "Zones of suburbanisation\nYou are familiar with Prague from the last section, so let’s zoom out to zones of suburbanisation around Prague and other Czech cities. Head over to the DataHub of the Faculty of Science and download the dataset called “Zóny rezidenční suburbanizace 2008-2016” containing the zones of residential suburbanisation outlined by Ouřednı́ček, Klsák, and Špačková (2019). Download the dataset and open it with geopandas. Use \"OBJECTID\" column as an index (other feasible columns are not unique - they contain duplicated entries).\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nIf the link does not work, please report it and use the backup.\n\n\n\n\nInteraction with Graphs\n\nCreate a contiguity matrix using the queen criterion\nLet’s focus on Prague (ID 891 in the table). How many neighbours does it have?\nReproduce the previous section’s zoom plot with Prague and its neighbours. Can you make that plot as both static and interactive maps?\nCreate a block spatial weights matrix where every geometry is connected to other geometries in the NUTS2 region. For that, use the NUTS2_kod column of the table.\nCreate KNN weights with 5 neighbours. Remember that KNN expects point geometry.\nCompare the number of neighbours by geometry for the three weights matrices. Which one has more? Why?\n\n\n\nSpatial lag\nLet’s have a look at spatial lag. Before proceeding, you will probably need to pre-process the column with the population (\"obyv_31122\") since it comes as string. Assuming the GeoDataFrame is called suburbanisation, you can do the following to cast it to float.\nsuburbanisation[\"obyv_31122\"] = (\n    suburbanisation[\"obyv_31122\"].replace(\"?\", None).astype(float)\n)\n\nMeasure spatial lag (as mean, so don’t forget to standardise your weights) of the \"obyv_31122\" column using all weights matrices you have created.\nWhat is the difference in results for Prague? Do you know why?\nCompare Moran Plots based on spatial lags from your two matrices. What is causing the difference? Which one would you use in a study of population density and why?",
    "crumbs": [
      "Spatial weights",
      "Graph here, graph there"
    ]
  },
  {
    "objectID": "spatial_graphs/slides.html#we-need-its-mathematical-representation",
    "href": "spatial_graphs/slides.html#we-need-its-mathematical-representation",
    "title": "Space as math",
    "section": "We need its mathematical representation",
    "text": "We need its mathematical representation\n\ngeometries are not"
  },
  {
    "objectID": "spatial_graphs/slides.html#matrix",
    "href": "spatial_graphs/slides.html#matrix",
    "title": "Space as math",
    "section": "Matrix",
    "text": "Matrix\n\\[\n\\begin{array}{cccc}\n0 & w_{12} & \\dots & w_{1N} \\\\\nw_{21} & \\ddots & w_{ij} & \\vdots \\\\\n\\vdots & w_{ji} & 0 & \\vdots \\\\\nw_{N1} & \\dots & \\dots & 0\n\\end{array}\n\\]"
  },
  {
    "objectID": "spatial_graphs/slides.html#matrix-1",
    "href": "spatial_graphs/slides.html#matrix-1",
    "title": "Space as math",
    "section": "Matrix",
    "text": "Matrix\n\\[\n\\begin{array}{cccc}\n0 & 1 & 0 & 0 \\\\\n1 & 0 & 1 & 1 \\\\\n1 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0\n\\end{array}\n\\]"
  },
  {
    "objectID": "spatial_graphs/slides.html#contiguity",
    "href": "spatial_graphs/slides.html#contiguity",
    "title": "Space as math",
    "section": "Contiguity",
    "text": "Contiguity\nTwo geometries are considered neighbours if they share at least one vertex (queen contiguity) or one edge (rook contiguity)."
  },
  {
    "objectID": "spatial_graphs/slides.html#distance",
    "href": "spatial_graphs/slides.html#distance",
    "title": "Space as math",
    "section": "Distance",
    "text": "Distance\nTwo geometries are considered neighbours if they lie within a set threshold from each other\nDistance band"
  },
  {
    "objectID": "spatial_graphs/slides.html#distance-1",
    "href": "spatial_graphs/slides.html#distance-1",
    "title": "Space as math",
    "section": "Distance",
    "text": "Distance\nA geometry is considered a neighbour if it is no further than K-1 others\nK-nearest neighbour"
  },
  {
    "objectID": "spatial_graphs/slides.html#block-contiguityregions",
    "href": "spatial_graphs/slides.html#block-contiguityregions",
    "title": "Space as math",
    "section": "Block contiguity/regions",
    "text": "Block contiguity/regions\nTwo geometries are considered neighbours if they belong to the same group"
  },
  {
    "objectID": "spatial_graphs/slides.html#order-of-contiguity",
    "href": "spatial_graphs/slides.html#order-of-contiguity",
    "title": "Space as math",
    "section": "Order of contiguity",
    "text": "Order of contiguity"
  },
  {
    "objectID": "spatial_graphs/slides.html#component-analysis",
    "href": "spatial_graphs/slides.html#component-analysis",
    "title": "Space as math",
    "section": "Component analysis",
    "text": "Component analysis"
  },
  {
    "objectID": "spatial_graphs/exercise_answers.html",
    "href": "spatial_graphs/exercise_answers.html",
    "title": "Graph here, graph there",
    "section": "",
    "text": "Here is one way of getting the solution. There are others, feel free to share yours.\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nfrom libpysal import graph\nsuburbanisation = gpd.read_file(\"/Users/martin/Downloads/Z%C3%B3ny_reziden%C4%8Dn%C3%AD_suburbanizace_2008-2016.zip\")\nSet the index. In this case, you can potentially use the default as both are just integers. Note that \"obec_nazev\" is not unique so it will produce erroneous results.\nsuburbanisation = suburbanisation.set_index(\"OBJECTID\")\nCreate a contiguity matrix using the queen criterion\nqueen = graph.Graph.build_contiguity(suburbanisation, rook=False)\nLet’s focus on Prague (ID 891 in the table). How many neighbours does it have?\nOne option:\nlen(queen[891])\nOther option:\nqueen.cardinalities[891]\nReproduce the previous section’s zoom plot with Prague and its neighbours. Can you make that plot as both static and interactive maps?\nm = suburbanisation.loc[queen[891].index].explore(color=\"#25b497\")\nsuburbanisation.loc[[891]].explore(m=m, color=\"#fa94a5\")\nWith matplotlib:\nax = suburbanisation.loc[queen[891].index].plot(color=\"#25b497\")\nsuburbanisation.loc[[891]].plot(ax=ax, color=\"#fa94a5\")\nCreate a block spatial weights matrix where every geometry is connected to other geometries in the NUTS2 region. For that, use the NUTS2_kod column of the table.\nnuts = graph.Graph.build_block_contiguity(suburbanisation[\"NUTS2_kod\"])\nCreate KNN weights with 5 neighbours. Remember that KNN expects point geometry.\nknn5 = graph.Graph.build_knn(suburbanisation.set_geometry(suburbanisation.centroid), k=5)\nCompare the number of neighbours by geometry for the three weights matrices. Which one has more? Why?\nFor Prague only:\nknn5.cardinalities[891]\nnuts.cardinalities[891]\nPrague is a NUTS2 region by itself. See the data plotted by NUTS2:\nsuburbanisation.plot(\"NUTS2_kod\")\nFor whole data frame\nnuts.cardinalities.mean()\nknn5.cardinalities.mean()\nLet’s have a look at spatial lag. Before proceeding, you will probably need to pre-process the column with the population (“obyv_31122”) since it comes as string. Assuming the GeoDataFrame is called suburbanisation, you can do the following to cast it to float.\nsuburbanisation[\"obyv_31122\"] = (\n    suburbanisation[\"obyv_31122\"].replace(\"?\", None).astype(float)\n)\nMeasure spatial lag (as mean, so don’t forget to standardise your weights) of the “obyv_31122” column using all weights matrices you have created.\nqueen_r = queen.transform(\"R\")\nnuts_r = nuts.transform(\"R\")\nknn_r = knn5.transform(\"R\")\n\n# Prague is too extreme, let's log it\nsuburbanisation[\"obyv_log\"] = np.log(suburbanisation[\"obyv_31122\"])\n\nsuburbanisation[\"queen_lag\"] = queen_r.lag(suburbanisation[\"obyv_log\"])\nsuburbanisation[\"nuts_lag\"] = nuts_r.lag(suburbanisation[\"obyv_log\"])\nsuburbanisation[\"knn_lag\"] = knn_r.lag(suburbanisation[\"obyv_log\"])\nWhat is the difference in results for Prague? Do you know why?\nsuburbanisation.loc[891, [\"queen_lag\", \"nuts_lag\", \"knn_lag\"]]\nCompare Moran Plots based on spatial lags from your two matrices. What is causing the difference? Which one would you use in a study of population density and why?\nf, ax = plt.subplots(1, 2, figsize=(12, 6))\nsns.regplot(x=\"obyv_log\", y=\"queen_lag\", data=suburbanisation, ci=None, ax=ax[0], marker=\".\")\nsns.regplot(x=\"obyv_log\", y=\"knn_lag\", data=suburbanisation, ci=None, ax=ax[1], marker=\".\")\nThe plot above is done using subplots. You will see more of those, so check the documentation on how those work."
  },
  {
    "objectID": "data/edinburgh_airbnb_2023/preprocessing.html",
    "href": "data/edinburgh_airbnb_2023/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\n\n\nurl = \"http://data.insideairbnb.com/united-kingdom/scotland/edinburgh/2023-06-12/data/listings.csv.gz\"\nairbnb = pd.read_csv(url)\nairbnb = gpd.GeoDataFrame(\n    airbnb,\n    geometry=gpd.points_from_xy(\n        airbnb[\"longitude\"], airbnb[\"latitude\"], crs=\"EPSG:4326\"\n    ),\n)\nairbnb = airbnb.to_crs(\"EPSG:27700\")\n\n\nairbnb[[\"id\", \"bedrooms\", \"property_type\",\"price\", \"geometry\"]].to_file(\"../../interpolation/data/edinburgh_airbnb_2023.gpkg\")"
  },
  {
    "objectID": "data/brno_pedestrian_accidents/preprocessing.html",
    "href": "data/brno_pedestrian_accidents/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\n\nFile downloaded from https://data.brno.cz/datasets/mestobrno::nehody-s-účastí-chodců-pedestrian-accidents/about\n\ndf = gpd.read_file(\"brno_pedestrian_accidents.geojson\")\n\n\ndf = df.drop(columns=['OBJECTID', 'id', 'datum', 'hodina', 'POINT_X', \"POINT_Y\", \"GlobalID\", \"geometry\"])\n\n\ndf = df.dropna(subset=[\"d\", \"e\"])\n\n\ndf = df.set_geometry(gpd.points_from_xy(df[\"d\"], df[\"e\"], crs=5514)).drop(columns=[\"d\", \"e\"])\n\n\ndf.to_file(\"../../point_patterns/data/brno_pedestrian_accidents.gpkg\")"
  },
  {
    "objectID": "data/prague_zsj_2021/preprocessing.html",
    "href": "data/prague_zsj_2021/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\n\nDownloaded from https://datahub.natur.cuni.cz/datasets/e7420b689ff74fd98635306bf4ef6b7b_1/explore.\n\nzsj = gpd.read_file(\"zsj_prahy_2021.geojson\")\n\n\nzsj = zsj[[\"NAZ_ZSJ\", \"NAZ_KU\", \"pocet_osob\", \"geometry\"]]\nzsj.columns = [\"NAZ_ZSJ\", \"NAZ_KU\", \"n_people\", \"geometry\"]\n\n\nzsj.to_crs(\"EPSG:5514\").to_file(\"../../spatial_graphs/data/zsj_prague_2021.gpkg\")\n\n\nzsj\n\n\n\n\n\n\n\n\nNAZ_ZSJ\nNAZ_KU\nn_people\ngeometry\n\n\n\n\n0\nBěchovice\nBěchovice\n1563.0\nMULTIPOLYGON (((14.62471 50.08417, 14.62525 50...\n\n\n1\nNová Dubeč\nBěchovice\n662.0\nMULTIPOLYGON (((14.60489 50.08146, 14.60644 50...\n\n\n2\nBenice\nBenice\n728.0\nMULTIPOLYGON (((14.60585 50.01581, 14.60660 50...\n\n\n3\nBřeziněves\nBřeziněves\n1808.0\nMULTIPOLYGON (((14.48546 50.17206, 14.48539 50...\n\n\n4\nDolní Černošice\nLipence\n150.0\nMULTIPOLYGON (((14.36257 49.98042, 14.36262 49...\n\n\n...\n...\n...\n...\n...\n\n\n948\nK Březiněvsi\nĎáblice\n0.0\nMULTIPOLYGON (((14.48947 50.16393, 14.48990 50...\n\n\n949\nÚstřední vojenská nemocnice\nDejvice\n0.0\nMULTIPOLYGON (((14.38805 50.09856, 14.38906 50...\n\n\n950\nVýzkumný ústav vodohospodářský\nDejvice\n10.0\nMULTIPOLYGON (((14.39341 50.12189, 14.39352 50...\n\n\n951\nSídliště Jalodvorská\nKrč\n1737.0\nMULTIPOLYGON (((14.46301 50.02124, 14.46324 50...\n\n\n952\nStrašnice-Za Dráhou\nStrašnice\n242.0\nMULTIPOLYGON (((14.52096 50.06713, 14.52095 50...\n\n\n\n\n953 rows × 4 columns"
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html",
    "href": "data/chicago_influenza_1918/ReadMe.html",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "CC0 1.0\nGrantz, Kyra H. et al. (2017), Data from: Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918, Dryad, Dataset, https://doi.org/10.5061/dryad.48nv3\n\n\nPoint location and week of epidemic of 8,031 influenza and pneumonia deaths recorded during the 1918 Spanish flu pandemic within the city of Chicago. Data was digitized from 1920 City of Chicago Department of Health annual report Date last modified: 25-10-2016. Fields include: ID (FID), indicator of pneumonia (0 or 1, 0 indicates an influenza death, 1 an influenza and pneumonia death), x and y coordinates (with units in meters), and week (sequential week of epidemic). See paper for more details.\n\n\n\nSociodemographic data (including population size, illiteracy, unemployment) of 496 census tracts within the City of Chicago. Data was collected from the 1920 national census.\n\n\n\nShapefile of census tract boundaries in Chicago in 1920. File included in zip file include IL_tract_a.dbf, IL_tract_a.prj, IL_tract_a.sbn, IL_tract_a.sbx, IL_tract_a.shp, IL_tract_a.shp.xml, IL_tract_a.shx"
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#pandemic-influenza-mortality-chicago-usa-points.csv",
    "href": "data/chicago_influenza_1918/ReadMe.html#pandemic-influenza-mortality-chicago-usa-points.csv",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Point location and week of epidemic of 8,031 influenza and pneumonia deaths recorded during the 1918 Spanish flu pandemic within the city of Chicago. Data was digitized from 1920 City of Chicago Department of Health annual report Date last modified: 25-10-2016. Fields include: ID (FID), indicator of pneumonia (0 or 1, 0 indicates an influenza death, 1 an influenza and pneumonia death), x and y coordinates (with units in meters), and week (sequential week of epidemic). See paper for more details."
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#fine-scale-sociodemographics-of-chicago-usa-1920-tracts.csv",
    "href": "data/chicago_influenza_1918/ReadMe.html#fine-scale-sociodemographics-of-chicago-usa-1920-tracts.csv",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Sociodemographic data (including population size, illiteracy, unemployment) of 496 census tracts within the City of Chicago. Data was collected from the 1920 national census."
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#shapefile-of-census-tract-boundaries-in-chicago-in-1920-shapefile.zip",
    "href": "data/chicago_influenza_1918/ReadMe.html#shapefile-of-census-tract-boundaries-in-chicago-in-1920-shapefile.zip",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Shapefile of census tract boundaries in Chicago in 1920. File included in zip file include IL_tract_a.dbf, IL_tract_a.prj, IL_tract_a.sbn, IL_tract_a.sbx, IL_tract_a.shp, IL_tract_a.shp.xml, IL_tract_a.shx"
  },
  {
    "objectID": "data/edinburgh_simd_2020/preprocessing.html",
    "href": "data/edinburgh_simd_2020/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import httpx\nimport geopandas as gpd\n\n\nurl = \"https://maps.gov.scot/ATOM/shapefiles/SG_SIMD_2020.zip\"\n\n\nr = httpx.get(url, verify=False)\n\n\nsimd = gpd.read_file(r.content, engine=\"pyogrio\")\n\n\nedi = simd.query(\"LAName == 'City of Edinburgh'\").copy()\n\n\nedi[\"EmpRate\"] = edi[\"EmpRate\"].str.strip(\"%\").astype(int)\nedi[\"IncRate\"] = edi[\"IncRate\"].str.strip(\"%\").astype(int)\n\n\nedi.to_file(\"../../interpolation/data/edinburgh_simd_2020.gpkg\")"
  },
  {
    "objectID": "data_wrangling/exercise.html",
    "href": "data_wrangling/exercise.html",
    "title": "Learning pandas",
    "section": "",
    "text": "This section is about learning how to work with pandas by using it without much guidance. You will play with the dataset of the Scottish Index of Multiple Deprivation (SIMD). Specifically, you will load a table containing the rank of each data zone according to the overall SIMD and according to its subdomains (check the links above if you would like to learn more).",
    "crumbs": [
      "Open Data Science",
      "Learning pandas"
    ]
  },
  {
    "objectID": "data_wrangling/exercise.html#data-preparation",
    "href": "data_wrangling/exercise.html#data-preparation",
    "title": "Learning pandas",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore you start playing with the data, you need to figure out how to read the data. It is not a CSV file this time, but XLSX. pandas is capable of reading Excel files like this one. Instead of the read_csv you used before, you just need to use read_excel this time.\nTake a second to download the dataset and check its structure in Excel before moving forward.\nYou have probably figured out that there are two sheets in this file, and you need to read the second one, called \"SIMD 2020v2 ranks\".\nLet’s start by importing pandas.\n\nimport pandas as pd\n\nSince you have the file in your Downloads folder now, you can read it from there. Or you can read it directly from gov.scot.\n\nurl = \"https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2020/01/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/documents/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/govscot%3Adocument/SIMD%2B2020v2%2B-%2Branks.xlsx\"\n\nTo read the proper sheet, you need to specify sheet_name to read_excel. pandas will download the file for you and open it as a DataFrame.\n\nsimd = pd.read_excel(url, sheet_name=\"SIMD 2020v2 ranks\")\n\n\n\n\n\n\n\nReading a local file\n\n\n\n\n\nIf you want to read the file from your downloads folder, you will need to pass its location. That can look like this if you are on macOS:\nsimd = pd.read_excel(\n    \"/Users/martin/Downloads/SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\nOr like this if you are on Windows. Note the r in front of the string, ensuring that the backlashes (\\), common in Windows file paths, are properly interpreted. Or you can replace them with /:\nsimd = pd.read_excel(\n    r\"C:\\Users\\martin\\Downloads\\SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\nAlternatively, you can read the file from the data folder attached to this lecture.\nsimd = pd.read_excel(\n    \"https://martinfleischmann.net/sds/data_wrangling/data/SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\n\n\n\nAnd you should be good to go!\n\nsimd.head()\n\n\n\n\n\n\n\n\nData_Zone\nIntermediate_Zone\nCouncil_area\nTotal_population\nWorking_age_population\nSIMD2020v2_Rank\nSIMD2020v2_Income_Domain_Rank\nSIMD2020_Employment_Domain_Rank\nSIMD2020_Health_Domain_Rank\nSIMD2020_Education_Domain_Rank\nSIMD2020_Access_Domain_Rank\nSIMD2020_Crime_Domain_Rank\nSIMD2020_Housing_Domain_Rank\n\n\n\n\n0\nS01006506\nCulter\nAberdeen City\n894\n580\n4691\n3936.0\n3220.0\n5174\n5887\n4724\n4664.0\n3248.0\n\n\n1\nS01006507\nCulter\nAberdeen City\n793\n470\n4862\n4829.0\n4481.0\n5051\n4384\n2148\n4602.0\n3486.0\n\n\n2\nS01006508\nCulter\nAberdeen City\n624\n461\n5686\n4460.0\n5110.0\n5942\n5915\n4200\n4563.5\n5342.0\n\n\n3\nS01006509\nCulter\nAberdeen City\n537\n307\n4332\n3481.0\n3229.0\n3871\n6401\n3982\n5626.0\n4394.5\n\n\n4\nS01006510\nCulter\nAberdeen City\n663\n415\n3913\n3344.0\n3448.0\n3049\n4092\n5588\n3885.0\n3736.0",
    "crumbs": [
      "Open Data Science",
      "Learning pandas"
    ]
  },
  {
    "objectID": "data_wrangling/exercise.html#learn-about-scotland",
    "href": "data_wrangling/exercise.html#learn-about-scotland",
    "title": "Learning pandas",
    "section": "Learn about Scotland",
    "text": "Learn about Scotland\nIn the previous chapter, you learned the basics of pandas. Now is the time to use this knowledge and learn something about Scotland. The SIMD rankings are similar in structure to Chicago Influenza rates you have seen before, but not too much. Each row is allocated to a single area, but the table does not follow the “tidy” principles.\nTry answering the following questions about the dataset:\n\nWhich data zone is the most deprived (lowest ranking?) Which council area is it?\nCan you add a column with a proportion of the working age population in each data zone?\nWhich council area is, on average, the least deprived based on the Income domain?\nWhat is the total population of the “Glasgow City” council?\nCan you plot the ranking distribution in “Glasgow City”? How does it compare to the “City of Edinburgh”?\nCan you figure out how to create a scatter plot of a relationship between the education and health domain rankings?\nWhat else can you derive from the data?",
    "crumbs": [
      "Open Data Science",
      "Learning pandas"
    ]
  },
  {
    "objectID": "data_wrangling/slides.html#jupyter",
    "href": "data_wrangling/slides.html#jupyter",
    "title": "Open tools and open mindset",
    "section": "Jupyter",
    "text": "Jupyter"
  },
  {
    "objectID": "data_wrangling/exercise_answers.html",
    "href": "data_wrangling/exercise_answers.html",
    "title": "Learning pandas",
    "section": "",
    "text": "Here is one way of getting the solution. There are others, feel free to share yours.\n\nimport pandas as pd\nimport seaborn as sns\n\n\nurl = \"https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2020/01/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/documents/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/govscot%3Adocument/SIMD%2B2020v2%2B-%2Branks.xlsx\"\n\n\nsimd = pd.read_excel(url, sheet_name=\"SIMD 2020v2 ranks\")\n\nWhich data zone is the most deprived (lowest ranking?) Which council area is it?\n\nsimd.sort_values(\"SIMD2020v2_Rank\")\n\n\n\n\n\n\n\n\nData_Zone\nIntermediate_Zone\nCouncil_area\nTotal_population\nWorking_age_population\nSIMD2020v2_Rank\nSIMD2020v2_Income_Domain_Rank\nSIMD2020_Employment_Domain_Rank\nSIMD2020_Health_Domain_Rank\nSIMD2020_Education_Domain_Rank\nSIMD2020_Access_Domain_Rank\nSIMD2020_Crime_Domain_Rank\nSIMD2020_Housing_Domain_Rank\n\n\n\n\n4385\nS01010891\nGreenock Town Centre and East Central\nInverclyde\n446\n310\n1\n8.0\n4.0\n2\n7\n6080\n17.0\n666.0\n\n\n3739\nS01010245\nCarntyne West and Haghill\nGlasgow City\n796\n554\n2\n3.0\n7.0\n3\n6\n3352\n515.0\n640.0\n\n\n5092\nS01011598\nCliftonville\nNorth Lanarkshire\n801\n603\n3\n22.0\n3.0\n40\n4\n3287\n55.0\n1079.0\n\n\n5562\nS01012068\nPaisley Ferguslie\nRenfrewshire\n480\n318\n4\n4.0\n12.0\n4\n5\n5622\n376.0\n514.0\n\n\n3616\nS01010122\nNorth Barlanark and Easterhouse South\nGlasgow City\n511\n373\n5\n17.0\n15.0\n9\n54\n5325\n85.0\n447.5\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n53\nS01006559\nMidstocket\nAberdeen City\n601\n404\n6972\n6709.0\n6749.0\n6845\n6918\n6569\n4464.0\n5199.0\n\n\n2116\nS01008622\nMarchmont West\nCity of Edinburgh\n512\n406\n6973\n6969.0\n6963.0\n6917\n6686\n6774\n5555.0\n1421.0\n\n\n67\nS01006573\nWest End North\nAberdeen City\n790\n535\n6974\n6702.0\n6895.0\n6893\n6804\n5395\n5882.0\n6618.0\n\n\n55\nS01006561\nMidstocket\nAberdeen City\n728\n443\n6975\n6888.0\n6873.0\n6714\n6629\n6844\n3906.0\n6509.0\n\n\n2355\nS01008861\nStockbridge\nCity of Edinburgh\n777\n533\n6976\n6950.0\n6948.0\n6966\n6929\n5773\n5028.0\n5056.0\n\n\n\n\n6976 rows × 13 columns\n\n\n\nYou can read the value from the table or extract it using iloc, which works like loc but based on a position.\n\nsimd.sort_values(\"SIMD2020v2_Rank\").iloc[0][\"Council_area\"]\n\n'Inverclyde'\n\n\nCan you add a column with a proportion of the working age population in each data zone?\n\nsimd[\"working_proportion\"] = simd[\"Working_age_population\"] / simd[\"Total_population\"]\n\nWhich council area is, on average, the least deprived based on the Income domain?\n\nsimd.groupby(\"Council_area\")[\"SIMD2020v2_Income_Domain_Rank\"].mean().sort_values(ascending=False).head(1)\n\nCouncil_area\nEast Renfrewshire    4852.442623\nName: SIMD2020v2_Income_Domain_Rank, dtype: float64\n\n\nWhat is the total population of the “Glasgow City” council?\n\nsimd.groupby(\"Council_area\")[\"Total_population\"].sum()[\"Glasgow City\"]\n\n621020\n\n\nCan you plot the ranking distribution in “Glasgow City”? How does it compare to the “City of Edinburgh”?\n\nglasgow = simd.query(\"Council_area == 'Glasgow City'\")\nglasgow[\"SIMD2020v2_Rank\"].plot.hist()\n\n\n\n\n\n\n\n\n\nedinburgh = simd.query(\"Council_area == 'City of Edinburgh'\")\nedinburgh[\"SIMD2020v2_Rank\"].plot.hist()\n\n\n\n\n\n\n\n\nOr using seaborn.\n\nsns.displot(glasgow[\"SIMD2020v2_Rank\"])\n\n\n\n\n\n\n\n\n\nsns.displot(edinburgh[\"SIMD2020v2_Rank\"])\n\n\n\n\n\n\n\n\nCan you figure out how to create a scatter plot of a relationship between the education and health domain rankings?\n\nsimd.plot.scatter(\"SIMD2020_Education_Domain_Rank\", \"SIMD2020_Health_Domain_Rank\")\n\n\n\n\n\n\n\n\nOr using seaborn.\n\nsns.scatterplot(x=\"SIMD2020_Education_Domain_Rank\", y=\"SIMD2020_Health_Domain_Rank\", data=simd)\n\n\n\n\n\n\n\n\nWhat else can you derive from the data?\nPlenty :)."
  },
  {
    "objectID": "raster_data/hands_on.html",
    "href": "raster_data/hands_on.html",
    "title": "Population as a raster grid",
    "section": "",
    "text": "Until now, all the data you were working with were tables. However, not everything is a table. Raster data are not that common in social geography, but spatial data science is full of it, from satellite imagery to population grids. In this session, you will learn how to work with spatial raster data in Python and how to link raster to vector using the ecosystem around the xarray package.",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#arrays-and-their-many-dimensions",
    "href": "raster_data/hands_on.html#arrays-and-their-many-dimensions",
    "title": "Population as a raster grid",
    "section": "Arrays and their many dimensions",
    "text": "Arrays and their many dimensions\nRaster data are represented as arrays. Those can take many forms and shapes. You already know pandas data structures, so let’s start with those.\nA pandas.Series is a 1-dimensional array with an index. A typical array contains values of the same data type (e.g. float numbers), as does a typical Series.\nWhen it comes to geospatial raster data, one dimension is not enough. Even the most basic raster, something like a digital terrain model (DTM), requires two dimensions. One represents longitude (or x when projected), while the other latitude (or y), resulting in a 2-dimensional array.\nBut you don’t have to stop there. Take a typical satellite image. The longitude and latitude dimensions are still present, but you have different bands representing blue, green, red and often near-infra-red frequencies, resulting in a 3-dimensional array (lon, lat, band). Throw in time, and you’re now dealing with a 4-dimensional array (lon, lat, band, time).\nAll these use cases fall under the umbrella of N-dimensional array handling covered by the xarray package. Whereas a pandas.Series is a 1-dimensional array with an index, xarray.DataArray is an N-dimensional array with N indexes. Combining multiple Series gives you a pandas.DataFrame, where each column can have a different data type (e.g. one numbers, other names). Combining multiple xarray.DataArrays gives you a xarray.Dataset, where each array can have a different data type. There’s a lot of similarity between pandas and xarray, but also some differences.\nLet’s read some raster and explore xarray objects in practice.\n\nimport datashader as ds\nimport geopandas as gpd\nimport rioxarray\nimport xarray as xr\nimport osmnx as ox\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport xvec",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#population-grids",
    "href": "raster_data/hands_on.html#population-grids",
    "title": "Population as a raster grid",
    "section": "Population grids",
    "text": "Population grids\nToday, you will be working with the data from the Global Human Settlement Layer (GHSL) developed by the Joint Research Centre of the European Commission. Unlike in all previous hands-on sessions, the data is not pre-processed and you could read it directly from the open data repository. However, since that seems to be a bit unstable lately, use the copy stored as part of this course.\nThe first layer you will open is a population grid. GHSL covers the whole world divided into a set of tiles, each covering an area of 1,000 by 1,000 km at a resolution of 100m per pixel. The link below points to a single tile1 covering most of Eastern Europe.\n\n1pop_url = (\n    \"https://martinfleischmann.net/sds/raster_data/data/\"\n    \"GHS_POP_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip\"\n      )\npop_url\n\n\n1\n\nThe URL is long. It may be better to write it as a multi-line string to avoid a long line.\n\n\n\n\n'https://martinfleischmann.net/sds/raster_data/data/GHS_POP_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip'\n\n\n\n\n\n\n\n\nOriginal data\n\n\n\n\n\nYou can, alternatively, try reading the original data directly using this URL:\npop_url = (\n    \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/\"\n    \"GHS_POP_GLOBE_R2023A/GHS_POP_E2030_GLOBE_R2023A_54009_100/\"\n    \"V1-0/tiles/GHS_POP_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip\"\n      )\n\n\n\nThe pop_url points to a ZIP file. Within that ZIP file is a GeoTIFF containing the actual raster. There is often no need to download and unzip the file as there’s a good chance you can read it directly.\n\nReading rasters with rioxarray\nxarray, like pandas is an agnostic library. It is designed for N-dimensional arrays but not necessarily geospatial arrays (although that is often the case…). It means that by default, it is not able to read geospatial file formats like GeoTIFF. That is where rioxarray comes in. It comes with the support of the usual geo-specific things like specific file formats or CRS.\n\n1p = f\"zip+{pop_url}!GHS_POP_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.tif\"\n2population = rioxarray.open_rasterio(p, masked=True)\npopulation\n\n\n1\n\nCreate a path to the file inside the ZIP. Add the \"zip+\" prefix and then the path to the actual file inside the archive, starting with \"!\".\n\n2\n\nUse rioxarray to open the file using the lower-level rasterio package. With masked=True ensure, that the missing values are properly masked out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 10000, x: 10000)&gt; Size: 800MB\n[100000000 values with dtype=float64]\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 80kB 9.59e+05 9.592e+05 ... 1.959e+06 1.959e+06\n  * y            (y) float64 80kB 6e+06 6e+06 6e+06 6e+06 ... 5e+06 5e+06 5e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 10000x: 10000...[100000000 values with dtype=float64]Coordinates: (4)band(band)int641array([1])x(x)float649.59e+05 9.592e+05 ... 1.959e+06array([ 959050.,  959150.,  959250., ..., 1958750., 1958850., 1958950.])y(y)float646e+06 6e+06 6e+06 ... 5e+06 5e+06array([5999950., 5999850., 5999750., ..., 5000250., 5000150., 5000050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :959000.0 100.0 0.0 6000000.0 0.0 -100.0array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([ 959050.0,  959150.0,  959250.0,  959350.0,  959450.0,  959550.0,\n        959650.0,  959750.0,  959850.0,  959950.0,\n       ...\n       1958050.0, 1958150.0, 1958250.0, 1958350.0, 1958450.0, 1958550.0,\n       1958650.0, 1958750.0, 1958850.0, 1958950.0],\n      dtype='float64', name='x', length=10000))yPandasIndexPandasIndex(Index([5999950.0, 5999850.0, 5999750.0, 5999650.0, 5999550.0, 5999450.0,\n       5999350.0, 5999250.0, 5999150.0, 5999050.0,\n       ...\n       5000950.0, 5000850.0, 5000750.0, 5000650.0, 5000550.0, 5000450.0,\n       5000350.0, 5000250.0, 5000150.0, 5000050.0],\n      dtype='float64', name='y', length=10000))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nAbove, you can see the representation of the population grid as a DataArray. It has three dimensions (\"band\", \"x\", \"y\") with a resolution 1x10,000x10,000 and values as float.\nrioxarray gives you a handy .rio accessor on xarray objects, allowing you to access geospatial-specific tools. Like retrieval of CRS.\n\npopulation.rio.crs\n\nCRS.from_wkt('PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]')\n\n\nOr the extent of the raster (in the CRS shown above).\n\npopulation.rio.bounds()\n\n(959000.0, 5000000.0, 1959000.0, 6000000.0)\n\n\nThe missing, masked data can be represented as as specific value, especially when dealing with integer arrays. You can check which one:\n\npopulation.rio.nodata\n\nnan\n\n\n\n\nPlotting with datashader\nPlotting a raster with a resolution of 10,000x10,000 pixels can be tricky. Often, the resolution is even larger than that. The best way to plot is to resample the data to a smaller resolution that better fits the screen. A handy tool that can do that quickly is datashader. Let’s use it to plot the array as 600x600 pixels.\n\n1canvas = ds.Canvas(plot_width=600, plot_height=600)\n2agg = canvas.raster(population.where(population&gt;0).sel(band=1))\nagg\n\n\n1\n\nCreate a canvas with a specific resolution.\n\n2\n\nSelect pixels with a population more than 0 (population.where(population&gt;0)), select a single band to get 2-dimensional array (.sel(band=1)) and pass the result to the canvas.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 600, x: 600)&gt; Size: 3MB\narray([[4.21513869, 3.52179019, 6.29294423, ..., 1.66938128, 0.82322911,\n               nan],\n       [1.04041781, 1.57566844, 4.50548627, ...,        nan, 0.15449866,\n               nan],\n       [       nan, 3.18057789, 2.21502486, ...,        nan,        nan,\n               nan],\n       ...,\n       [       nan,        nan,        nan, ..., 4.05967611, 1.9045163 ,\n        3.70262405],\n       [       nan,        nan,        nan, ..., 7.2545469 , 6.44937184,\n        1.5507871 ],\n       [       nan,        nan,        nan, ..., 0.76526973, 1.16737383,\n        0.21985548]])\nCoordinates:\n  * x        (x) float64 5kB 9.598e+05 9.615e+05 ... 1.957e+06 1.958e+06\n  * y        (y) float64 5kB 5.999e+06 5.998e+06 ... 5.002e+06 5.001e+06\nAttributes:\n    res:      100.0\n    x_range:  (959000.0, 1959000.0)\n    y_range:  (5000000.0, 6000000.0)xarray.DataArrayy: 600x: 6004.215 3.522 6.293 2.667 2.879 2.336 ... 1.52 1.683 0.7653 1.167 0.2199array([[4.21513869, 3.52179019, 6.29294423, ..., 1.66938128, 0.82322911,\n               nan],\n       [1.04041781, 1.57566844, 4.50548627, ...,        nan, 0.15449866,\n               nan],\n       [       nan, 3.18057789, 2.21502486, ...,        nan,        nan,\n               nan],\n       ...,\n       [       nan,        nan,        nan, ..., 4.05967611, 1.9045163 ,\n        3.70262405],\n       [       nan,        nan,        nan, ..., 7.2545469 , 6.44937184,\n        1.5507871 ],\n       [       nan,        nan,        nan, ..., 0.76526973, 1.16737383,\n        0.21985548]])Coordinates: (2)x(x)float649.598e+05 9.615e+05 ... 1.958e+06array([ 959833.333333,  961500.      ,  963166.666667, ..., 1954833.333333,\n       1956500.      , 1958166.666667])y(y)float645.999e+06 5.998e+06 ... 5.001e+06array([5999166.666667, 5997500.      , 5995833.333333, ..., 5004166.666667,\n       5002500.      , 5000833.333333])Indexes: (2)xPandasIndexPandasIndex(Index([ 959833.3333333334,           961500.0,  963166.6666666667,\n        964833.3333333334,           966500.0,  968166.6666666667,\n        969833.3333333334,           971500.0,  973166.6666666667,\n        974833.3333333334,\n       ...\n        1943166.666666667, 1944833.3333333337, 1946500.0000000002,\n        1948166.666666667, 1949833.3333333337, 1951500.0000000002,\n        1953166.666666667, 1954833.3333333337, 1956500.0000000002,\n        1958166.666666667],\n      dtype='float64', name='x', length=600))yPandasIndexPandasIndex(Index([5999166.666666666,         5997500.0, 5995833.333333333,\n       5994166.666666666,         5992500.0, 5990833.333333333,\n       5989166.666666666,         5987500.0, 5985833.333333333,\n       5984166.666666666,\n       ...\n       5015833.333333333, 5014166.666666666,         5012500.0,\n       5010833.333333333, 5009166.666666666,         5007500.0,\n       5005833.333333333, 5004166.666666666,         5002500.0,\n       5000833.333333333],\n      dtype='float64', name='y', length=600))Attributes: (3)res :100.0x_range :(959000.0, 1959000.0)y_range :(5000000.0, 6000000.0)\n\n\nYou can see that the result is a new xarray.DataArray with a resolution 600x600. The built-in matplotlib-based plotting can easily handle that.\n\n_ = agg.plot()\n\n\n\n\nPopulation grid resampled to 600x600 pixels",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#clipping-based-on-geometry",
    "href": "raster_data/hands_on.html#clipping-based-on-geometry",
    "title": "Population as a raster grid",
    "section": "Clipping based on geometry",
    "text": "Clipping based on geometry\nDaling with large rasters is often impractical if you are interested in a small subset, for example, representing a single city.\n\nFunctional Urban Areas\nIn this case, you may want to work only with the data covering Budapest, Hungary, defined by its functional urban area (FUA), available as another data product on GHSL. FUAs are available as a single GeoPackage with vector geometries.\n\n1fua_url = (\n    \"https://martinfleischmann.net/sds/raster_data/data/\"\n    \"GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.zip\"\n)\n2p = f\"zip+{fua_url}!GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.gpkg\"\n3fuas = gpd.read_file(p)\n4budapest = fuas.query(\"eFUA_name == 'Budapest'\")\nbudapest.explore()\n\n\n1\n\nGet the URL.\n\n2\n\nSpecify the path to read the file from the ZIP.\n\n3\n\nRead the table with geopandas.\n\n4\n\nFilter only Budapest.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nOriginal data\n\n\n\n\n\nYou can, alternatively, try reading the original data directly using this URL:\nfua_url = (\n    \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/\"\n    \"GHS_FUA_UCDB2015_GLOBE_R2019A/V1-0/\"\n    \"GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.zip\"\n)\n\n\n\nIf you want to clip the population raster to the extent of Budapest FUA, you can use the clip method from the rioxarray extension of xarray.\n\n1population_bud = population.rio.clip(\n2    budapest.to_crs(population.rio.crs).geometry\n)\npopulation_bud\n\n\n1\n\nUse .rio.clip to clip the geospatial raster to the extent of a geometry.\n\n2\n\nEnsure the budapest is in the same CRS as the population and pass its geometry.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 840, x: 830)&gt; Size: 6MB\narray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]])\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]])Coordinates: (4)band(band)int641array([1])x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nThe raster is no longer 10,000x10,000 pixels but only 840x830, covering the extent of Budapest FUA. You can easily check that by plotting the clipped array.\n\n_ = population_bud.plot()\n\n\n\n\nPopulation grid clipped to Budapest FUA",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#array-manipulation",
    "href": "raster_data/hands_on.html#array-manipulation",
    "title": "Population as a raster grid",
    "section": "Array manipulation",
    "text": "Array manipulation\nWhile this is technically a 3-dimensional array, the dimension \"band\" has only one value. Normally, you would get a 2-dimensional array representing a selected band using the .sel() method.\n\npopulation_bud.sel(band=1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 840, x: 830)&gt; Size: 6MB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n    band         int64 8B 1\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayy: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (4)band()int641array(1)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (2)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nBut if you have only one band, you can squeeze the array and get rid of that dimension that is not needed.\n\npopulation_bud = population_bud.drop_vars(\"band\").squeeze()\npopulation_bud\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 840, x: 830)&gt; Size: 6MB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayy: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (3)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (2)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nNow a lot what you know from pandas works equally in xarray. Getting the minimum:\n\npopulation_bud.min()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray ()&gt; Size: 8B\narray(0.)\nCoordinates:\n    spatial_ref  int64 8B 0xarray.DataArray0.0array(0.)Coordinates: (1)spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (0)Attributes: (0)\n\n\nAs expected, there are some cells with no inhabitants.\n\npopulation_bud.max()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray ()&gt; Size: 8B\narray(603.90405273)\nCoordinates:\n    spatial_ref  int64 8B 0xarray.DataArray603.9array(603.90405273)Coordinates: (1)spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (0)Attributes: (0)\n\n\nThe densest cell, on the other hand, has more than 600 people per hectare.\n\npopulation_bud.mean()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray ()&gt; Size: 8B\narray(6.77593517)\nCoordinates:\n    spatial_ref  int64 8B 0xarray.DataArray6.776array(6.77593517)Coordinates: (1)spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (0)Attributes: (0)\n\n\nMean is, however, only below 7.\n\npopulation_bud.median()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray ()&gt; Size: 8B\narray(0.)\nCoordinates:\n    spatial_ref  int64 8B 0xarray.DataArray0.0array(0.)Coordinates: (1)spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (0)Attributes: (0)\n\n\nWhile the median is 0, there are a lot of cells with 0.\n\n\n\n\n\n\nDataArray vs scalar\n\n\n\nNotice that xarray always returns another DataArray even with a single value. If you want to get that scalar value, you can use .item().\n\npopulation_bud.mean().item()\n\n6.775935172506021\n\n\n\n\nYou can plot the distribution of values across the array.\n\n_ = population_bud.plot.hist(bins=100)\n\n\n\n\nHistogram of population counts\n\n\n\n\nIndeed, there are a lot of zeros. Let’s filter them out and check the distribution again.\n\n_ = population_bud.where(population_bud&gt;0).plot.hist(bins=100)\n\n\n\n\nHistogram of population counts excluding 0\n\n\n\n\nAs with many observations in urban areas, this follows a power-law-like distribution with a lot of observations with tiny values and only a few with large ones.",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#array-operations",
    "href": "raster_data/hands_on.html#array-operations",
    "title": "Population as a raster grid",
    "section": "Array operations",
    "text": "Array operations\nLet’s assume that you want to normalise population counts by the built-up volume, which is available as another GHSL product. This time, on a grid again.\n\nvolume_url = (\n    \"https://martinfleischmann.net/sds/raster_data/data/\"\n    \"GHS_BUILT_V_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip\"\n)\nvolume_url\n\n'https://martinfleischmann.net/sds/raster_data/data/GHS_BUILT_V_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip'\n\n\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nYou can, alternatively, try reading the original data directly using this URL:\nvolume_url = (\n    \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/\"\n    \"GHS_BUILT_V_GLOBE_R2023A/GHS_BUILT_V_E2030_GLOBE_R2023A_54009_100/V1-0/tiles/\"\n    \"GHS_BUILT_V_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.zip\"\n)\n\n\n\nAll work the same as before. You read the GeoTIFF as a DataArray.\n\np = f\"zip+{volume_url}!GHS_BUILT_V_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C20.tif\"\nbuilt_up = rioxarray.open_rasterio(p, masked=True).drop_vars(\"band\").squeeze()\nbuilt_up\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 10000, x: 10000)&gt; Size: 800MB\n[100000000 values with dtype=float64]\nCoordinates:\n  * x            (x) float64 80kB 9.59e+05 9.592e+05 ... 1.959e+06 1.959e+06\n  * y            (y) float64 80kB 6e+06 6e+06 6e+06 6e+06 ... 5e+06 5e+06 5e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayy: 10000x: 10000...[100000000 values with dtype=float64]Coordinates: (3)x(x)float649.59e+05 9.592e+05 ... 1.959e+06array([ 959050.,  959150.,  959250., ..., 1958750., 1958850., 1958950.])y(y)float646e+06 6e+06 6e+06 ... 5e+06 5e+06array([5999950., 5999850., 5999750., ..., 5000250., 5000150., 5000050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :959000.0 100.0 0.0 6000000.0 0.0 -100.0array(0)Indexes: (2)xPandasIndexPandasIndex(Index([ 959050.0,  959150.0,  959250.0,  959350.0,  959450.0,  959550.0,\n        959650.0,  959750.0,  959850.0,  959950.0,\n       ...\n       1958050.0, 1958150.0, 1958250.0, 1958350.0, 1958450.0, 1958550.0,\n       1958650.0, 1958750.0, 1958850.0, 1958950.0],\n      dtype='float64', name='x', length=10000))yPandasIndexPandasIndex(Index([5999950.0, 5999850.0, 5999750.0, 5999650.0, 5999550.0, 5999450.0,\n       5999350.0, 5999250.0, 5999150.0, 5999050.0,\n       ...\n       5000950.0, 5000850.0, 5000750.0, 5000650.0, 5000550.0, 5000450.0,\n       5000350.0, 5000250.0, 5000150.0, 5000050.0],\n      dtype='float64', name='y', length=10000))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nAnd clip it to the same extent.\n\nbuilt_up_bud = built_up.rio.clip(budapest.to_crs(built_up.rio.crs).geometry)\nbuilt_up_bud\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 840, x: 830)&gt; Size: 6MB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayy: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (3)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (2)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nYou can quickly check what it looks like.\n\n_ = built_up_bud.plot(cmap=\"magma_r\")\n\n\n\n\nBuilt-up volume\n\n\n\n\nThe two grids are aligned, meaning that pixels with the same coordinates represent the same area. This allows us to directly perform array algebra. Again, you know this from pandas.\n\n1pop_density = population_bud /  built_up_bud\npop_density\n\n\n1\n\nDivide the population by built-up volume to get a normalised value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 840, x: 830)&gt; Size: 6MB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0xarray.DataArrayy: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (3)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)Indexes: (2)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (0)\n\n\nThe result is a new array that inherits spatial information (spatial_ref) but contains newly computed values.\n\n_ = pop_density.plot(cmap=\"cividis_r\")\n\n\n\n\nPopulation grid normalised by the built-up volume\n\n\n\n\nThe resulting array can then be saved to a GeoTIFF using rioxarray.\n\npop_density.rio.to_raster(\"population_density.tif\")",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#extracting-values-for-locations",
    "href": "raster_data/hands_on.html#extracting-values-for-locations",
    "title": "Population as a raster grid",
    "section": "Extracting values for locations",
    "text": "Extracting values for locations\nA common need is to extract values from raster data for a specific location of interest. That is a first type of interaction between raster and vector data (points in this case). To illustrate the use case, create a set of random points covering the area of budapest.\n\n1locations = budapest.sample_points(1000).explode(ignore_index=True)\nlocations.head()\n\n\n1\n\nsample_points() method creates a random sample of the selected size within each geometry in a GeoSeries. Each sample set is a MultiPoint but in this case, you want individual points. That is when explode() is useful, since it explodes each multi-part geometry into individual points. Because you are not interested in the original index, you can use ignore_index=True to get the default pd.RangeIndex.\n\n\n\n\n0     POINT (1466809.89 5634552.882)\n1    POINT (1466925.395 5636571.046)\n2    POINT (1468103.443 5635794.353)\n3    POINT (1468262.914 5625201.568)\n4     POINT (1468286.065 5624476.38)\nName: sampled_points, dtype: geometry\n\n\nCheck how the sample looks on a map.\n\nlocations.explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nRandom sampling and reproducibility\n\n\n\nThe points sampled from budapest will be different every time you run the sample_points() method. If you want to fix the result, you can pass a seed value to a random number generator as rng=42. With the same seed value, the result will be always the same. This is useful, especially if you are interested in the reproducibility of your code.\n\n\nThe xarray ecosystem offers many ways of extracting point values. Below, you will use the implementation from the xvec package. Create a new xarray.DataArray with all three arrays you created so far to see the benefits of using xvec below.\n\n1bud_cube = xr.concat(\n2    [pop_density, population_bud, built_up_bud],\n3    dim=pd.Index(\n4        [\"density\", \"population\", \"built-up volume\"],\n5        name=\"measurement\",\n    )\n)\nbud_cube\n\n\n1\n\nUse xr.concat function to concatenate all arrays together.\n\n2\n\nSpecify which arrays shall be concatenated.\n\n3\n\nDefine a new dimension created along the axis of concatenation. Use the pd.Index to create a new index along this dimension.\n\n4\n\nSpecify coordinates along the new dimension.\n\n5\n\nGive the dimension a name.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (measurement: 3, y: 840, x: 830)&gt; Size: 17MB\narray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]])\nCoordinates:\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\n  * measurement  (measurement) object 24B 'density' ... 'built-up volume'xarray.DataArraymeasurement: 3y: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]])Coordinates: (4)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)measurement(measurement)object'density' ... 'built-up volume'array(['density', 'population', 'built-up volume'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))measurementPandasIndexPandasIndex(Index(['density', 'population', 'built-up volume'], dtype='object', name='measurement'))Attributes: (0)\n\n\nThe resulting DataArray is 3-dimensional, compared to 2-dimensional arrays used before. Apart from x and y, you now have measurement as well. Using the new index created above, you can use the sel() method to get the original arrays.\n\nbud_cube.sel(measurement=\"density\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 840, x: 830)&gt; Size: 6MB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n  * x            (x) float64 7kB 1.465e+06 1.465e+06 ... 1.548e+06 1.548e+06\n  * y            (y) float64 7kB 5.648e+06 5.648e+06 ... 5.564e+06 5.564e+06\n    spatial_ref  int64 8B 0\n    measurement  &lt;U7 28B 'density'xarray.DataArrayy: 840x: 830nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (4)x(x)float641.465e+06 1.465e+06 ... 1.548e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([1465050., 1465150., 1465250., ..., 1547750., 1547850., 1547950.])y(y)float645.648e+06 5.648e+06 ... 5.564e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([5647950., 5647850., 5647750., ..., 5564250., 5564150., 5564050.])spatial_ref()int640crs_wkt :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]spatial_ref :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :1465000.0 100.0 0.0 5648000.0 0.0 -100.0array(0)measurement()&lt;U7'density'array('density', dtype='&lt;U7')Indexes: (2)xPandasIndexPandasIndex(Index([1465050.0, 1465150.0, 1465250.0, 1465350.0, 1465450.0, 1465550.0,\n       1465650.0, 1465750.0, 1465850.0, 1465950.0,\n       ...\n       1547050.0, 1547150.0, 1547250.0, 1547350.0, 1547450.0, 1547550.0,\n       1547650.0, 1547750.0, 1547850.0, 1547950.0],\n      dtype='float64', name='x', length=830))yPandasIndexPandasIndex(Index([5647950.0, 5647850.0, 5647750.0, 5647650.0, 5647550.0, 5647450.0,\n       5647350.0, 5647250.0, 5647150.0, 5647050.0,\n       ...\n       5564950.0, 5564850.0, 5564750.0, 5564650.0, 5564550.0, 5564450.0,\n       5564350.0, 5564250.0, 5564150.0, 5564050.0],\n      dtype='float64', name='y', length=840))Attributes: (0)\n\n\nNow it is time to take this cube and create another based on your points. That can be done using the .xvec accessor and its extract_points method.\n\n1vector_cube = bud_cube.drop_vars(\"spatial_ref\").xvec.extract_points(\n2    points=locations.geometry,\n3    x_coords=\"x\",\n    y_coords=\"y\",\n)\nvector_cube\n\n\n1\n\nDrop spatial_ref because it is not interesting for point extraction and use .xvec.extract_points()\n\n2\n\nSpecify the points for which you want to extract the values.\n\n3\n\nSpecify which dimension of the bud_cube DataArray represents x-coordinate dimension of geometries and which represents the y-coordinate dimension to match points to the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (measurement: 3, geometry: 1000)&gt; Size: 24kB\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])\nCoordinates:\n  * measurement  (measurement) object 24B 'density' ... 'built-up volume'\n  * geometry     (geometry) object 8kB POINT (1466809.8898974722 5634552.8819...\nIndexes:\n    geometry  GeometryIndex (crs=ESRI:54009)xarray.DataArraymeasurement: 3geometry: 1000nan nan nan 0.001976 0.001853 nan ... 0.0 0.0 4.645e+03 0.0 0.0 0.0array([[nan, nan, nan, ..., nan, nan, nan],\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.],\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])Coordinates: (2)measurement(measurement)object'density' ... 'built-up volume'array(['density', 'population', 'built-up volume'], dtype=object)geometry(geometry)objectPOINT (1466809.8898974722 563455...crs :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"ESRI\",\"54009\"]]array([&lt;POINT (1466809.89 5634552.882)&gt;, &lt;POINT (1466925.395 5636571.046)&gt;,\n       &lt;POINT (1468103.443 5635794.353)&gt;, ...,\n       &lt;POINT (1546594.544 5601547.945)&gt;, &lt;POINT (1546836.193 5597180.723)&gt;,\n       &lt;POINT (1547086.63 5603143.217)&gt;], dtype=object)Indexes: (2)measurementPandasIndexPandasIndex(Index(['density', 'population', 'built-up volume'], dtype='object', name='measurement'))geometryGeometryIndex (crs=ESRI:54009)&lt;xvec.index.GeometryIndex object at 0x7f7961f4c510&gt;Attributes: (0)\n\n\nThe resulting object is still a DataArray but a bit different. It is no longer 3-dimensional, although all dimensions of interest ('density', 'population', 'built-up volume') are still there, but 2-dimensional. One dimension is measurement, and the other is geometry, containing the points of interest. With xvec, the spatial dimension is reduced, but the remaining dimensionality of the original array is preserved.\nYou can then convert the data into a geopandas.GeoDataFrame and work with it as usual.\n\nlocation_data = vector_cube.xvec.to_geopandas()\nlocation_data.head()\n\n\n\n\n\n\n\nmeasurement\ngeometry\ndensity\npopulation\nbuilt-up volume\n\n\n\n\n0\nPOINT (1466809.89 5634552.882)\nNaN\n0.000000\n0.0\n\n\n1\nPOINT (1466925.395 5636571.046)\nNaN\n0.000000\n0.0\n\n\n2\nPOINT (1468103.443 5635794.353)\nNaN\n0.000000\n0.0\n\n\n3\nPOINT (1468262.914 5625201.568)\n0.001976\n2.430294\n1230.0\n\n\n4\nPOINT (1468286.065 5624476.38)\n0.001853\n3.669151\n1980.0\n\n\n\n\n\n\n\nCheck the result on a map to verify that all worked as expected.\n\nlocation_data.explore(\"density\", cmap=\"cividis_r\", tiles=\"CartoDB Positron\")\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nVector data cubes\n\n\n\nThe data structure vector_cube represents is called a vector data cube. It is a special case of an xarray N-dimensional object, where at least one dimension is indexed by geometries. See more in the Xvec documentation.",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#zonal-statistics",
    "href": "raster_data/hands_on.html#zonal-statistics",
    "title": "Population as a raster grid",
    "section": "Zonal statistics",
    "text": "Zonal statistics\nAnother operation when working with rasters is the transfer of values from an array to a set of polygons. This is called zonal statistics and can be done in many ways, depending on the use case. In most cases, one of the methods available in xvec should cover your specific needs.\n\nDownloading OpenStreetMap data\nYou may be interested in the average population density in individual districts of Budapest. One option for getting the geometries representing the districts is the OpenStreetMap. Everything you can see on OpenStreetMap is downloadable. In Python, a recommended way (when not doing large downloads) is the osmnx package (imported as ox). The detailed explanation of osmnx is out of scope for this session, but if you are interested in details, check the official Getting started guide.\n\n1admin_level_9 = ox.features_from_place(\"Budapest\", {\"admin_level\": \"9\"})\n2districts = admin_level_9[admin_level_9.geom_type == \"Polygon\"][\n3    [\"name\", \"name:en\", \"geometry\"]\n]\n4districts[\"key\"] = range(len(districts))\n5districts = districts.to_crs(pop_density.rio.crs)\n\n\n1\n\nUse features_from_place to download features from Budapest. But filter only those tagged with the admin_level equal to 9.\n\n2\n\nFilter only polygons. The GeoDataFrame coming from osmnx also contains many LineStrings.\n\n3\n\nRetain only three columns that may be useful.\n\n4\n\nCreate a new column with a key - an integer value unique to each observation. That will be useful later.\n\n5\n\nEnsure the geometry uses the same CRS as the grid.\n\n\n\n\n\n\nPlotting raster and vector together\nBoth xarray and geopandas can create matplotlib plots that can be combined to see how the two overlap.\n\n1f, ax = plt.subplots()\n2pop_density.plot(ax=ax, cmap=\"cividis_r\")\n3districts.plot(\n4    ax=ax, facecolor=\"none\", edgecolor=\"red\", linewidth=1, aspect=None\n);\n\n\n1\n\nCreate an empty figure and an axis.\n\n2\n\nPlot the population density to the axis.\n\n3\n\nPlot the districts to the same array, ensuring it is in the same projection.\n\n4\n\nSpecify the plotting style and disable the automatic setting of the aspect to keep the axis as returned by xarray.\n\n\n\n\n\n\n\nOverlay of district boundaries over population density\n\n\n\n\n\n\nZonal statistics\nZonal statistics using xvec is as simple as point data extraction, with the only difference that you can optionally specify the type of aggregation you’d like to extract. By default, you get mean.\n\n1zonal_stats = bud_cube.drop_vars(\"spatial_ref\").xvec.zonal_stats(\n2    geometry=districts.geometry,\n3    x_coords=\"x\",\n    y_coords=\"y\",\n)\nzonal_stats\n\n\n1\n\nDrop spatial_ref because it is not interesting for point extraction and use .xvec.zonal_stats()\n\n2\n\nSpecify the geometries for which you want to aggregate the values.\n\n3\n\nSpecify which dimension of the bud_cube DataArray represents x-coordinate dimension of geometries and which represents the y-coordinate dimension to match geometries to the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (geometry: 23, measurement: 3)&gt; Size: 552B\narray([[1.93530445e-03, 3.05514687e+01, 1.93385830e+04],\n       [1.55306987e-03, 1.75203519e+01, 1.24434552e+04],\n       [2.97495556e-03, 3.44800938e+01, 1.28181432e+04],\n       [2.28693771e-03, 2.57417575e+01, 1.14941986e+04],\n       [2.57494673e-03, 7.65020268e+01, 3.08506154e+04],\n       [2.23832080e-03, 2.30955540e+01, 1.07480293e+04],\n       [2.64115677e-03, 4.61908980e+01, 2.03117370e+04],\n       [3.38977582e-03, 5.35142704e+01, 1.77673289e+04],\n       [1.47557004e-03, 5.79631789e+00, 5.26320947e+03],\n       [2.10694012e-03, 2.73223607e+01, 1.37756218e+04],\n       [2.15614865e-03, 1.65916271e+01, 7.80771904e+03],\n       [2.56786753e-03, 6.79190265e+01, 2.69252700e+04],\n       [2.67075964e-03, 5.70909834e+01, 2.16905234e+04],\n       [2.13305661e-03, 5.39779792e+01, 3.07897010e+04],\n       [2.13384957e-03, 2.67868574e+01, 1.63365941e+04],\n       [1.95306643e-03, 2.28662318e+01, 1.21904109e+04],\n       [2.78713051e-03, 1.05099081e+02, 4.07332861e+04],\n       [2.46986944e-03, 3.14801382e+01, 1.33601201e+04],\n       [2.62216168e-03, 7.51682653e+01, 3.01181465e+04],\n       [3.09263579e-03, 1.20801957e+02, 4.18122526e+04],\n       [2.89329632e-03, 1.67287724e+02, 6.02648703e+04],\n       [4.16208535e-03, 2.86557806e+02, 6.89801196e+04],\n       [2.16822023e-03, 1.06236529e+02, 5.05770076e+04]])\nCoordinates:\n  * measurement  (measurement) object 24B 'density' ... 'built-up volume'\n  * geometry     (geometry) object 184B POLYGON ((1494534.3281858459 5597452....\n    index        (geometry) object 184B ('relation', 215618) ... ('relation',...\nIndexes:\n    geometry  GeometryIndex (crs=ESRI:54009)xarray.DataArraygeometry: 23measurement: 30.001935 30.55 1.934e+04 0.001553 ... 0.002168 106.2 5.058e+04array([[1.93530445e-03, 3.05514687e+01, 1.93385830e+04],\n       [1.55306987e-03, 1.75203519e+01, 1.24434552e+04],\n       [2.97495556e-03, 3.44800938e+01, 1.28181432e+04],\n       [2.28693771e-03, 2.57417575e+01, 1.14941986e+04],\n       [2.57494673e-03, 7.65020268e+01, 3.08506154e+04],\n       [2.23832080e-03, 2.30955540e+01, 1.07480293e+04],\n       [2.64115677e-03, 4.61908980e+01, 2.03117370e+04],\n       [3.38977582e-03, 5.35142704e+01, 1.77673289e+04],\n       [1.47557004e-03, 5.79631789e+00, 5.26320947e+03],\n       [2.10694012e-03, 2.73223607e+01, 1.37756218e+04],\n       [2.15614865e-03, 1.65916271e+01, 7.80771904e+03],\n       [2.56786753e-03, 6.79190265e+01, 2.69252700e+04],\n       [2.67075964e-03, 5.70909834e+01, 2.16905234e+04],\n       [2.13305661e-03, 5.39779792e+01, 3.07897010e+04],\n       [2.13384957e-03, 2.67868574e+01, 1.63365941e+04],\n       [1.95306643e-03, 2.28662318e+01, 1.21904109e+04],\n       [2.78713051e-03, 1.05099081e+02, 4.07332861e+04],\n       [2.46986944e-03, 3.14801382e+01, 1.33601201e+04],\n       [2.62216168e-03, 7.51682653e+01, 3.01181465e+04],\n       [3.09263579e-03, 1.20801957e+02, 4.18122526e+04],\n       [2.89329632e-03, 1.67287724e+02, 6.02648703e+04],\n       [4.16208535e-03, 2.86557806e+02, 6.89801196e+04],\n       [2.16822023e-03, 1.06236529e+02, 5.05770076e+04]])Coordinates: (3)measurement(measurement)object'density' ... 'built-up volume'array(['density', 'population', 'built-up volume'], dtype=object)geometry(geometry)objectPOLYGON ((1494534.3281858459 559...crs :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array([&lt;POLYGON ((1494534.328 5597452.839, 1494709.464 5597483.689, 1495374.488 559...&gt;,\n       &lt;POLYGON ((1489341.705 5597900.249, 1489344.48 5597918.588, 1489347.525 5597...&gt;,\n       &lt;POLYGON ((1488148.017 5617092.544, 1488102.05 5617191.926, 1488138.549 5617...&gt;,\n       &lt;POLYGON ((1484592.864 5613919.109, 1484887.294 5614074.835, 1484943.798 561...&gt;,\n       &lt;POLYGON ((1493202.543 5608736.393, 1493201.024 5608743.668, 1493198.955 560...&gt;,\n       &lt;POLYGON ((1485543.934 5612793.322, 1486597.575 5612075.431, 1486661.591 561...&gt;,\n       &lt;POLYGON ((1489351.206 5606660.953, 1489351.382 5606668.816, 1489349.918 560...&gt;,\n       &lt;POLYGON ((1495398.098 5615944.231, 1495406.14 5615993.766, 1495359.152 5616...&gt;,\n       &lt;POLYGON ((1499708.513 5601583.067, 1499767.398 5601592.736, 1499732.877 560...&gt;,\n       &lt;POLYGON ((1504348.356 5603314.648, 1504467.056 5603466.098, 1504479.777 560...&gt;,\n       &lt;POLYGON ((1507309.711 5605247.237, 1507483.987 5605599.718, 1507697.314 560...&gt;,\n       &lt;POLYGON ((1501003.363 5604417.358, 1501011.211 5604425.638, 1501021.296 560...&gt;,\n       &lt;POLYGON ((1499233.798 5602805.356, 1499321.395 5602805.324, 1499643.884 560...&gt;,\n       &lt;POLYGON ((1495814.126 5607694.868, 1496026.222 5607858.83, 1496095.841 5607...&gt;,\n       &lt;POLYGON ((1499440.216 5606610.566, 1499627.053 5607072.951, 1499730.502 560...&gt;,\n       &lt;POLYGON ((1502219.307 5611668.464, 1502215.316 5611677.124, 1502212.787 561...&gt;,\n       &lt;POLYGON ((1494556.496 5610718.279, 1494566.506 5610735.802, 1494655.617 561...&gt;,\n       &lt;POLYGON ((1498559.255 5613725.1, 1498586.167 5613807.251, 1498602.205 56139...&gt;,\n       &lt;POLYGON ((1496603.311 5611190.286, 1496613.398 5611196.045, 1496640.85 5611...&gt;,\n       &lt;POLYGON ((1496066.262 5608604.667, 1496067.748 5608605.168, 1496074.389 560...&gt;,\n       &lt;POLYGON ((1495586.677 5609042.297, 1495585.346 5609052.548, 1495578.278 560...&gt;,\n       &lt;POLYGON ((1495631.137 5608950.019, 1495642.687 5608953.262, 1495652.935 560...&gt;,\n       &lt;POLYGON ((1494292.33 5610780.086, 1494393.558 5610784.021, 1494405.807 5610...&gt;],\n      dtype=object)index(geometry)object('relation', 215618) ... ('relat...array([('relation', 215618), ('relation', 215621), ('relation', 221976),\n       ('relation', 221980), ('relation', 221984), ('relation', 221995),\n       ('relation', 221998), ('relation', 367963), ('relation', 1550597),\n       ('relation', 1550598), ('relation', 1550599), ('relation', 1551290),\n       ('relation', 1551291), ('relation', 1552462), ('relation', 1552463),\n       ('relation', 1552464), ('relation', 1605916), ('relation', 1606009),\n       ('relation', 1606043), ('relation', 1606100), ('relation', 1606101),\n       ('relation', 1606102), ('relation', 1606103)], dtype=object)Indexes: (2)measurementPandasIndexPandasIndex(Index(['density', 'population', 'built-up volume'], dtype='object', name='measurement'))geometryGeometryIndex (crs=ESRI:54009)&lt;xvec.index.GeometryIndex object at 0x7f79716ef4d0&gt;Attributes: (0)\n\n\nThe result is again a vector data cube. Though mean is not the optimal aggregation method for population. Let’s refine the code above a bit to get more useful aggregation.\n\nzonal_stats = bud_cube.drop_vars(\"spatial_ref\").xvec.zonal_stats(\n    geometry=districts.geometry,\n    x_coords=\"x\",\n    y_coords=\"y\",\n3    stats=[\"mean\", \"sum\", \"median\", \"min\", \"max\"],\n)\nzonal_stats\n\n\n3\n\nSpecify which aggregations should xvec return as a list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (geometry: 23, zonal_statistics: 5, measurement: 3)&gt; Size: 3kB\narray([[[1.93530445e-03, 3.05514687e+01, 1.93385830e+04],\n        [4.32734075e+00, 8.02281569e+04, 5.07831190e+07],\n        [2.37775026e-03, 2.24578524e+01, 1.65745000e+04],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.31672247e-03, 2.00829544e+02, 1.49180000e+05]],\n\n       [[1.55306987e-03, 1.75203519e+01, 1.24434552e+04],\n        [4.03953473e+00, 5.88859028e+04, 4.18224530e+07],\n        [1.70373389e-03, 9.53239155e+00, 7.51800000e+03],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.21869412e-03, 1.23922935e+02, 1.45769000e+05]],\n\n       [[2.97495556e-03, 3.44800938e+01, 1.28181432e+04],\n        [9.93932653e+00, 1.35334368e+05, 5.03112120e+07],\n        [3.32938273e-03, 2.29527645e+01, 8.73300000e+03],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.32938297e-03, 2.58037140e+02, 1.11725000e+05]],\n\n       [[2.28693771e-03, 2.57417575e+01, 1.14941986e+04],\n        [5.61900595e+00, 9.36999972e+04, 4.18388830e+07],\n...\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [4.60847702e-03, 4.85453461e+02, 1.42089000e+05]],\n\n       [[2.89329632e-03, 1.67287724e+02, 6.02648703e+04],\n        [6.91497820e-01, 3.99817661e+04, 1.44033040e+07],\n        [3.32703482e-03, 1.74908875e+02, 6.15190000e+04],\n        [8.24321432e-05, 8.12120438e-01, 2.39000000e+02],\n        [3.39799356e-03, 3.92064453e+02, 1.91005000e+05]],\n\n       [[4.16208535e-03, 2.86557806e+02, 6.89801196e+04],\n        [8.69875838e-01, 5.98905814e+04, 1.44168450e+07],\n        [4.60847672e-03, 2.81716187e+02, 6.67140000e+04],\n        [9.78207908e-04, 5.82796707e+01, 2.87110000e+04],\n        [4.60847708e-03, 6.03904053e+02, 1.33828000e+05]],\n\n       [[2.16822023e-03, 1.06236529e+02, 5.05770076e+04],\n        [5.13868195e-01, 2.79402072e+04, 1.33017530e+07],\n        [2.29921378e-03, 1.13707619e+02, 5.78860000e+04],\n        [8.85650581e-04, 0.00000000e+00, 0.00000000e+00],\n        [4.60847706e-03, 3.44663391e+02, 1.15273000e+05]]])\nCoordinates:\n  * measurement       (measurement) object 24B 'density' ... 'built-up volume'\n  * zonal_statistics  (zonal_statistics) &lt;U6 120B 'mean' 'sum' ... 'min' 'max'\n  * geometry          (geometry) object 184B POLYGON ((1494534.3281858459 559...\n    index             (geometry) object 184B ('relation', 215618) ... ('relat...\nIndexes:\n    geometry  GeometryIndex (crs=ESRI:54009)xarray.DataArraygeometry: 23zonal_statistics: 5measurement: 30.001935 30.55 1.934e+04 4.327 ... 0.0 0.004608 344.7 1.153e+05array([[[1.93530445e-03, 3.05514687e+01, 1.93385830e+04],\n        [4.32734075e+00, 8.02281569e+04, 5.07831190e+07],\n        [2.37775026e-03, 2.24578524e+01, 1.65745000e+04],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.31672247e-03, 2.00829544e+02, 1.49180000e+05]],\n\n       [[1.55306987e-03, 1.75203519e+01, 1.24434552e+04],\n        [4.03953473e+00, 5.88859028e+04, 4.18224530e+07],\n        [1.70373389e-03, 9.53239155e+00, 7.51800000e+03],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.21869412e-03, 1.23922935e+02, 1.45769000e+05]],\n\n       [[2.97495556e-03, 3.44800938e+01, 1.28181432e+04],\n        [9.93932653e+00, 1.35334368e+05, 5.03112120e+07],\n        [3.32938273e-03, 2.29527645e+01, 8.73300000e+03],\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [3.32938297e-03, 2.58037140e+02, 1.11725000e+05]],\n\n       [[2.28693771e-03, 2.57417575e+01, 1.14941986e+04],\n        [5.61900595e+00, 9.36999972e+04, 4.18388830e+07],\n...\n        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n        [4.60847702e-03, 4.85453461e+02, 1.42089000e+05]],\n\n       [[2.89329632e-03, 1.67287724e+02, 6.02648703e+04],\n        [6.91497820e-01, 3.99817661e+04, 1.44033040e+07],\n        [3.32703482e-03, 1.74908875e+02, 6.15190000e+04],\n        [8.24321432e-05, 8.12120438e-01, 2.39000000e+02],\n        [3.39799356e-03, 3.92064453e+02, 1.91005000e+05]],\n\n       [[4.16208535e-03, 2.86557806e+02, 6.89801196e+04],\n        [8.69875838e-01, 5.98905814e+04, 1.44168450e+07],\n        [4.60847672e-03, 2.81716187e+02, 6.67140000e+04],\n        [9.78207908e-04, 5.82796707e+01, 2.87110000e+04],\n        [4.60847708e-03, 6.03904053e+02, 1.33828000e+05]],\n\n       [[2.16822023e-03, 1.06236529e+02, 5.05770076e+04],\n        [5.13868195e-01, 2.79402072e+04, 1.33017530e+07],\n        [2.29921378e-03, 1.13707619e+02, 5.78860000e+04],\n        [8.85650581e-04, 0.00000000e+00, 0.00000000e+00],\n        [4.60847706e-03, 3.44663391e+02, 1.15273000e+05]]])Coordinates: (4)measurement(measurement)object'density' ... 'built-up volume'array(['density', 'population', 'built-up volume'], dtype=object)zonal_statistics(zonal_statistics)&lt;U6'mean' 'sum' 'median' 'min' 'max'array(['mean', 'sum', 'median', 'min', 'max'], dtype='&lt;U6')geometry(geometry)objectPOLYGON ((1494534.3281858459 559...crs :PROJCS[\"World_Mollweide\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mollweide\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array([&lt;POLYGON ((1494534.328 5597452.839, 1494709.464 5597483.689, 1495374.488 559...&gt;,\n       &lt;POLYGON ((1489341.705 5597900.249, 1489344.48 5597918.588, 1489347.525 5597...&gt;,\n       &lt;POLYGON ((1488148.017 5617092.544, 1488102.05 5617191.926, 1488138.549 5617...&gt;,\n       &lt;POLYGON ((1484592.864 5613919.109, 1484887.294 5614074.835, 1484943.798 561...&gt;,\n       &lt;POLYGON ((1493202.543 5608736.393, 1493201.024 5608743.668, 1493198.955 560...&gt;,\n       &lt;POLYGON ((1485543.934 5612793.322, 1486597.575 5612075.431, 1486661.591 561...&gt;,\n       &lt;POLYGON ((1489351.206 5606660.953, 1489351.382 5606668.816, 1489349.918 560...&gt;,\n       &lt;POLYGON ((1495398.098 5615944.231, 1495406.14 5615993.766, 1495359.152 5616...&gt;,\n       &lt;POLYGON ((1499708.513 5601583.067, 1499767.398 5601592.736, 1499732.877 560...&gt;,\n       &lt;POLYGON ((1504348.356 5603314.648, 1504467.056 5603466.098, 1504479.777 560...&gt;,\n       &lt;POLYGON ((1507309.711 5605247.237, 1507483.987 5605599.718, 1507697.314 560...&gt;,\n       &lt;POLYGON ((1501003.363 5604417.358, 1501011.211 5604425.638, 1501021.296 560...&gt;,\n       &lt;POLYGON ((1499233.798 5602805.356, 1499321.395 5602805.324, 1499643.884 560...&gt;,\n       &lt;POLYGON ((1495814.126 5607694.868, 1496026.222 5607858.83, 1496095.841 5607...&gt;,\n       &lt;POLYGON ((1499440.216 5606610.566, 1499627.053 5607072.951, 1499730.502 560...&gt;,\n       &lt;POLYGON ((1502219.307 5611668.464, 1502215.316 5611677.124, 1502212.787 561...&gt;,\n       &lt;POLYGON ((1494556.496 5610718.279, 1494566.506 5610735.802, 1494655.617 561...&gt;,\n       &lt;POLYGON ((1498559.255 5613725.1, 1498586.167 5613807.251, 1498602.205 56139...&gt;,\n       &lt;POLYGON ((1496603.311 5611190.286, 1496613.398 5611196.045, 1496640.85 5611...&gt;,\n       &lt;POLYGON ((1496066.262 5608604.667, 1496067.748 5608605.168, 1496074.389 560...&gt;,\n       &lt;POLYGON ((1495586.677 5609042.297, 1495585.346 5609052.548, 1495578.278 560...&gt;,\n       &lt;POLYGON ((1495631.137 5608950.019, 1495642.687 5608953.262, 1495652.935 560...&gt;,\n       &lt;POLYGON ((1494292.33 5610780.086, 1494393.558 5610784.021, 1494405.807 5610...&gt;],\n      dtype=object)index(geometry)object('relation', 215618) ... ('relat...array([('relation', 215618), ('relation', 215621), ('relation', 221976),\n       ('relation', 221980), ('relation', 221984), ('relation', 221995),\n       ('relation', 221998), ('relation', 367963), ('relation', 1550597),\n       ('relation', 1550598), ('relation', 1550599), ('relation', 1551290),\n       ('relation', 1551291), ('relation', 1552462), ('relation', 1552463),\n       ('relation', 1552464), ('relation', 1605916), ('relation', 1606009),\n       ('relation', 1606043), ('relation', 1606100), ('relation', 1606101),\n       ('relation', 1606102), ('relation', 1606103)], dtype=object)Indexes: (3)measurementPandasIndexPandasIndex(Index(['density', 'population', 'built-up volume'], dtype='object', name='measurement'))zonal_statisticsPandasIndexPandasIndex(Index(['mean', 'sum', 'median', 'min', 'max'], dtype='object', name='zonal_statistics'))geometryGeometryIndex (crs=ESRI:54009)&lt;xvec.index.GeometryIndex object at 0x7f7971464250&gt;Attributes: (0)\n\n\nYou may have noticed that our data cube now has one more dimension zonal_statistics, reflecting each of the aggregation methods specified above.\n\n\n\n\n\n\nOther statistics\n\n\n\nThe stats keyword is quite flexible and allows you to pass even your custom functions. Check the documentation for details.\n\n\nTo check the result on a map, convert the data to a geopandas.GeoDataFrame again.\n\nzones = zonal_stats.xvec.to_geodataframe(name=\"stats\")\nzones\n\n\n\n\n\n\n\n\n\ngeometry\nindex\nstats\n\n\nzonal_statistics\nmeasurement\n\n\n\n\n\n\n\nmean\ndensity\nPOLYGON ((1494534.328 5597452.839, 1494709.464...\n(relation, 215618)\n0.001935\n\n\npopulation\nPOLYGON ((1494534.328 5597452.839, 1494709.464...\n(relation, 215618)\n30.551469\n\n\nbuilt-up volume\nPOLYGON ((1494534.328 5597452.839, 1494709.464...\n(relation, 215618)\n19338.583016\n\n\nsum\ndensity\nPOLYGON ((1494534.328 5597452.839, 1494709.464...\n(relation, 215618)\n4.327341\n\n\npopulation\nPOLYGON ((1494534.328 5597452.839, 1494709.464...\n(relation, 215618)\n80228.156869\n\n\n...\n...\n...\n...\n...\n\n\nmin\npopulation\nPOLYGON ((1494292.33 5610780.086, 1494393.558 ...\n(relation, 1606103)\n0.000000\n\n\nbuilt-up volume\nPOLYGON ((1494292.33 5610780.086, 1494393.558 ...\n(relation, 1606103)\n0.000000\n\n\nmax\ndensity\nPOLYGON ((1494292.33 5610780.086, 1494393.558 ...\n(relation, 1606103)\n0.004608\n\n\npopulation\nPOLYGON ((1494292.33 5610780.086, 1494393.558 ...\n(relation, 1606103)\n344.663391\n\n\nbuilt-up volume\nPOLYGON ((1494292.33 5610780.086, 1494393.558 ...\n(relation, 1606103)\n115273.000000\n\n\n\n\n345 rows × 3 columns\n\n\n\nCheck the result on a map to verify that all worked as expected. Get mean density and explore its values, stored in the stats column.\n\nzones.loc[(\"mean\", 'density')].explore(\"stats\", cmap=\"cividis_r\", tiles=\"CartoDB Positron\")\n\n/tmp/ipykernel_4945/4164103204.py:1: PerformanceWarning: indexing past lexsort depth may impact performance.\n  zones.loc[(\"mean\", 'density')].explore(\"stats\", cmap=\"cividis_r\", tiles=\"CartoDB Positron\")\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\nHave a look at the chapter Local Spatial Autocorrelation from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) to learn how to do LISA on rasters.\nThe great resource on xarray is their tutorial.",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/hands_on.html#footnotes",
    "href": "raster_data/hands_on.html#footnotes",
    "title": "Population as a raster grid",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the distribution of tiles in the data repository.↩︎",
    "crumbs": [
      "Raster data",
      "Population as a raster grid"
    ]
  },
  {
    "objectID": "raster_data/concepts.html",
    "href": "raster_data/concepts.html",
    "title": "Data as a grid",
    "section": "",
    "text": "Slides from the talk very briefly introducing gridded data and their application in human geography.\n\n\n\n\n\n\n\nRelated reading\n\n\n\nParts of the chapter Spatial Data dealing with raster data from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis.",
    "crumbs": [
      "Raster data",
      "Data as a grid"
    ]
  },
  {
    "objectID": "geographic_data/exercise.html",
    "href": "geographic_data/exercise.html",
    "title": "Learning GeoPandas",
    "section": "",
    "text": "This section is about playing with geopandas by yourself. You will zoom at Prague and the distribution of land price, provided by the Institute of Planning and Development.",
    "crumbs": [
      "Spatial data",
      "Learning GeoPandas"
    ]
  },
  {
    "objectID": "geographic_data/exercise.html#data-preparation",
    "href": "geographic_data/exercise.html#data-preparation",
    "title": "Learning GeoPandas",
    "section": "Data Preparation",
    "text": "Data Preparation\nYou will load two datasets. One with the price data and the other with the boundaries of municipal districts. Below are the links to both. Your first task is to figure out how to load them as two GeoDataFrames, one called price and the other called districts.\n\nThe link to the price dataset\nThe link to the districts dataset\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou have two options: either download and read from disk or pass the URL of the actual file to geopandas.read_file. Pay attention to file formats (open are better than proprietary) and projections.\n\n\n\n\n\n\n\n\n\nBackup data\n\n\n\n\n\nIf the links do not work, please report it and use the backup:\n\nprice dataset\ndistricts dataset\n\n\n\n\nOnce you have your price dataset loaded, there is one cleaning step you need to do. The column with the price called \"CENA\" is encoded as strings, not numbers. You need to replace the \"N\" string with None and convert the column to float numbers.\nprice[\"CENA\"] = price[\"CENA\"].replace(\"N\", None).astype('float')\nThe rest is up to you!",
    "crumbs": [
      "Spatial data",
      "Learning GeoPandas"
    ]
  },
  {
    "objectID": "geographic_data/exercise.html#map-making",
    "href": "geographic_data/exercise.html#map-making",
    "title": "Learning GeoPandas",
    "section": "Map Making",
    "text": "Map Making\nCreate a map of price distribution with the overlay of the district boundaries. Start with static or interactive, and try replicating the other once you’re done if the time permits. A few requirements:\n\nPlot the price.\nPlot boundaries on top. Try different colours to get a nice combination of colours.\nShow a legend.\nUse CartoDB Voyager or CartoDB Dark Matter basemap.\nCan you figure out how to change the colormap?\nCan you change the transparency of polygons?\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nColormap is controlled via the cmap= keyword.\nTo plot a boundary, it may be easier to work with LineStrings than Polygons.\nCheck the additional reading materials linked in the previous section to figure out how to add basemap to static plots.\nTransparency is different in static and interactive maps. Check the documentation!",
    "crumbs": [
      "Spatial data",
      "Learning GeoPandas"
    ]
  },
  {
    "objectID": "geographic_data/exercise.html#measuring",
    "href": "geographic_data/exercise.html#measuring",
    "title": "Learning GeoPandas",
    "section": "Measuring",
    "text": "Measuring\nPractice using geometric methods and properties GeoDataFrame offers.\n\nCreate a convex hull around each polygon in price.\nCalculate the area of these convex hulls.\nFind the 20% smallest convex hulls in the GeoDataFrame. Create a new object (e.g. smallest) only with them.\nCreate a multi-layer map of Prague where the smallest areas are coloured in one colour, and the rest appear in black.",
    "crumbs": [
      "Spatial data",
      "Learning GeoPandas"
    ]
  },
  {
    "objectID": "geographic_data/exercise.html#joining",
    "href": "geographic_data/exercise.html#joining",
    "title": "Learning GeoPandas",
    "section": "Joining",
    "text": "Joining\nJoin the two GeoDataFrame using .sjoin() or .overlay() methods.\n\nIs the mean price higher in Praha 3 or Praha 6?\nWhich district is the cheapest?\nWhat is the difference between the cheapest and the most expensive one?\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou may need to use .groupby() after joining.\nFor those of you who don’t speak Czech, the district names are encoded in the \"NAZEV_1\" column.",
    "crumbs": [
      "Spatial data",
      "Learning GeoPandas"
    ]
  },
  {
    "objectID": "geographic_data/slides.html#what-is-good-about-it",
    "href": "geographic_data/slides.html#what-is-good-about-it",
    "title": "Spatial data old and new",
    "section": "What is good about it?",
    "text": "What is good about it?"
  },
  {
    "objectID": "geographic_data/slides.html#what-is-less-good-about-it",
    "href": "geographic_data/slides.html#what-is-less-good-about-it",
    "title": "Spatial data old and new",
    "section": "What is less good about it?",
    "text": "What is less good about it?"
  },
  {
    "objectID": "geographic_data/slides.html#examples",
    "href": "geographic_data/slides.html#examples",
    "title": "Spatial data old and new",
    "section": "Examples",
    "text": "Examples\n\nDecennial census (and census geographies)\n\n\nLongitudinal surveys\n\n\nCustomly collected surveys, interviews, etc.\n\n\nEconomic indicators"
  },
  {
    "objectID": "geographic_data/slides.html#how-to-categorise-them",
    "href": "geographic_data/slides.html#how-to-categorise-them",
    "title": "Spatial data old and new",
    "section": "How to categorise them?",
    "text": "How to categorise them?\n\nThere are different ways"
  },
  {
    "objectID": "geographic_data/slides.html#lazer-radford-2017",
    "href": "geographic_data/slides.html#lazer-radford-2017",
    "title": "Spatial data old and new",
    "section": "Lazer & Radford (2017)",
    "text": "Lazer & Radford (2017)\n\nDigital life (Twitter/X, Facebook, Wikipedia…)\n\n\nDigital traces (record of digital actions (CDRs, metadata…))\n\n\nDigitalised life (non intrinsically digital life in digital form (Government records, web…))"
  },
  {
    "objectID": "geographic_data/slides.html#arribas-bel-2014",
    "href": "geographic_data/slides.html#arribas-bel-2014",
    "title": "Spatial data old and new",
    "section": "Arribas-Bel (2014)",
    "text": "Arribas-Bel (2014)\n\nBottom up (“Citizens as sensors”)\n\n\nIntermediate (Digital businesses/businesses going digital)\n\n\nTop down (Open Government Data)"
  },
  {
    "objectID": "geographic_data/slides.html#opportunities",
    "href": "geographic_data/slides.html#opportunities",
    "title": "Spatial data old and new",
    "section": "Opportunities",
    "text": "Opportunities\n\nMassive, passive\n\n\nNowcasting\n\n\nData on social systems\n\n\nNatural and field experiments (“always-on” observatory of human behaviour)\n\n\nMaking big data small"
  },
  {
    "objectID": "geographic_data/slides.html#challenges",
    "href": "geographic_data/slides.html#challenges",
    "title": "Spatial data old and new",
    "section": "Challenges",
    "text": "Challenges\n\nBias\n\n\nTechnical barriers\n\n\nMethodological “mismatch”"
  },
  {
    "objectID": "geographic_data/exercise_answers.html",
    "href": "geographic_data/exercise_answers.html",
    "title": "Learning GeoPandas",
    "section": "",
    "text": "Here is one way of getting the solution. There are others, feel free to share yours.\nimport geopandas as gpd\nimport contextily as ctx\nDownload data.\nprice = gpd.read_file(\"SED_CUR_SED_CENOVAMAPA_P.zip\")\ndistricts = gpd.read_file(\"MAP_CUR_MAP_MESTSKECASTI_P.zip\")\nprice[\"CENA\"] = price[\"CENA\"].replace(\"N\", None).astype('float')\n\nPlot the price.\nPlot boundaries on top. Try different colours to get a nice combination of colours.\nShow a legend.\nUse CartoDB Voyager or CartoDB Dark Matter basemap.\nCan you figure out how to change the colormap?\nCan you change the transparency of polygons?\n\nInteractive:\nm = price.explore(\"CENA\", legend=True, tiles=\"CartoDB Voyager\", cmap=\"plasma\", style_kwds={\"fillOpacity\": .5})\ndistricts.boundary.explore(m=m, color=\"red\")\nStatic:\nax = price.plot(\"CENA\", legend=True, cmap=\"plasma\", alpha=.5)\ndistricts.boundary.plot(ax=ax, color=\"red\")\nctx.add_basemap(ax=ax, crs=price.crs, source=\"CartoDB Voyager\")\nCreate a convex hull around each polygon in price.\nprice[\"hull\"] = price.convex_hull\nCalculate the area of these convex hulls.\nprice[\"hull_area\"] = price[\"hull\"].area\nFind the 20% smallest convex hulls in the GeoDataFrame. Create a new object (e.g. smallest) only with them.\ntotal_length = len(price)  # get total length\ntwenty_percent = total_length / 5  # get the length of 20%\ntwenty_percent\nYou can either type it in:\nsmallest = price.sort_values(\"hull_area\").iloc[:1889]\nOr convert the float to int and use it programmatically.\nsmallest = price.sort_values(\"hull_area\").iloc[:int(twenty_percent)]\nCreate a multi-layer map of Prague where the smallest areas are coloured in one colour, and the rest appear in black. (I need to revise this task, the result is not great…)\nax = price.plot(color=\"black\")\nsmallest.plot(ax=ax, color=\"red\")\nJoin the two GeoDataFrame using .sjoin() or .overlay() methods.\nprice_w_district = price.sjoin(districts)\nIs the mean price higher in Praha 3 or Praha 6?\nsorted_price = price_w_district.groupby(\"NAZEV_MC\")[\"CENA\"].mean().sort_values()\nsorted_price\nFrom the Series above, you can read that Praha 3 is more expensive than Praha 6.\nWhich district is the cheapest?\nAgain, you can read that it is Praha-Přední Kopanina. But if you want to get that programmatically, you will need to access the index.\nsorted_price.idxmin()\nWhat is the difference between the cheapest and the most expensive one?\nsorted_price.max() - sorted_price.min()"
  },
  {
    "objectID": "regression/hands_on.html",
    "href": "regression/hands_on.html",
    "title": "Regression and geography",
    "section": "",
    "text": "When trying to determine the effect of some (independent) variables on the outcome of phenomena (dependent variable), you often use regression to model such an outcome and understand the influence each of the variables has in the model. With spatial regression, it is the same. You just need to use the spatial dimension in a mindful way.\nThis session provides an introduction to ways of incorporating space into regression models, from spatial variables in standard linear regression to geographically weighted regression.\nimport esda\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport mgwr\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels.formula.api as sm\nfrom libpysal import graph\nfrom splot.esda import lisa_cluster",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/hands_on.html#data",
    "href": "regression/hands_on.html#data",
    "title": "Regression and geography",
    "section": "Data",
    "text": "Data\nYou will work with the same data you already used in the session on spatial autocorrelation - the results of the second round of the presidential elections in Czechia in 2023, between Petr Pavel and Andrej Babiš, on a level of municipalities. You can read the election data directly from the original location.\n\nelections = gpd.read_file(\n    \"https://martinfleischmann.net/sds/autocorrelation/data/cz_elections_2023.gpkg\"\n)\nelections = elections.set_index(\"name\")\nelections.head()\n\n\n\n\n\n\n\n\nPetrPavel\nAndrejBabis\nnationalCode\nsourceOfName\ngeometry\n\n\nname\n\n\n\n\n\n\n\n\n\nAbertamy\n62.98\n37.01\n554979\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-849678.97 -996811.24, -849429...\n\n\nAdamov (Blansko, 581291)\n57.17\n42.82\n581291\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-590872.42 -1148832.36, -59116...\n\n\nAdamov (České Budějovice, 535826)\n65.17\n34.82\n535826\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-748969.5 -1162820.89, -749180...\n\n\nAdamov (Kutná Hora, 531367)\n53.84\n46.15\n531367\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-677775.47 -1077800.05, -67769...\n\n\nAdršpach\n62.18\n37.81\n547786\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-620084.55 -999987.8, -620131....\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nelections = gpd.read_file(\n    \"cz_elections_2023.gpkg\",\n)\n\n\n\nThe election results give you the dependent variable - you will look at the percentage of votes Petr Pavel, the winner, received. From the map of the results and the analysis you did when exploring spatial autocorrelation you already know that there are some significant spatial patterns. Let’s look whether these patterns correspond to the composition of education levels within each municipality.\nYou can use the data from the Czech Statistical Office reflecting the situation during the Census 2021. The original table has been preprocessed and is available as a CSV.\n\neducation = pd.read_csv(\n    \"https://martinfleischmann.net/sds/regression/data/education.csv\"\n)\neducation.head()\n\n\n\n\n\n\n\n\nuzemi_kod\nwithout_education\nundetermined\nincomplete_primary_education\nlower_secondary_and_secondary_education\nfurther_education\npost_maturita_studies\nbachelors_degree\ndoctoral_degree\nmasters_degree\nhigher_vocational_education\nhigher_vocational_education_in_a_conservatory\nprimary_education\ncomplete_secondary_vocational_education\ncomplete_secondary_general_education\nokres\n\n\n\n\n0\n500011\n0.570704\n3.741281\n1.141408\n34.242232\n1.775523\n0.507292\n2.853519\n0.634115\n12.935954\n1.395054\n0.126823\n11.350666\n17.945466\n10.779962\nZlín\n\n\n1\n500020\n0.885827\n3.346457\n1.968504\n40.157480\n2.066929\n0.885827\n1.771654\n0.492126\n6.299213\n1.574803\n0.000000\n15.059055\n16.338583\n9.153543\nŠumperk\n\n\n2\n500046\n0.359195\n3.232759\n0.790230\n39.152299\n2.514368\n0.790230\n3.520115\n0.215517\n10.632184\n1.364943\n0.143678\n9.770115\n15.301724\n12.212644\nNový Jičín\n\n\n3\n500062\n0.238237\n3.573556\n1.072067\n32.757594\n2.084574\n1.131626\n3.037522\n0.178678\n13.281715\n0.714711\n0.119119\n11.316260\n18.701608\n11.792734\nVsetín\n\n\n4\n500071\n0.412939\n2.890571\n1.238816\n34.067447\n1.720578\n0.757054\n3.028217\n0.137646\n11.080523\n0.894701\n0.000000\n9.772884\n20.027529\n13.971094\nVsetín\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\neducation = pd.read_csv(\n    \"education.csv\",\n)\n\n\n\nThe first thing you need to do is to merge the two tables, to have both dependent and independent variables together. The municipality code in the elections table is in the \"nationalCode\" column, while in the education table in the \"uzemi_kod\" column.\n\nelections_data = elections.merge(education, left_on=\"nationalCode\", right_on=\"uzemi_kod\")\nelections_data.head()\n\n\n\n\n\n\n\n\nPetrPavel\nAndrejBabis\nnationalCode\nsourceOfName\ngeometry\nuzemi_kod\nwithout_education\nundetermined\nincomplete_primary_education\nlower_secondary_and_secondary_education\n...\npost_maturita_studies\nbachelors_degree\ndoctoral_degree\nmasters_degree\nhigher_vocational_education\nhigher_vocational_education_in_a_conservatory\nprimary_education\ncomplete_secondary_vocational_education\ncomplete_secondary_general_education\nokres\n\n\n\n\n0\n62.98\n37.01\n554979\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-849678.97 -996811.24, -849429...\n554979\n0.435414\n11.030479\n1.741655\n37.010160\n...\n1.161103\n1.306241\n0.290276\n5.950653\n0.580552\n0.00000\n21.335269\n8.998549\n9.579100\nKarlovy Vary\n\n\n1\n57.17\n42.82\n581291\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-590872.42 -1148832.36, -59116...\n581291\n0.377766\n5.153805\n1.052348\n34.592553\n...\n0.782515\n2.725310\n1.187264\n11.171074\n1.349164\n0.08095\n11.359957\n17.539126\n11.225040\nBlansko\n\n\n2\n65.17\n34.82\n535826\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-748969.5 -1162820.89, -749180...\n535826\n0.269542\n3.234501\n0.943396\n23.450135\n...\n0.673854\n4.582210\n1.482480\n23.450135\n2.156334\n0.00000\n7.547170\n17.250674\n13.477089\nČeské Budějovice\n\n\n3\n53.84\n46.15\n531367\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-677775.47 -1077800.05, -67769...\n531367\n0.000000\n3.508772\n1.754386\n44.736842\n...\n0.877193\n2.631579\n0.000000\n5.263158\n0.000000\n0.00000\n7.017544\n20.175439\n13.157895\nKutná Hora\n\n\n4\n62.18\n37.81\n547786\nČeský úřad zeměměřický a katastrální\nMULTIPOLYGON (((-620084.55 -999987.8, -620131....\n547786\n0.744417\n8.188586\n0.992556\n39.702233\n...\n0.496278\n2.729529\n0.248139\n6.451613\n0.000000\n0.00000\n12.903226\n13.895782\n12.406948\nNáchod\n\n\n\n\n5 rows × 21 columns\n\n\n\nThat is all sorted and ready to be used in a regression.",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/hands_on.html#non-spatial-linear-regression",
    "href": "regression/hands_on.html#non-spatial-linear-regression",
    "title": "Regression and geography",
    "section": "Non-spatial linear regression",
    "text": "Non-spatial linear regression\nBefore jumping into spatial regression, let’s start with the standard linear regression. A useful start is to explore the data using an ordinary least squares (OLS) linear regression model.\n\nOLS model\nWhile this course is not formula-heavy, in this case, it is useful to use the formula to explain the logic of the algorithm. The OLS tries to model the dependent variable \\(y\\) as the linear combination of independent variables \\(x_1, x_2, ... x_n\\):\n\\[y_{i}=\\alpha+\\beta _{1}\\ x_{i1}+\\beta _{2}\\ x_{i2}+\\cdots +\\beta _{p}\\ x_{ip}+\\varepsilon _{i}\\]\nwhere \\(\\epsilon_{i}\\) represents unobserved random variables and \\(\\alpha\\) represents an intercept - a constant. You know the \\(y_i\\), all of the \\(x_i\\) and try to estimate the coefficients. In Python, you can run linear regression using implementations from more than one package (e.g., statsmodels, scikit-learn, spreg). This course covers statsmodels approach as it has a nice API to work with.\nFirst, you need a list of names of independent variables. That is equal to column names without a few of the columns that represent other data.\n\nindependent_names = education.columns.drop([\"uzemi_kod\", \"okres\"])\nindependent_names\n\nIndex(['without_education', 'undetermined', 'incomplete_primary_education',\n       'lower_secondary_and_secondary_education', 'further_education',\n       'post_maturita_studies', 'bachelors_degree', 'doctoral_degree',\n       'masters_degree', 'higher_vocational_education',\n       'higher_vocational_education_in_a_conservatory', 'primary_education',\n       'complete_secondary_vocational_education',\n       'complete_secondary_general_education'],\n      dtype='object')\n\n\nstatsmodels (above imported as sm) offers an intuitive formula API to define the linear regression.\n\n1formula = f\"PetrPavel ~ {' + '.join(independent_names)}\"\nformula\n\n\n1\n\nIn the formula, specify the dependent variable (\"PetrPavel\") as a function of (\"~\") independent variables (\"undetermined + incomplete_primary_education + ...\").\n\n\n\n\n'PetrPavel ~ without_education + undetermined + incomplete_primary_education + lower_secondary_and_secondary_education + further_education + post_maturita_studies + bachelors_degree + doctoral_degree + masters_degree + higher_vocational_education + higher_vocational_education_in_a_conservatory + primary_education + complete_secondary_vocational_education + complete_secondary_general_education'\n\n\nWith the formula ready, you can fit the model and estimate all betas and \\(\\varepsilon\\).\n\nols = sm.ols(formula, data=elections_data).fit()\n\nThe ols object offers a handy summary() function providing most of the results from the fitting in one place.\n\nols.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nPetrPavel\nR-squared:\n0.423\n\n\nModel:\nOLS\nAdj. R-squared:\n0.422\n\n\nMethod:\nLeast Squares\nF-statistic:\n352.6\n\n\nDate:\nFri, 12 Jul 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n14:36:22\nLog-Likelihood:\n-22397.\n\n\nNo. Observations:\n6254\nAIC:\n4.482e+04\n\n\nDf Residuals:\n6240\nBIC:\n4.492e+04\n\n\nDf Model:\n13\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.1283\n0.006\n19.748\n0.000\n0.116\n0.141\n\n\nwithout_education\n0.3621\n0.093\n3.914\n0.000\n0.181\n0.543\n\n\nundetermined\n0.1879\n0.041\n4.542\n0.000\n0.107\n0.269\n\n\nincomplete_primary_education\n-0.0881\n0.119\n-0.737\n0.461\n-0.322\n0.146\n\n\nlower_secondary_and_secondary_education\n0.2890\n0.013\n21.435\n0.000\n0.263\n0.315\n\n\nfurther_education\n0.9665\n0.116\n8.312\n0.000\n0.739\n1.194\n\n\npost_maturita_studies\n1.3528\n0.204\n6.635\n0.000\n0.953\n1.752\n\n\nbachelors_degree\n1.1634\n0.092\n12.581\n0.000\n0.982\n1.345\n\n\ndoctoral_degree\n1.2223\n0.220\n5.550\n0.000\n0.791\n1.654\n\n\nmasters_degree\n1.1231\n0.036\n31.201\n0.000\n1.053\n1.194\n\n\nhigher_vocational_education\n1.7312\n0.132\n13.124\n0.000\n1.473\n1.990\n\n\nhigher_vocational_education_in_a_conservatory\n2.7664\n0.577\n4.796\n0.000\n1.636\n3.897\n\n\nprimary_education\n0.0723\n0.033\n2.213\n0.027\n0.008\n0.136\n\n\ncomplete_secondary_vocational_education\n0.8683\n0.032\n27.316\n0.000\n0.806\n0.931\n\n\ncomplete_secondary_general_education\n0.8121\n0.038\n21.247\n0.000\n0.737\n0.887\n\n\n\n\n\n\n\n\nOmnibus:\n130.315\nDurbin-Watson:\n1.981\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n215.929\n\n\nSkew:\n0.189\nProb(JB):\n1.29e-47\n\n\nKurtosis:\n3.828\nCond. No.\n5.74e+17\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The smallest eigenvalue is 4.03e-29. This might indicate that there arestrong multicollinearity problems or that the design matrix is singular.\n\n\nIt is clear that education composition has a significant effect on the outcome of the elections but can explain only about 42% of its variance (adjusted \\(R^2\\) is 0.422). A higher amount of residents with only primary education tends to lower Pavel’s gain while a higher amount of university degrees tends to increase the number of votes he received. That is nothing unexpected. However, let’s make use of geography and unpack these results a bit.\n\n\nSpatial exploration of the model (hidden structures)\nStart with the visualisation of the prediction the OLS model produces using the coefficients shown above.\n\n1predicted = ols.predict(elections_data)\npredicted.head()\n\n\n1\n\nUse the predict() method with the original data to get the prediction using the model.\n\n\n\n\n0    41.731952\n1    58.447707\n2    73.554706\n3    53.281638\n4    48.993730\ndtype: float64\n\n\nMake a plot comparing the prediction with the actual results.\n\n1f, axs = plt.subplots(2, 1, figsize=(7, 8))\n2elections_data.plot(\n    predicted, legend=True, cmap=\"coolwarm\", vmin=0, vmax=100, ax=axs[0]\n)\n3elections_data.plot(\n    \"PetrPavel\", legend=True, cmap=\"coolwarm\", vmin=0, vmax=100, ax=axs[1]\n)\n4axs[0].set_title(\"OLS prediction\")\naxs[1].set_title(\"Actual results\")\n\n5axs[0].set_axis_off()\naxs[1].set_axis_off()\n\n\n1\n\nCreate a subplot with two axes.\n\n2\n\nPlot the predicted data on the elections_data geometry.\n\n3\n\nPlot the original results.\n\n4\n\nSet titles for axes in the subplot.\n\n5\n\nRemove axes borders.\n\n\n\n\n\n\n\nOLS prediction and the actual outcome\n\n\n\n\nThe general patterns are captured but there are some areas of the country which seem to be quite off. The actual error between prediction and the dependent variable is captured as residuals, which are directly available in ols as ols.resid attribute. Let’s plot to get a better comparison.\n\n1elections_data[\"residual\"] = ols.resid\n2max_residual = ols.resid.abs().max()\n3ax = elections_data.plot(\n    \"residual\", legend=True, cmap=\"RdBu\", vmin=-max_residual, vmax=max_residual\n)\nax.set_axis_off()\n\n\n1\n\nAssign residuals as a column. This is not needed for the plot but it will be useful later.\n\n2\n\nIdentify the maximum residual value based on absolute value to specify vmin and vmax values of the colormap.\n\n3\n\nPlot the data using diverging colormap centred around 0.\n\n\n\n\n\n\n\nResiduals of the OLS prediction\n\n\n\n\nAll of the municipalities in blue (residual above 0) have reported higher gains for Petr Pavel than the model assumes based on education structure, while all in red reported lower gains than what is expected. However, as data scientists, we have better tools to analyse the spatial structure of residuals than eyeballing it. Let’s recall the session on spatial autocorrelation again and figure out the spatial clusters of residuals.\nFirst, create a contiguity graph and row-normalise it.\n\ncontiguity_r = graph.Graph.build_contiguity(elections_data).transform(\"r\")\n\nThen you can generate a Moran plot of residuals. For that, you will need the lag of residuals.\n\nelections_data[\"residual_lag\"] = contiguity_r.lag(elections_data[\"residual\"])\n\nAnd then you can use the code from the earlier session to generate a Moran scatterplot using seaborn.\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nsns.regplot(\n    x=\"residual\",\n    y=\"residual_lag\",\n    data=elections_data,\n    marker=\".\",\n    scatter_kws={\"alpha\": 0.2},\n    line_kws=dict(color=\"lightcoral\")\n)\nplt.axvline(0, c=\"black\", alpha=0.5)\nplt.axhline(0, c=\"black\", alpha=0.5);\n\n\n\n\nMoran Plot\n\n\n\n\nThat looks like a pretty strong relationship. Use the local version of Moran’s statistic to find out the clusters.\n\n1lisa = esda.Moran_Local(elections_data['residual'], contiguity_r.to_W())\n\n\n1\n\nUse Moran_Local function from esda and remember that it needs W, not Graph.\n\n\n\n\nLet’s use our handy lisa_cluster function from splot to visualise the results.\n\n_ = lisa_cluster(lisa, elections_data)\n\n\n\n\nLISA clusters\n\n\n\n\nThe outcome of LISA shows large clusters of both overpredicted (high-high) and underpredicted (low-low) areas. The underpredicted are mostly in central Bohemia around Prague and in the mountains near the borders, where the ski resorts are. Putting aside the central areas for a bit, the explanation of underprediction in mountains is relatively straightforward. The education data are linked to the residents of each municipality. The people who voted in a municipality do not necessarily need to match with residents. It is known that more affluent population groups, who are more likely to go to a ski resort, voted overwhelmingly for Pavel. And since the elections were in winter, a lot of them likely voted in ski resorts, affecting the outcome of the model.\nThe overpredicted areas, on the other hand, are known for higher levels of deprivation, which may have played a role in the results. What is clear, is that geography plays a huge role in the modelling of the elections.",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/hands_on.html#spatial-heterogeneity",
    "href": "regression/hands_on.html#spatial-heterogeneity",
    "title": "Regression and geography",
    "section": "Spatial heterogeneity",
    "text": "Spatial heterogeneity\nNot all areas behave equally, it seems that some systematically vote for Pavel more than for Babiš while others vote for him less. You need to account for this when building a regression model. One way is by capturing spatial heterogeneity. It implicitly assumes that the outcome of the model spatially varies. You can expect \\(\\alpha\\) to vary across space, or individual values of \\(\\beta\\). Spatial fixed effects capture the former.\n\nSpatial fixed effects\nYou need to find a way to let \\(\\alpha\\) change across space. One option is through the proxy variable capturing higher-level geography. You have information about okres (the closest translation to English would probably be district or county) each municipality belongs to. Let’s start by checking if that could be useful by visualising residuals within each. While you can use the box plot directly, it may be better to sort the values by median residuals, so let’s complicate the code a bit.\n\n1medians = (\n    elections_data.groupby(\"okres\")\n    .residual.median()\n    .to_frame(\"okres_residual\")\n)\nf, ax = plt.subplots(figsize=(16, 6))\n2sns.boxplot(\n3    data=elections_data.merge(\n        medians, how=\"left\", left_on=\"okres\", right_index=True\n4    ).sort_values(\"okres_residual\"),\n5    x=\"okres\",\n6    y=\"residual\",\n)\n7_ = plt.xticks(rotation=90)\n\n\n1\n\nGet median residual value per okres using groupby and convert the resulting Series to DataFrame to be able to merge it with the original data.\n\n2\n\nCreate a box plot and pass the data.\n\n3\n\nThe data is the elections_data table merged with the medians that are after merge stored as the \"okres_residual\" column.\n\n4\n\nSort by the \"okres_residual\" column.\n\n5\n\nThe x value should represent each okres.\n\n6\n\nThe y value should represent residuals.\n\n7\n\nRotate x tick labels by 90 degrees for readability.\n\n\n\n\n\n\n\nDistributions of residuals by okres\n\n\n\n\nThere are clear differences among these geographies, with a gradient between median -16.5 and 8.3. In a model that does not show spatial heterogeneity across higher-level geographies like these, all medians would be close to zero. This is positive information as it indicates, that we can encode these geographies in the model as a spatial proxy. Using statsmodels, you can adapt the equation and include \"okres\" as a dummy variable.\n\n1formula_fe = f\"PetrPavel ~ {' + '.join(independent_names)} + okres - 1\"\n2ols_fe = sm.ols(formula_fe, data=elections_data).fit()\n\n\n1\n\nAdd + okres - 1, where - 1 means that you’re fitting a model without an intercept. Since you are now including a categorical variable okres, that will be converted to a dummy one, statsmodels would otherwise drop the first level (okres) to use as a reference represented by the intercept. The resulting coefficients would then reflect the difference between the intercept and the value for each okres. By omitting the intercept, the coefficient can be directly interpreted as \\(\\alpha\\).\n\n2\n\nFit the OLS model using the new formula.\n\n\n\n\nSince every unique value in the \"okres\" column is now treated as a unique variable the summary is a bit longer than before.\n\nols_fe.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nPetrPavel\nR-squared:\n0.571\n\n\nModel:\nOLS\nAdj. R-squared:\n0.565\n\n\nMethod:\nLeast Squares\nF-statistic:\n92.21\n\n\nDate:\nFri, 12 Jul 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n14:36:35\nLog-Likelihood:\n-21472.\n\n\nNo. Observations:\n6254\nAIC:\n4.312e+04\n\n\nDf Residuals:\n6164\nBIC:\n4.373e+04\n\n\nDf Model:\n89\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nokres[Benešov]\n2.5515\n0.725\n3.520\n0.000\n1.131\n3.972\n\n\nokres[Beroun]\n4.3517\n0.834\n5.219\n0.000\n2.717\n5.986\n\n\nokres[Blansko]\n-1.0237\n0.723\n-1.416\n0.157\n-2.441\n0.393\n\n\nokres[Brno-město]\n-3.6810\n7.473\n-0.493\n0.622\n-18.331\n10.968\n\n\nokres[Brno-venkov]\n1.9413\n0.593\n3.276\n0.001\n0.779\n3.103\n\n\nokres[Bruntál]\n-10.4042\n0.938\n-11.094\n0.000\n-12.243\n-8.566\n\n\nokres[Břeclav]\n1.2036\n0.957\n1.258\n0.209\n-0.673\n3.080\n\n\nokres[Cheb]\n-2.6902\n1.204\n-2.234\n0.026\n-5.051\n-0.330\n\n\nokres[Chomutov]\n-7.3448\n1.145\n-6.417\n0.000\n-9.589\n-5.101\n\n\nokres[Chrudim]\n0.5374\n0.744\n0.722\n0.470\n-0.921\n1.996\n\n\nokres[Domažlice]\n-0.5435\n0.880\n-0.618\n0.537\n-2.268\n1.181\n\n\nokres[Děčín]\n-4.6916\n1.061\n-4.424\n0.000\n-6.771\n-2.613\n\n\nokres[Frýdek-Místek]\n-7.5664\n0.907\n-8.345\n0.000\n-9.344\n-5.789\n\n\nokres[Havlíčkův Brod]\n0.3325\n0.717\n0.464\n0.643\n-1.073\n1.738\n\n\nokres[Hodonín]\n0.5302\n0.845\n0.628\n0.530\n-1.126\n2.187\n\n\nokres[Hradec Králové]\n-0.0895\n0.755\n-0.119\n0.906\n-1.570\n1.391\n\n\nokres[Jablonec nad Nisou]\n9.3049\n1.275\n7.300\n0.000\n6.806\n11.804\n\n\nokres[Jeseník]\n-7.5762\n1.537\n-4.930\n0.000\n-10.589\n-4.564\n\n\nokres[Jihlava]\n5.8273\n0.701\n8.311\n0.000\n4.453\n7.202\n\n\nokres[Jindřichův Hradec]\n2.4094\n0.749\n3.218\n0.001\n0.942\n3.877\n\n\nokres[Jičín]\n1.7354\n0.735\n2.362\n0.018\n0.295\n3.176\n\n\nokres[Karlovy Vary]\n0.3530\n1.027\n0.344\n0.731\n-1.661\n2.367\n\n\nokres[Karviná]\n-15.8537\n1.819\n-8.716\n0.000\n-19.419\n-12.288\n\n\nokres[Kladno]\n1.9768\n0.771\n2.564\n0.010\n0.465\n3.488\n\n\nokres[Klatovy]\n-1.2087\n0.791\n-1.528\n0.126\n-2.759\n0.342\n\n\nokres[Kolín]\n2.9124\n0.809\n3.602\n0.000\n1.327\n4.498\n\n\nokres[Kroměříž]\n-4.4764\n0.859\n-5.212\n0.000\n-6.160\n-2.793\n\n\nokres[Kutná Hora]\n-0.5966\n0.819\n-0.728\n0.466\n-2.202\n1.009\n\n\nokres[Liberec]\n2.7545\n0.988\n2.788\n0.005\n0.817\n4.691\n\n\nokres[Litoměřice]\n-0.6300\n0.751\n-0.838\n0.402\n-2.103\n0.843\n\n\nokres[Louny]\n-10.6715\n0.916\n-11.655\n0.000\n-12.466\n-8.877\n\n\nokres[Mladá Boleslav]\n4.5057\n0.708\n6.361\n0.000\n3.117\n5.894\n\n\nokres[Most]\n-9.2808\n1.479\n-6.275\n0.000\n-12.180\n-6.381\n\n\nokres[Mělník]\n5.0893\n0.917\n5.548\n0.000\n3.291\n6.888\n\n\nokres[Nový Jičín]\n-4.1418\n1.032\n-4.013\n0.000\n-6.165\n-2.119\n\n\nokres[Nymburk]\n3.9077\n0.825\n4.734\n0.000\n2.290\n5.526\n\n\nokres[Náchod]\n8.7053\n0.866\n10.055\n0.000\n7.008\n10.403\n\n\nokres[Olomouc]\n-2.8127\n0.779\n-3.613\n0.000\n-4.339\n-1.286\n\n\nokres[Opava]\n-7.1956\n0.871\n-8.261\n0.000\n-8.903\n-5.488\n\n\nokres[Ostrava-město]\n-9.5847\n2.088\n-4.590\n0.000\n-13.679\n-5.491\n\n\nokres[Pardubice]\n0.5159\n0.729\n0.708\n0.479\n-0.914\n1.945\n\n\nokres[Pelhřimov]\n2.2828\n0.709\n3.221\n0.001\n0.894\n3.672\n\n\nokres[Plzeň-jih]\n-1.2318\n0.772\n-1.595\n0.111\n-2.745\n0.282\n\n\nokres[Plzeň-město]\n1.2374\n1.939\n0.638\n0.523\n-2.565\n5.039\n\n\nokres[Plzeň-sever]\n2.3828\n0.775\n3.074\n0.002\n0.863\n3.902\n\n\nokres[Prachatice]\n3.5268\n0.943\n3.739\n0.000\n1.678\n5.376\n\n\nokres[Praha]\n1.5703\n7.475\n0.210\n0.834\n-13.082\n16.223\n\n\nokres[Praha-východ]\n7.3812\n0.764\n9.657\n0.000\n5.883\n8.880\n\n\nokres[Praha-západ]\n8.0313\n0.914\n8.791\n0.000\n6.240\n9.822\n\n\nokres[Prostějov]\n-4.1691\n0.780\n-5.345\n0.000\n-5.698\n-2.640\n\n\nokres[Písek]\n3.7584\n0.881\n4.267\n0.000\n2.032\n5.485\n\n\nokres[Přerov]\n-8.5036\n0.751\n-11.324\n0.000\n-9.976\n-7.031\n\n\nokres[Příbram]\n4.5529\n0.707\n6.442\n0.000\n3.168\n5.938\n\n\nokres[Rakovník]\n-0.9709\n0.840\n-1.156\n0.248\n-2.617\n0.675\n\n\nokres[Rokycany]\n-0.4692\n0.924\n-0.508\n0.612\n-2.281\n1.343\n\n\nokres[Rychnov nad Kněžnou]\n4.6060\n0.857\n5.376\n0.000\n2.927\n6.285\n\n\nokres[Semily]\n10.9303\n0.952\n11.484\n0.000\n9.065\n12.796\n\n\nokres[Sokolov]\n-4.3738\n1.235\n-3.542\n0.000\n-6.795\n-1.953\n\n\nokres[Strakonice]\n1.0393\n0.729\n1.427\n0.154\n-0.389\n2.468\n\n\nokres[Svitavy]\n3.0370\n0.724\n4.195\n0.000\n1.618\n4.456\n\n\nokres[Tachov]\n-3.5208\n1.078\n-3.266\n0.001\n-5.634\n-1.408\n\n\nokres[Teplice]\n-6.0731\n1.296\n-4.686\n0.000\n-8.614\n-3.532\n\n\nokres[Trutnov]\n8.9034\n0.881\n10.106\n0.000\n7.176\n10.630\n\n\nokres[Tábor]\n5.0145\n0.736\n6.809\n0.000\n3.571\n6.458\n\n\nokres[Třebíč]\n0.1759\n0.614\n0.286\n0.775\n-1.027\n1.379\n\n\nokres[Uherské Hradiště]\n0.8108\n0.866\n0.936\n0.349\n-0.887\n2.508\n\n\nokres[Vsetín]\n2.7505\n0.990\n2.779\n0.005\n0.810\n4.691\n\n\nokres[Vyškov]\n-2.5157\n0.859\n-2.929\n0.003\n-4.200\n-0.832\n\n\nokres[Zlín]\n3.6748\n0.804\n4.571\n0.000\n2.099\n5.251\n\n\nokres[Znojmo]\n-5.4760\n0.658\n-8.320\n0.000\n-6.766\n-4.186\n\n\nokres[Ústí nad Labem]\n-5.6362\n1.566\n-3.598\n0.000\n-8.707\n-2.565\n\n\nokres[Ústí nad Orlicí]\n6.9769\n0.725\n9.621\n0.000\n5.555\n8.398\n\n\nokres[Česká Lípa]\n-1.2302\n1.007\n-1.222\n0.222\n-3.204\n0.743\n\n\nokres[České Budějovice]\n3.5436\n0.741\n4.781\n0.000\n2.091\n4.996\n\n\nokres[Český Krumlov]\n6.8514\n1.118\n6.129\n0.000\n4.660\n9.043\n\n\nokres[Šumperk]\n-3.4085\n0.865\n-3.941\n0.000\n-5.104\n-1.713\n\n\nokres[Žďár nad Sázavou]\n5.2729\n0.603\n8.750\n0.000\n4.092\n6.454\n\n\nwithout_education\n0.5102\n0.081\n6.303\n0.000\n0.351\n0.669\n\n\nundetermined\n0.2195\n0.038\n5.821\n0.000\n0.146\n0.293\n\n\nincomplete_primary_education\n0.0568\n0.105\n0.542\n0.588\n-0.149\n0.262\n\n\nlower_secondary_and_secondary_education\n0.2739\n0.013\n21.706\n0.000\n0.249\n0.299\n\n\nfurther_education\n0.7216\n0.102\n7.040\n0.000\n0.521\n0.922\n\n\npost_maturita_studies\n1.1008\n0.178\n6.167\n0.000\n0.751\n1.451\n\n\nbachelors_degree\n1.2063\n0.082\n14.732\n0.000\n1.046\n1.367\n\n\ndoctoral_degree\n0.7880\n0.199\n3.956\n0.000\n0.398\n1.179\n\n\nmasters_degree\n1.1071\n0.033\n33.305\n0.000\n1.042\n1.172\n\n\nhigher_vocational_education\n1.0217\n0.120\n8.547\n0.000\n0.787\n1.256\n\n\nhigher_vocational_education_in_a_conservatory\n2.5918\n0.504\n5.148\n0.000\n1.605\n3.579\n\n\nprimary_education\n0.2144\n0.030\n7.243\n0.000\n0.156\n0.272\n\n\ncomplete_secondary_vocational_education\n0.8318\n0.028\n29.208\n0.000\n0.776\n0.888\n\n\ncomplete_secondary_general_education\n0.8074\n0.034\n23.538\n0.000\n0.740\n0.875\n\n\n\n\n\n\n\n\nOmnibus:\n286.683\nDurbin-Watson:\n1.974\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n766.532\n\n\nSkew:\n0.226\nProb(JB):\n3.55e-167\n\n\nKurtosis:\n4.655\nCond. No.\n2.53e+18\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The smallest eigenvalue is 2.07e-30. This might indicate that there arestrong multicollinearity problems or that the design matrix is singular.\n\n\nThe coefficients for each of the values of the categorical variable \"okres\" are considered spatial fixed effects. You can extract just those from the model by getting the .params Series and filtering it.\n\n1fixed_effects = ols_fe.params.filter(like=\"okres\")\nfixed_effects.head()\n\n\n1\n\nols_fe.params is a pandas.Series that can be filtered based on the index using the filter() method.\n\n\n\n\nokres[Benešov]        2.551453\nokres[Beroun]         4.351734\nokres[Blansko]       -1.023745\nokres[Brno-město]    -3.681027\nokres[Brno-venkov]    1.941320\ndtype: float64\n\n\nYou can see that if you want to join this Series to the original DataFrame, you need to extract the names of each okres from within the square brackets.\n\n1fixed_effects.index = fixed_effects.index.str.strip(\n    \"okres[\"\n2).str.strip(\"]\")\nfixed_effects.head()\n\n\n1\n\nUse the .str accessor that enables you to use string methods on a Series and strip the strings of the specified characters.\n\n2\n\nUse it again to strip the closing bracket.\n\n\n\n\nBenešov        2.551453\nBeroun         4.351734\nBlansko       -1.023745\nBrno-město    -3.681027\nBrno-venkov    1.941320\ndtype: float64\n\n\nThe resulting Series can be merged with the elections_data, allowing us to map the spatial fixed effects.\n\n1max_effect = fixed_effects.abs().max()\n2elections_data.merge(\n3    fixed_effects.to_frame(\"fixed_effect\"),\n4    left_on=\"okres\",\n5    right_index=True,\n6    how=\"left\",\n7).plot(\n8    \"fixed_effect\", legend=True, vmin=-max_effect, vmax=max_effect, cmap=\"PRGn\"\n).set_axis_off()\n\n\n1\n\nIdentify the maximum fixed effect value based on absolute value to specify vmin and vmax values of the colormap.\n\n2\n\nMerge the fixed_effects to elections_data.\n\n3\n\nMerge requires a DataFrame, so convert it to one with a column named \"fixed_effect\".\n\n4\n\nUse the column \"okres\" from elections_data as a merge key.\n\n5\n\nUse the index of fixed_effects as a merge key.\n\n6\n\nUse the left join, keeping the structure of elections_data intact.\n\n7\n\nPlot the \"fixed_effect\".\n\n8\n\nUse max_effect to specify the extent of the colormap to ensure it had mid-point at 0.\n\n\n\n\n\n\n\nFixed effect per okres\n\n\n\n\n\n\n\n\n\n\nSpatial regimes and spatial dependence\n\n\n\nWhere spatial fixed effects allow \\(\\alpha\\) to change geographically (within each okres), spatial regimes allow \\(\\beta_k\\) to change within the same regions. Spatial regimes cannot be done within statsmodels as they require more specialised treatment offered by the spreg package. Check the Spatial regimes sections of theSpatial Regression chapter from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details.\nThe same chapter also covers the modelling of spatial dependence using spreg. Both are considered advanced usage within this course but feel free to read through the materials yourself.\n\n\nWith spatial fixed effects, you were able to include spatial dimension in the model through a proxy variable, resulting in an improvement of adjusted \\(R^2\\) from 0.422 to 0.565 while also extracting the fixed effect of each okres. However, the model is still global. We are not able to determine how explanatory is education composition regionally.",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/hands_on.html#geographically-weighted-regression",
    "href": "regression/hands_on.html#geographically-weighted-regression",
    "title": "Regression and geography",
    "section": "Geographically weighted regression",
    "text": "Geographically weighted regression\nGeographically Weighted Regression (GWR) overcomes the limitation of the OLS, which provides a single global estimate by examining how the relationship between a dependent variable and independent variable changes across different geographic locations. It does this by moving a search window through the dataset, defining regions around each regression point, and fitting a regression model to the data within each region. This process is repeated for all the sample points in the dataset, resulting in localized estimates. These local estimates can then be mapped to visualize variations in variable relationships at different locations. However, for a dataset with 6254 observations, like the one used here, GWR will fit 6254 weighted regression models. That can eventually pose a limitation when dealing with larger datasets, for which fitting the GWR can take too long.\nVisually, you can imagine a spatial kernel being constructed around each location (point, specifically) where the kernel function defines its shape and bandwidth its size, as illustrated in Figure 1.\n\n\n\n\n\n\n\n\n\n\n\n(a) Illustration of bandwidth and its relation to weight.\n\n\n\n\n\n\n\n\n\n\n\n(b) Illustration of two spatial kernels across a point pattern.\n\n\n\n\n\n\n\nFigure 1: Illustrations of kernels. Reproduced from Fotheringham et al. (2002, 44–45)\n\n\n\nWith kernels being the core of the GWR method, their specification significantly affects the resulting model. You can specify three parameters:\n\nKernel shape: The shape of the curve formed by the kernel. In mgwr package used here, \"bisquare\", \"gaussian\", and \"exponential\" kernels are supported.\nKernel size: The bandwidth distance specifying how large is the moving window.\nBandwidth adaptivity: Bandwidth can be either fixed, specified by the metric distance, where the moving window is essentially formed as a buffer around a point, or adaptive, specified by the number of nearest neighbours.\n\nThe details of the implications of the choices are beyond the scope of this lesson but are discussed in-depth by Fotheringham, Brunsdon, and Charlton (2002).\n\nFixed bandwidth\nThe method can be illustrated on a GWR using a fixed bandwidth and the default bi-square kernel.\n\nBandwidth selection\nYou may have some theoretically defined bandwidth (e.g. you know that you want to consider only locations closer than 25 km) or use cross-validation to find the optimal bandwidth programmatically. CV can be an expensive procedure as the selection procedure fits models based on different bandwidths and compares residuals to choose the one where those are minimised. mgwr has the mgwr.sel_bw.Sel_BW function that helps you with the search. But before using it (or any other mgwr function), you need to prepare the data in the correct form.\nAs mentioned above, the GWR assumes point locations as those are well-defined within the distance search (unlike polygons), so you need to extract centroids from geometries and get their coordinates.\n\n1coords = elections_data.centroid.get_coordinates().values\ncoords\n\n\n1\n\nCreate centroids, extract their coordinates and the underlying numpy array instead of a DataFrame.\n\n\n\n\narray([[ -850410.51852285,  -994320.67123109],\n       [ -593313.18017394, -1149911.22029507],\n       [ -749835.86565295, -1163643.97264363],\n       ...,\n       [ -643316.42508618, -1080131.19290794],\n       [ -681632.98081662, -1178150.00416665],\n       [ -757365.40441225, -1083270.55289191]])\n\n\nSince mgwr is designed to work with numpy objects rather than pandas, extract both dependent and independent variables as arrays.\n\n1y = elections_data[f\"PetrPavel\"].values.reshape(-1, 1)\n2X = elections_data[independent_names[1:]].values\n\n\n1\n\nGet a column, extract its numpy representation and reshape it to an expected shape. The array should be two-dimensional.\n\n2\n\nGet a subset of columns and their array. Notice the omission of the first independent variable ([1:]). Unlike statsmodels, mgwr is not able to automatically deal with the interaction effects of independent variables while having an intercept. You therefore drop the first category and use the intercept in its place.\n\n\n\n\nWith the data ready, you can identify the optimal bandwidth. This step may take some time (probably minutes).\n\n1sel_bw = mgwr.sel_bw.Sel_BW(coords, y, X, fixed=True)\n2bw = sel_bw.search()\nbw\n\n\n1\n\nPass in coordinates, an array with dependent variable, an array with independent variables, and specify that you want a fixed bandwidth (in meters).\n\n2\n\nInitiate the search routine.\n\n\n\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/spglm/iwls.py:37: LinAlgWarning: Ill-conditioned matrix (rcond=3.94411e-21): result may not be accurate.\n  xtx_inv_xt = linalg.solve(xtx, xT)\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/spglm/iwls.py:37: LinAlgWarning: Ill-conditioned matrix (rcond=3.33013e-22): result may not be accurate.\n  xtx_inv_xt = linalg.solve(xtx, xT)\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/spglm/iwls.py:37: LinAlgWarning: Ill-conditioned matrix (rcond=8.5851e-21): result may not be accurate.\n  xtx_inv_xt = linalg.solve(xtx, xT)\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/spglm/iwls.py:37: LinAlgWarning: Ill-conditioned matrix (rcond=8.12331e-20): result may not be accurate.\n  xtx_inv_xt = linalg.solve(xtx, xT)\n\n\n34168.16\n\n\nThe optimal fixed bandwidth seems to be a bit more than 34 kilometres. You can pass it to the GWR function and fit the regression.\n\nfixed_bandwidth = mgwr.gwr.GWR(\n1    coords, y, X, bw=bw, fixed=True, name_x=independent_names[1:]\n)\n2results = fixed_bandwidth.fit()\n\n\n1\n\nPass the data and bandwidth, specify that the bandwidth is fixed and optionally pass the names of each independent variable to be used in the report.\n\n2\n\nFit the regression and save its results.\n\n\n\n\nAs before, you can use a summary method.\n\nresults.summary()\n\n===========================================================================\nModel type                                                         Gaussian\nNumber of observations:                                                6254\nNumber of covariates:                                                    14\n\nGlobal Regression Results\n---------------------------------------------------------------------------\nResidual sum of squares:                                         472435.355\nLog-likelihood:                                                  -22397.315\nAIC:                                                              44822.630\nAICc:                                                             44824.707\nBIC:                                                             417891.662\nR2:                                                                   0.423\nAdj. R2:                                                              0.422\n\nVariable                              Est.         SE  t(Est/SE)    p-value\n------------------------------- ---------- ---------- ---------- ----------\nIntercept                           36.341      9.252      3.928      0.000\nundetermined                        -0.174      0.104     -1.676      0.094\nincomplete_primary_education        -0.450      0.171     -2.632      0.008\nlower_secondary_and_secondary_      -0.073      0.093     -0.786      0.432\nfurther_education                    0.604      0.147      4.114      0.000\npost_maturita_studies                0.991      0.223      4.433      0.000\nbachelors_degree                     0.801      0.131      6.124      0.000\ndoctoral_degree                      0.860      0.237      3.624      0.000\nmasters_degree                       0.761      0.099      7.699      0.000\nhigher_vocational_education          1.369      0.160      8.539      0.000\nhigher_vocational_education_in       2.404      0.584      4.117      0.000\nprimary_education                   -0.290      0.101     -2.878      0.004\ncomplete_secondary_vocational_       0.506      0.097      5.197      0.000\ncomplete_secondary_general_edu       0.450      0.100      4.485      0.000\n\nGeographically Weighted Regression (GWR) Results\n---------------------------------------------------------------------------\nSpatial kernel:                                          Fixed bisquare\nBandwidth used:                                                   34168.160\n\nDiagnostic information\n---------------------------------------------------------------------------\nResidual sum of squares:                                         247794.379\nEffective number of parameters (trace(S)):                          828.144\nDegree of freedom (n - trace(S)):                                  5425.856\nSigma estimate:                                                       6.758\nLog-likelihood:                                                  -20379.457\nAIC:                                                              42417.202\nAICc:                                                             42671.010\nBIC:                                                              48006.443\nR2:                                                                   0.698\nAdjusted R2:                                                          0.651\nAdj. alpha (95%):                                                     0.001\nAdj. critical t value (95%):                                          3.339\n\nSummary Statistics For GWR Parameter Estimates\n---------------------------------------------------------------------------\nVariable                   Mean        STD        Min     Median        Max\n-------------------- ---------- ---------- ---------- ---------- ----------\nIntercept                15.048    111.553   -764.931     29.497    627.385\nundetermined              0.094      1.214     -5.521     -0.038      8.143\nincomplete_primary_e     -0.001      1.522     -6.462      0.065      7.177\nlower_secondary_and_      0.146      1.142     -6.693     -0.003      7.762\nfurther_education         0.560      1.611     -8.310      0.371     12.760\npost_maturita_studie      0.873      1.685     -8.284      0.776      9.729\nbachelors_degree          1.067      1.341    -10.368      0.969     11.842\ndoctoral_degree           1.021      2.252    -14.086      0.976     20.897\nmasters_degree            1.006      1.104     -3.303      0.899      7.815\nhigher_vocational_ed      1.085      1.548     -5.055      0.942     12.725\nhigher_vocational_ed      2.294      4.616    -20.167      2.498     32.132\nprimary_education         0.116      1.189     -7.042     -0.050      8.594\ncomplete_secondary_v      0.624      1.180     -4.729      0.460      7.852\ncomplete_secondary_g      0.616      1.131     -4.232      0.449      8.692\n===========================================================================\n\n\n\nThe function fits GWR but also OLS for comparison and prints its results under the Global Regression Results section. You can see that the performance matches the first model done with statsmodels above. The performance of the GWR based on the adjusted \\(R^2\\) is 0.651, another improvement over the fixed effects OLS model. It is probably as good as it can be given the data on education can explain only a part of the election behaviour.\nApart from the global \\(R^2\\), GWR can report \\(R^2\\) per geometry, giving us further insights into where education is the driver of the election result and where you need to look for other causes.\n\n1elections_data[\"local_r2\"] = results.localR2\n2elections_data.plot(\"local_r2\", legend=True, vmin=0, vmax=1).set_axis_off()\n\n\n1\n\nExtract the array of local \\(R^2\\) and assign it as a column.\n\n2\n\nPlot the values on a map. The theoretical minimum is 0 and the maximum is 1.\n\n\n\n\n\n\n\nLocal \\(R^2\\)\n\n\n\n\nHigher local \\(R^2\\) means that the model is able to use the data at each municipality and its surrounding areas to provide a result that is closer to the actual observed gain of Petr Pavel.\nYou can use the new GWR model and compare its predicted results with the OLS done first and the actual results.\n\n\nCode\nf, axs = plt.subplots(3, 1, figsize=(7, 14))\nelections_data.plot(\n    ols.predict(elections_data), legend=True, cmap=\"coolwarm\", ax=axs[0]\n)\nelections_data.plot(\n    results.predy.flatten(), legend=True, cmap=\"coolwarm\", vmin=0, vmax=100, ax=axs[1]\n).set_axis_off()\n\nelections_data.plot(\n    \"PetrPavel\", legend=True, cmap=\"coolwarm\", vmin=0, vmax=100, ax=axs[2]\n)\naxs[0].set_title(\"OLS prediction\")\naxs[1].set_title(\"GWR prediction\")\naxs[2].set_title(\"Actual results\")\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\naxs[2].set_axis_off()\n\n\n\n\n\nOLS prediction, GWR prediction, and the actual outcome\n\n\n\n\nIt is clear that the model is getting closer. Notice especially the mountains in the southwest and north of the country. You can check this even better by plotting residuals.\n\n\nCode\nf, axs = plt.subplots(2, 1, figsize=(7, 8))\nelections_data.plot(\n    \"residual\",\n    legend=True,\n    cmap=\"RdBu\",\n    vmin=-max_residual,\n    vmax=max_residual,\n    ax=axs[0],\n)\nelections_data.plot(\n    results.resid_response.flatten(),\n    legend=True,\n    cmap=\"RdBu\",\n    vmin=-max_residual,\n    vmax=max_residual,\n    ax=axs[1],\n)\naxs[0].set_title(\"OLS residuals\")\naxs[1].set_title(\"GWR residuals\")\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\n\n\n\n\n\nOLS residuals and GWR residuals\n\n\n\n\nApart from localised \\(R^2\\), GWR also contains localised \\(\\beta_k\\) coefficients. While you can plot them directly (they are available as results.params), you should also understand whether the coefficients are statistically significant. For that, you first need to understand what is the critical value of \\(t\\). It is reported in the summary above but not available as an attribute.\nThe results object contains the adjusted alpha values for 0.1, 0.05 and 0.01 levels of significance:\n\nresults.adj_alpha\n\narray([1.69052693e-03, 8.45263464e-04, 1.69052693e-05])\n\n\nYou can use the selected alpha value together with the results.critical_tval() method to get the critical value of \\(t\\).\n\n1sig95 = results.adj_alpha[1]\n2critical_t = results.critical_tval(alpha=sig95)\ncritical_t\n\n\n1\n\nSelect 0.05 level of significance.\n\n2\n\nDerive \\(t\\).\n\n\n\n\n3.339151343631635\n\n\nIf a coefficient estimate has an absolute value of \\(t\\) greater than 3.33, then it is statistically significant. You can use this level to mask out the coefficients on the maps below making a distinction between significant and non-significant values.\n\nsignificant = np.abs(results.tvalues) &gt; critical_t\n\nfig, axs = plt.subplots(4, 3, figsize=(9, 9))\naxs = axs.flatten()\nfor i, name in enumerate(independent_names[1:-1]):\n    significant_mask = significant[:, i + 1]\n    elections_data.plot(results.params[:, i + 1], cmap=\"plasma\", ax=axs[i])\n    elections_data[~significant_mask].plot(color=\"white\", ax=axs[i], alpha=.9)\n    axs[i].set_title(name[:20], fontdict={'fontsize': 8})\n    axs[i].set_axis_off()\n\n\n\n\nLocal coefficients\n\n\n\n\nIt seems that the coefficients are significant only in some areas, so you need to be careful when drawing conclusions here. This can be due to a lack of relationship or a small sample size. Try for yourself how the significance changes if you increase the bandwidth. But be careful as too large a bandwidth may miss regional differences and a bandwidth that would cover the whole country would be equal to the OLS model.\n\n\n\n\n\n\nAdaptive bandwidth\n\n\n\nIf you’d like to use the adaptive bandwidth, you can use same tools. Just specify fixed=False in both Sel_BW and GWR.\nsel_bw = mgwr.sel_bw.Sel_BW(coords, y, X, fixed=False)\nbw = sel_bw.search()\nadaptive = mgwr.gwr.GWR(coords, y, X, bw=bw, fixed=False, name_x=independent_names[1:])\nresults_adaptive = adaptive.fit()\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\nHave a look at the chapter Spatial Regression from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details and some other extensions.\nIf you’d like to learn the details of GWR, Geographically Weighted Regression by Fotheringham, Brunsdon, and Charlton (2002) is a good start.",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/hands_on.html#acknowledgements",
    "href": "regression/hands_on.html#acknowledgements",
    "title": "Regression and geography",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe first part of this section loosely follows the Spatial Regression chapter from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023). The section of GWR is inspired by the Spatial Modelling for Data Scientists course by Rowe and Arribas-Bel (2023).",
    "crumbs": [
      "Regression",
      "Regression and geography"
    ]
  },
  {
    "objectID": "regression/concepts.html",
    "href": "regression/concepts.html",
    "title": "Relationship and prediction",
    "section": "",
    "text": "Slides from the talk on linear regression, methods of inclusion of space to the model and geographically weighted regression.\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Regression from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis.",
    "crumbs": [
      "Regression",
      "Relationship and prediction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A course on Spatial Data Science",
    "section": "",
    "text": "The course Spatial Data Science for Social Geography introduces data science and computational analysis using open source tools written in the Python programming language to the curriculum of students of geography.\nThe course is taught in person at Charles University in Prague from October 2023 under the code MZ340V17.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#aims",
    "href": "index.html#aims",
    "title": "A course on Spatial Data Science",
    "section": "Aims",
    "text": "Aims\nThe course supports students with little prior knowledge of core competencies in Spatial Data Science (SDS). It includes:\n\nAdvancing their statistical and numerical literacy.\nIntroducing basic principles of programming for data science and state-of-the-art computational tools for SDS.\nPresenting a comprehensive overview of the main methodologies available to the Spatial Data Scientist and their intuition on how and when they can be applied.\nFocusing on real-world applications of these techniques in a geographical and applied context.\n\n\n\n\n\n\n\nWhat is the scope?\n\n\n\nThe course revolves around data typically used in human geography, but its applicability is not limited to human geography. In practice, you will work more with vector data than rasters (although we cover those a bit as well) and often with data capturing various aspects of human life. The spatial data science concepts, however, are universal.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "A course on Spatial Data Science",
    "section": "Learning outcomes",
    "text": "Learning outcomes\nAfter finishing the course, students will be able to:\n\nDemonstrate understanding of advanced concepts of spatial data science and use the open tools to load and analyze spatial data.\nUnderstand the motivation and inner logic of the main methodological approaches of open SDS.\nCritically evaluate the suitability of a specific technique, what it can offer, and how it can help answer questions of interest.\nApply several spatial analysis techniques and explain how to interpret the results in the process of turning data into information.\nWork independently using SDS tools to extract valuable insight when faced with a new dataset.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "A course on Spatial Data Science",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course assumes an understanding of geography and its key concepts (e.g. coordinate reference systems or the Modifiable Areal Unit Problem (Openshaw 1983)), at least basic familiarity with GIS (like file formats and basic spatial data manipulation) and a basic understanding of statistics (e.g. understanding the concept of regression), optimally with some spatial component (geographically weighted regression). While the course will briefly explain these topics, it will not cover the theory and statistics behind these concepts in detail.\nPrevious experience in programming or computer science is preferable. A positive attitude towards these topics is essential. In the absence of previous Python experience, the course can be taken, but an increased need for self-study in the first weeks of the semester should be expected.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "A course on Spatial Data Science",
    "section": "Course structure",
    "text": "Course structure\nThe material is planned for 12 weeks, with one session per week. Each session is divided into three parts - Concepts, Hands-on and Exercise, following the model proposed by Arribas-Bel (2019). Concepts have the form of a lecture covering conceptual aspects of the day’s topic, providing necessary theoretical background before digging into code. This part can be nicknamed “I do”. Hands-on contains documented code in a Jupyter notebook, executed in parallel by a lecturer, providing an additional explanation, and by students. Therefore, we have a part “We do”. Exercise is a set of tasks to be performed by students individually, with occasional guidance by the lecturer. So we finish the session with “You do”.\nFor enrolled students, the course will finish with a written assignment in the form of a computational essay. See the Assignment section for details.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#literature",
    "href": "index.html#literature",
    "title": "A course on Spatial Data Science",
    "section": "Literature",
    "text": "Literature\nThe course loosely follows the contents of the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023). The online version of the book is available under open access from geographicdata.science/book. Using the online version over the printed one is recommended, although this is entirely up to you.\n\n\n\n\n\n\nSpatial or geographic data science?\n\n\n\nSpatial data science and geographic data science are often treated as synonyms. In some interpretations, spatial is broader than geographic. In this case, we do spatial […] for […] geography, which is, in principle, geographic data science. We will treat both terms as equal within the context of this course.",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "A course on Spatial Data Science",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe course material is partially derived from A Course on Geographic Data Science by Arribas-Bel (2019) and follows its structure, main learning logic, and some hands-on materials. Thanks, Dani! A few sections are derived from other sources acknowledged at the bottom of respective pages. Thank you all!",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html",
    "href": "point_patterns/hands_on.html",
    "title": "Point pattern analysis",
    "section": "",
    "text": "When you need to deal with point data, you will likely be interested in the spatial patterns they form. For that, you can use point pattern analysis techniques. This session will walk you through some basic ways of approaching the analysis based primarily on geometries and their locations rather than variables associated with them.\nimport contextily\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pointpats\nimport seaborn as sns\nimport shapely\nfrom matplotlib import patches",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#data",
    "href": "point_patterns/hands_on.html#data",
    "title": "Point pattern analysis",
    "section": "Data",
    "text": "Data\nIn this session, you will be using data on pedestrian accidents in Brno that happened since 2010. Every accident is marked with point geometry and assigned a range of relevant variables you are free to explore by yourself. The dataset is released by Brno municipality under CC-BY 4.0 license. It has been preprocessed for the purpose of this course. If you want to see how the table was created, a notebook is available here.\nAs always, you can read data from a file posted online, so you do not need to download any dataset:\n\naccidents = gpd.read_file(\n    \"https://martinfleischmann.net/sds/point_patterns/data/brno_pedestrian_accidents.gpkg\"\n)\n1accidents.explore(\"rok\", tiles=\"CartoDB Positron\", cmap=\"magma_r\")\n\n\n1\n\n\"rok\" is a column with the year in which an accident occurred. The variables are in Czech.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\naccidents = gpd.read_file(\n    \"brno_pedestrian_accidents.gpkg\",\n)",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#visualisation",
    "href": "point_patterns/hands_on.html#visualisation",
    "title": "Point pattern analysis",
    "section": "Visualisation",
    "text": "Visualisation\nThe first step you will likely do is some form of visualisation. Either as an interactive map like the one above or using one of the more advanced methods. Most of the methods you will be using today do not necessarily depend on geometries but on their coordinates. Let’s start by extracting coordinates from geometries and assigning them as columns.\n\naccidents[[\"x\", \"y\"]] = accidents.get_coordinates()\naccidents.head(2)\n\n\n\n\n\n\n\n\nden\nrok\nmesic\nzavineni\nviditelnost\ncas\nmesic_t\ndoba\nden_v_tydnu\nalkohol\n...\nkategorie_chodce\nstav_chodce\nchovani_chodce\nsituace_nehody\nprvni_pomoc\nnasledky_chodce\nnazev\ngeometry\nx\ny\n\n\n\n\n0\n4\n2010\n4\nchodcem\nve dne, viditelnost nezhoršená vlivem povětrno...\n1340\nduben\nden\nčtvrtek\nNe\n...\nmuž\nnepozornost, roztržitost\nšpatný odhad vzdálenosti a rychlosti vozidla\npřecházení mimo přechod (2O a více metrů od př...\nnebylo třeba poskytnout\nbez zranění\nBrno-Starý Lískovec\nPOINT (-601201.157 -1164285.355)\n-601201.157\n-1164285.355\n\n\n1\n6\n2010\n6\nřidičem motorového vozidla\nve dne, viditelnost nezhoršená vlivem povětrno...\n1560\nčerven\nden\nsobota\nNe\n...\njiná skupina\nnezjištěno\nžádné z uvedených\njiná situace\nvozidlem RZP\nlehké zranění\nBrno-jih\nPOINT (-597104.108 -1165612.168)\n-597104.108\n-1165612.168\n\n\n\n\n2 rows × 40 columns\n\n\n\n\nScatter plots and distributions\nAny geographical plot of points is essentially a scatter plot based on their x and y coordinates. You can use this to your advantage and directly apply visualisation methods made for scatterplots. seaborn is able to give you a scatter plot with histograms per each axis.\n\n1axs = sns.jointplot(x=\"x\", y=\"y\", data=accidents, s=1)\n2contextily.add_basemap(\n    ax=axs.ax_joint, crs=accidents.crs, source=\"CartoDB Positron No Labels\"\n)\n3plt.xticks(rotation=90);\n\n\n1\n\njointplot takes accidents as a source DataFrame and plots column \"x\" on x-axis and column \"y\" on y-axis. s=1 sets the size of each point to one.\n\n2\n\nUse contextily to add a basemap for a bit of geographic context.\n\n3\n\nRotate labels of ticks on x-axis to avoid overlaps.\n\n\n\n\n\n\n\nEnhanced scatter plot\n\n\n\n\nThis plot is useful as it indicates that the point pattern has a tendency to be organised around a single centre (both histograms resemble normal distribution). From the map, you can see that the majority of incidents happened along main roads (as one would expect), but showing raw points on a map is not the best visualisation method. You can conclude that the pattern is not random (more on that later).\nShowing all the points on a map is not that terrible in this case as there’s not that many of them. However, even in this case, you face the issue of clusters of points being hidden behind a single dot and similar legibility drawbacks. You can overcome it it many ways, so let’s showcase two of them - binning and density estimation.\n\n\nHexagonal binning\nBinning is, in principle, a spatial join between the point pattern and an arbitrary grid overlaid on top. What you are interested is the number of points that fall into each grid cell. An example can be hexagonal binning, when the arbitrary grid is composed of hexagons. You could do it using geospatial operations in geopandas but since you have just points and all you now want is a plot, you can use hexbin() method from matplotlib.\n\n1f, ax = plt.subplots()\n2accidents.plot(ax=ax, markersize=0.05)\n3hb = ax.hexbin(\n    accidents[\"x\"],\n    accidents[\"y\"],\n    gridsize=25,\n    linewidths=0,\n    alpha=0.5,\n    cmap=\"magma_r\",\n4    mincnt=1,\n)\n# Add basemap\ncontextily.add_basemap(\n    ax=ax,\n    crs=accidents.crs,\n    source=\"CartoDB Positron No Labels\",\n)\n# Add colorbar\n5plt.colorbar(hb)\nplt.xticks(rotation=90);\n\n\n1\n\nCreate an empty matplotlib figure.\n\n2\n\nAdd points.\n\n3\n\nCreate a hexbin layer with 25 cells in x-direction.\n\n4\n\nShow only the cells with a minimal count of 1.\n\n5\n\nAdd colour bar legend to the side.\n\n\n\n\n\n\n\nPoint pattern transferred into a hexagonal grid\n\n\n\n\nHexbin gives you a better sense of the density of accidents across the city. There seems to be a large hotspot in the central areas and a few other places that seem to be more dangerous.\n\n\nKernel density estimation\nDensity can be estimated by binning, but that will always result in abrupt changes when two cells meet, like with a histogram. The other option is to use 2-dimensional kernel density estimation to generate contours of different (interpolated) levels of density. If you are interested in a plot and not geometry of contour lines, pointpats offers a handy function called plot_density().\n\nf, ax = plt.subplots()\naccidents.plot(ax=ax, markersize=0.05)\npointpats.plot_density(\n    accidents,\n    bandwidth=500,\n1    levels=25,\n    alpha=0.55,\n    cmap=\"magma_r\",\n    linewidths=1,\n    ax=ax,\n)\ncontextily.add_basemap(\n    ax=ax,\n    crs=accidents.crs,\n    source=\"CartoDB Positron No Labels\",\n)\n\n\n1\n\nn_levels specifies the number of contour lines to show.\n\n\n\n\n\n\n\nKernel density estimation of the point pattern\n\n\n\n\nThe intuition about the dominance of the city centre in the dataset is shown here very clearly. What have all of these visualisations in common is that they can be used to build intuition and a first insight into the pattern but as data scientists, you will probably need some numbers characterising your data.",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#centrography",
    "href": "point_patterns/hands_on.html#centrography",
    "title": "Point pattern analysis",
    "section": "Centrography",
    "text": "Centrography\nCentrography aims to provide a summary of the pattern. What is the general location of the pattern, how dispersed is it, or where are its limits. You can imagine it as what pandas.DataFrame.describe() returns but for the point pattern. Rey, Arribas-Bel, and Wolf (2023) cover assessments of tendency, dispersion and extent.\nThe tendency can be reflected by the centre of mass represented usually as the mean or median of point coordinates. PySAL has a module dedicated to point patterns called pointpats, that allows you to measure these easily, just based on an array of X and Y coordinates.\n\n1mean_center = pointpats.centrography.mean_center(accidents[[\"x\", \"y\"]])\nmed_center = pointpats.centrography.euclidean_median(accidents[[\"x\", \"y\"]])\n\n\n1\n\nPassing a subset with two columns qualifies as an array of coordinates.\n\n\n\n\nOn some occasions, you may want to take into account some external variables apart from the geographical location of each point. Simply because not every accident is as serious as the other. You can use weighted_mean_center to measure mean weighted by any arbitrary value. In the case of accidents, you may be interested in mean weighted by the number of injured people.\n\nweighted_mean = pointpats.centrography.weighted_mean_center(\n1    accidents[[\"x\", \"y\"]], accidents[\"lehce_zran_os\"]\n)\n\n\n1\n\nColumn \"lehce_zran_os\" represents the number of people with minor injuries resulting from each accident.\n\n\n\n\nWhat you get back for each of these are coordinates of a single point that is, to some degree, representative of the pattern.\n\nweighted_mean\n\narray([ -598188.52908271, -1160167.63045074])\n\n\nDispersion can be reflected by the standard deviation or, better, by the ellipse based on the standard deviations in both directions since you are dealing with two-dimensional data. The pointpats.centrography can also do that, giving you back the semi-major and semi-minor axes and their rotation.\n\nmajor, minor, rotation = pointpats.centrography.ellipse(accidents[[\"x\", \"y\"]])\n\nYou can then use the information in any way you like, but it is likely that you will want to plot the results of centrography on a map. The plot is a bit more complicated than those before, but it is just because there are more layers. However, do not feel the need to reproduce it.\n\n\nCode\nf, ax = plt.subplots()\naccidents.plot(ax=ax, markersize=0.05)\n\n1ax.scatter(*mean_center, color=\"k\", marker=\"o\", label=\"Mean Center\", alpha=0.8)\nax.scatter(*med_center, color=\"r\", marker=\"o\", label=\"Median Center\", alpha=0.8)\nax.scatter(\n    *weighted_mean,\n    color=\"pink\",\n    marker=\"o\",\n    label=\"Weighted Mean Center\",\n    alpha=0.8\n)\n\n2ellipse = patches.Ellipse(\n3    xy=mean_center,\n4    width=major * 2,\n    height=minor * 2,\n5    angle=np.rad2deg(rotation),\n    facecolor=\"none\",\n    edgecolor=\"red\",\n    linestyle=\"--\",\n    label=\"Std. Ellipse\",\n)\n6ax.add_patch(ellipse)\n7ax.legend(loc=\"upper left\")\n\ncontextily.add_basemap(\n    ax=ax,\n    crs=accidents.crs,\n    source=\"CartoDB Positron No Labels\",\n)\nplt.xticks(rotation=90);\n\n\n\n1\n\nPlot 3 scatters, each with one point only to mark centres of mass.\n\n2\n\nPlot ellipse using dedicated patch class from matplotlib.patches.\n\n3\n\nUse mean centre as the centre of the ellipse.\n\n4\n\nmajor represent half of the width, while minor, half of the height.\n\n5\n\nangle is required in degrees. You have radians now, so use np.rad2deg to convert.\n\n6\n\nAdd ellipse to the plot axis.\n\n7\n\nAdd legend to the upper left corner.\n\n\n\n\n\n\n\nResults of the centrographic analysis\n\n\n\n\nYou can see that in this specific case, all three ways of computing centre of the mass are within a short distance from each other, suggesting the dataset is pretty balanced. A similar conclusion can be made based on the shape of the ellipse, which nearly resembles a circle.\n\n\n\n\n\n\nExtent\n\n\n\nThe last part of centrography worth mentioning here are ways of characterisation of pattern’s extent. This is not covered in this material but feel free to jump directly to the relevant section of the Point Patterns chapter by Rey, Arribas-Bel, and Wolf (2023).\n\n\nAll centrography measures are crude simplifications of the pattern like summary statistics is a for non-spatial data. Let’s move towards some more profound methods of analysis.",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#randomness-and-clustering",
    "href": "point_patterns/hands_on.html#randomness-and-clustering",
    "title": "Point pattern analysis",
    "section": "Randomness and clustering",
    "text": "Randomness and clustering\nPoint patterns can be random but more often then not, they are not random. You main question when looking at the observations can be targetting specifically this distinction. Is, whatever I am looking at, following some underlying logic or is it random? The first method that helps answering such questions is quadrat statistic.\n\nQuadrat statistic\nImagine a grid overlaid over the map, similar to those you can use for visualisation. Each of them contains a certain number of points of the pattern. Quadrat statistics “examine the evenness of the distribution over cells using a \\(\\chi^2\\) statistical test common in the analysis of contingency tables.” (Rey, Arribas-Bel, and Wolf 2023). It compares the actual distribution of points in cells to that, that would be present if the points were allocated randomly.\npointpats allows you to compute the statistics using the QStatistic class, which takes the array of coordinates and some optional parameters specifying the details.\n\n1qstat = pointpats.QStatistic(accidents[[\"x\", \"y\"]].values, nx=6, ny=6)\n\n\n1\n\nnx and ny specify the number of cells along the x and y axis, respectively. The default is 3.\n\n\n\n\nThe class then offers a range of statistical values in a similar way you know from those in esda, you used last time. For example, the observed \\(\\chi^2\\) statistics can be accessed using .chi2.\n\nqstat.chi2\n\n11450.396617986164\n\n\nAnd it’s \\(p\\)-value, indicating significance using chi2_pvalue.\n\nqstat.chi2_pvalue\n\n0.0\n\n\nIn our case, it is clear that the points are not evenly distributed across the cells, hence the point pattern is unlikely to be random. A helpful visual illustration of how the quadrat overlay works is when you plot the grid on top of the underlying point pattern.\n\nax = qstat.plot()\ncontextily.add_basemap(\n    ax=ax,\n    crs=accidents.crs,\n    source=\"CartoDB Positron No Labels\",\n)\nplt.xticks(rotation=90);\n\n\n\n\nQuadrat statistic plot\n\n\n\n\nYou can see that there are cells with more than 800 observations, while some others have tens or even zeros.\n\n\nRipley’s functions\nA better option for the assessment of the randomness of a point pattern is a family of statistical methods called Ripley’s alphabet. These functions tend to work with the concept of nearest neighbours and aim to capture the co-location of points in the pattern.\nBefore working with any of those, let’s quickly look at the Quadrat statistic plot above. Some of the cells contain 0 points simply because the extent of the point pattern is smaller than the bounding box of the area. Since Ripley’s functions are based on the generation of random point patterns within the extent of the analysed one, a situation like this might unnecessarily skew the results. To minise this effect, you want to perform the test only within the area of the existing point pattern.\nWhile you can define such an extent in many way, a simple and often very suitable method is to define a convex hull of the point pattern. You can do that directly with geopandas.\n\n1convex_hull = accidents.unary_union.convex_hull\n\n\n1\n\nFirst, create a union of all points into a single MultiPoint and then get a convex hull of that.\n\n\n\n\n/tmp/ipykernel_5541/3394275759.py:1: DeprecationWarning: The 'unary_union' attribute is deprecated, use the 'union_all()' method instead.\n  convex_hull = accidents.unary_union.convex_hull\n\n\nThe resulting object is a shapely.Polygon. If you wrap it in a geopandas.GeoSeries, you can easily plot it:\n\nax = accidents.plot(markersize=0.05)\ngpd.GeoSeries([convex_hull]).plot(\n1    ax=ax, facecolor=\"none\", edgecolor=\"k\", linestyle=\"--\"\n)\nplt.xticks(rotation=90);\n\n\n1\n\nTo show just the boundary of a polygon, you can either pass facecolor=\"none\" or extract the .boundary and plot that.\n\n\n\n\n\n\n\nConvex hull around the point pattern\n\n\n\n\nThis allows us to limit the test to the area where something already happens.\n\n\\(G\\) function\nRipley’s \\(G\\) is an iterative algorithm. It measures how many points have the nearest point within a threshold distance while repeatedly increasing such a threshold. A series of thresholds and counts then results in a specific curve that is compared to the curve coming from the purely random point pattern.\npointpats allows you to compute Ripley’s \\(G\\) using the g_test function.\n\ng_test = pointpats.distance_statistics.g_test(\n    accidents[[\"x\", \"y\"]].values,\n1    support=200,\n2    keep_simulations=True,\n3    hull=convex_hull,\n4    n_simulations=99,\n)\n\n\n1\n\nPractically, the number of bins of the distance between neighbours. More ensures better precision of resulting curves.\n\n2\n\nKeep simulated data so you can plot them later.\n\n3\n\nLimit the test only to the convex_hull.\n\n4\n\nNumber of simulations used as a baseline.\n\n\n\n\nThe intuition behind the statistic can be built based on the plot of the \\(G\\) values per distance threshold, comparing the observed results with those based on simulated random point patterns.\n\nf, ax = plt.subplots()\n1ax.plot(g_test.support, g_test.simulations.T, color=\"lightgrey\")\n2ax.plot(\n    g_test.support,\n    np.median(g_test.simulations, axis=0),\n    color=\"k\",\n    label=\"median simulation\",\n    linestyle=\"--\",\n)\n3ax.plot(g_test.support, g_test.statistic, label=\"observed\", color=\"red\")\n4ax.set_xlabel(\"distance [m]\")\nax.set_ylabel(\n    \"ratio of nearest neighbor\\n\"\n    \"distances shorter than distance\"\n)\nax.legend()\n5ax.set_xlim(0, 500);\n\n\n1\n\nPlot all simulations as light grey lines. They will merge into a thicker one, indicating a range of possible random solutions.\n\n2\n\nPlot the median of simulations on top.\n\n3\n\nPlot the observed \\(G\\) statistic.\n\n4\n\nLabel the x-axis and y-axis.\n\n5\n\nLimit plot to show only distances between 0 and 500m. The rest is not interesting.\n\n\n\n\n\n\n\n\n\n\nFigure 1: Ripley’s \\(G(d)\\) function\n\n\n\n\n\nThe x-axis shows the distance threshold, while the y-axis shows the ratio of points whose nearest neighbour is closer than the distance. This curve resembles a sigmoid function in its shape when the point pattern is random, as illustrated by the simulations. For non-random patterns, the ratio tends to grow much quicker as points are more clustered in space, making the nearest neighbours closer than the random ones would be. Since we see this distinction clearly, we can assume that the point pattern of pedestrian accidents is spatially clustered. The available \\(p\\)-value can also back the significance of this observation.\n\nnp.mean(g_test.pvalue)\n\n0.0046500000000000005\n\n\n\n\n\\(F\\) function\nAnother part of the Ripley’s alphabet is the \\(F\\) function. It is similar as \\(G\\) in its iterative nature based on a distance threshold but instead of focusing on distances between points within a pattern, if looks at the distance to points from locations in empty space. It captures how many points can be reached within a distance from a random point pattern generated within the same extent (that is why passing the hull is essential).\npointpats allows you to compute Ripley’s \\(F\\) using the f_test function.\n\nf_test = pointpats.distance_statistics.f_test(\n    accidents[[\"x\", \"y\"]].values,\n    support=200,\n    keep_simulations=True,\n    hull=convex_hull,\n    n_simulations=99,\n)\n\nAgain, it is easier to understand the function from the plot. Patterns clustered in space tend to have larger empty spaces between their clusters, leading to a slower increase of \\(F\\) than what would happen for a random point pattern. That is precisely what you can see in the figure below.\n\nf, ax = plt.subplots()\nax.plot(f_test.support, f_test.simulations.T, color=\"lightgrey\")\nax.plot(\n    f_test.support,\n    np.median(f_test.simulations, axis=0),\n    color=\"k\",\n    label=\"median simulation\",\n    linestyle=\"--\",\n)\nax.plot(f_test.support, f_test.statistic, label=\"observed\", color=\"red\")\nax.set_xlabel(\"distance\")\nax.set_ylabel(\"ratio of points within a distance threshold\")\nax.legend()\nax.set_xlim(0, 500);\n\n\n\n\n\n\n\nFigure 2: Ripley’s \\(F(d)\\) function\n\n\n\n\n\nThe observed curve of the \\(F\\) function is clearly below the simulated, meaning that it increases more slowly than it should if it were a random pattern. You can conclude the same as above: the pattern is clustered. For completeness, you can check the \\(p\\)-value.\n\nnp.mean(f_test.pvalue)\n\n0.012950000000000001\n\n\n\n\n\n\n\n\nAdvanced topic\n\n\n\nThe part below is optional and may not be covered in the class. It contains a slightly more advanced topic of space-time interaction, which is another type of analysis you may want to do with a point pattern that has a time dimension. Feel free to skip it if you don’t feel it is for you.",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#space-time-interactions",
    "href": "point_patterns/hands_on.html#space-time-interactions",
    "title": "Point pattern analysis",
    "section": "Space-time interactions",
    "text": "Space-time interactions\nYou have now tested that the point pattern is clustered in space, i.e., that there is a spatial interaction between the points. If you have your points allocated in space and time, you can extend this by testing spatio-temporal interaction.\nYou will need to derive time coordinates from the three columns containing the date of the incident.\n\n1timestamp = pd.to_datetime(\n    accidents[[\"rok\", \"mesic\", \"den\"]].rename(\n        columns={\"rok\": \"year\", \"mesic\": \"month\", \"den\": \"day\"}\n    )\n)\n2days_since_first = (timestamp - timestamp.min()).dt.days\ndays_since_first.head()\n\n\n1\n\npandas can create a datetime object based on columns named \"year\", \"month\" and \"day\".\n\n2\n\nYou can then do time-based algebra on datetime columns and use the .dt accessor to retrieve the number of days since the first observations as integers.\n\n\n\n\n0     93\n1    156\n2    156\n3    489\n4    609\ndtype: int64\n\n\nThe array of time coordinates should look like an array of spatial coordinates does, just with one column:\n\naccidents[[\"x\", \"y\"]].values\n\narray([[ -601201.157, -1164285.355],\n       [ -597104.108, -1165612.168],\n       [ -597104.108, -1165612.168],\n       ...,\n       [ -595512.931, -1159511.714],\n       [ -599054.018, -1155325.214],\n       [ -593042.542, -1163416.536]])\n\n\nGetting days_since_first.values results in an incorrect shape (check it for yourself), so you need to use numpy to reshape it to an expected form.\n\n1time_coords = days_since_first.values.reshape(-1, 1)\ntime_coords\n\n\n1\n\nReshape the array from its current shape (n,) (1-dimensional array) to (n, 1) (2-dimensional array with 1 column).\n\n\n\n\narray([[  93],\n       [ 156],\n       [ 156],\n       ...,\n       [4356],\n       [4323],\n       [2772]])\n\n\nWith the time coordinates ready, you can use the Knox test for spatiotemporal interaction.\n\nknox = pointpats.Knox(accidents[[\"x\", \"y\"]], time_coords, delta=500, tau=100)\n\nThe test takes spatial coordinates, time coordinates and two parameters. delta is a threshold for proximity in space (use 500m), while tau is a threshold for proximity in time (use 100 days). Knox test then counts a number of events that are closer than delta in space and tau in time. This count is available as .statistic_.\n\nknox.statistic_\n\n3860\n\n\nFinally, look at the pseudo-significance of this value, calculated by permuting the timestamps and re-running the statistics. In this case, the results indicate there is likely some space-time interaction between the events.\n\nknox.p_sim\n\n0.01\n\n\nHowever, be careful. Combining multiple tests (like you did with Ripley’s alphabet and Quadrat statistic) before making any conclusions is always recommended.\n\n\n\n\n\n\nAdditional reading\n\n\n\nHave a look at the chapter Point Pattern Analysis from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023) for more details and some other extensions.",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/hands_on.html#acknowledgements",
    "href": "point_patterns/hands_on.html#acknowledgements",
    "title": "Point pattern analysis",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section loosely follows the Point Pattern Analysis chapter from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).",
    "crumbs": [
      "Point patterns",
      "Point pattern analysis"
    ]
  },
  {
    "objectID": "point_patterns/concepts.html",
    "href": "point_patterns/concepts.html",
    "title": "I need more points",
    "section": "",
    "text": "Slides from the talk about the concept of point patterns and basics of their analytics.",
    "crumbs": [
      "Point patterns",
      "I need more points"
    ]
  },
  {
    "objectID": "point_patterns/concepts.html#acknowledgements",
    "href": "point_patterns/concepts.html#acknowledgements",
    "title": "I need more points",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0.",
    "crumbs": [
      "Point patterns",
      "I need more points"
    ]
  },
  {
    "objectID": "classification/exercise.html",
    "href": "classification/exercise.html",
    "title": "Predict future",
    "section": "",
    "text": "In this part, you will not start anything new but will continue working with the data from Prague from the previous section and get a bit deeper into the problem. Not everything has been covered in class, so consult the documentation, Google, or your favourite LLM.",
    "crumbs": [
      "Machine learning",
      "Predict future"
    ]
  },
  {
    "objectID": "classification/exercise.html#continue-with-classficiation",
    "href": "classification/exercise.html#continue-with-classficiation",
    "title": "Predict future",
    "section": "Continue with classficiation",
    "text": "Continue with classficiation\nLet’s try to explore the classification problem a bit further.\n\nTry different combinations of independent variables.\n\nDoes it make sense to combine proximity variables with spatial heterogeneity? Test that.\nContrary to what you may expect, removing some variables with low importance helps the performance. Is this the case in our situation?\nFind the best combination of variables. How far can you push accuracy?\n\nTest other ML models.\n\nCheck what happens when you use different models than random forest. Compare the same input using different models, like HistGradientBoostingClassifier, DecisionTreeClassifier, or AdaBoostClassifier. Which one is the best when using the default hyperparameters?\n\nPick your favourite model and find high and low prediction certainty clusters.",
    "crumbs": [
      "Machine learning",
      "Predict future"
    ]
  },
  {
    "objectID": "classification/exercise.html#explore-regression",
    "href": "classification/exercise.html#explore-regression",
    "title": "Predict future",
    "section": "Explore regression",
    "text": "Explore regression\nTry using the techniques of spatial augmentation on the regression model predicting price outlined at the end of the last section. Combine all you think may help. What is the best \\(R^2\\) you can get? You can even optionally compare the result with the performance of Geographically Weighted Regression on the same problem (but do not try to fit it on the full dataset :)).",
    "crumbs": [
      "Machine learning",
      "Predict future"
    ]
  },
  {
    "objectID": "classification/exercise.html#effect-of-hyperparameters-advanced",
    "href": "classification/exercise.html#effect-of-hyperparameters-advanced",
    "title": "Predict future",
    "section": "Effect of hyperparameters (advanced)",
    "text": "Effect of hyperparameters (advanced)\nYou’ve been using the default model parameters. Can you figure out a way of fine-tuning them? Have a look at this resource and Google and try to fine-tune one of the models you’ve worked with. Does the change of parameters like the number of estimators affect the result in any way? How important do you think it is?",
    "crumbs": [
      "Machine learning",
      "Predict future"
    ]
  },
  {
    "objectID": "classification/slides.html#models",
    "href": "classification/slides.html#models",
    "title": "Is there space in machine learning?",
    "section": "Models",
    "text": "Models\nLinear regression\nLogistic regression\nDecision trees\nRandom forest\nGradient-boosted trees\nNeural networks"
  },
  {
    "objectID": "classification/slides.html#workflow",
    "href": "classification/slides.html#workflow",
    "title": "Is there space in machine learning?",
    "section": "Workflow",
    "text": "Workflow\nSplit to train and test parts\nFit the model\nEvaluate\n(data standardisation)\nHyper-parameter tuning\nData augmentation"
  },
  {
    "objectID": "classification/slides.html#a-visual-explanation",
    "href": "classification/slides.html#a-visual-explanation",
    "title": "Is there space in machine learning?",
    "section": "A visual explanation",
    "text": "A visual explanation\nBy R2D3 (Stephanie Yee and Tony Chu)"
  },
  {
    "objectID": "classification/slides.html#evaluation-methods",
    "href": "classification/slides.html#evaluation-methods",
    "title": "Is there space in machine learning?",
    "section": "Evaluation methods",
    "text": "Evaluation methods\nClassification\nConfusion matrix"
  },
  {
    "objectID": "classification/slides.html#evaluation-methods-1",
    "href": "classification/slides.html#evaluation-methods-1",
    "title": "Is there space in machine learning?",
    "section": "Evaluation methods",
    "text": "Evaluation methods\nClassification\nConfusion matrix\nAccuracy\nCohen’s kappa score\nPrecision\nRecall\n…"
  },
  {
    "objectID": "classification/slides.html#evaluation-methods-2",
    "href": "classification/slides.html#evaluation-methods-2",
    "title": "Is there space in machine learning?",
    "section": "Evaluation methods",
    "text": "Evaluation methods\nRegression\nResiduals\n\\(R^2\\)\nMean absolute error\nMean squared error\n…"
  }
]