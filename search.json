[
  {
    "objectID": "chapter_11/exercise.html",
    "href": "chapter_11/exercise.html",
    "title": "Fit that model",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_11/hands_on.html",
    "href": "chapter_11/hands_on.html",
    "title": "Regression and geography",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_08/concepts.html",
    "href": "chapter_08/concepts.html",
    "title": "Data as a grid",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nParts of the chapter Spatial Data dealing with raster data from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_09/exercise.html",
    "href": "chapter_09/exercise.html",
    "title": "Locating inequality",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_09/hands_on.html",
    "href": "chapter_09/hands_on.html",
    "title": "Spatial Inequality Dynamics",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_06/concepts.html",
    "href": "chapter_06/concepts.html",
    "title": "I need more points",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Point Pattern Analysis from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_05/exercise.html",
    "href": "chapter_05/exercise.html",
    "title": "Does it correlate?",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_05/hands_on.html",
    "href": "chapter_05/hands_on.html",
    "title": "Spatial autocorrelation and other ESDAs",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_02/concepts.html",
    "href": "chapter_02/concepts.html",
    "title": "Open tools and open mindset",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Computational Tools for Geographic Data Science from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_04/exercise.html",
    "href": "chapter_04/exercise.html",
    "title": "Graph here, graph there",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_04/hands_on.html",
    "href": "chapter_04/hands_on.html",
    "title": "Spatial weights in PySAL",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nIn this session, you will be learning the ins and outs of one of the key pieces in spatial analysis: spatial weights matrices. These are structured sets of numbers that formalise geographical relationships between the observations in a dataset. Essentially, a spatial weights matrix of a given geography is a positive definite matrix of dimensions \\(N\\) by \\(N\\), where \\(N\\) is the total number of observations:\n\\[\nW = \\left(\\begin{array}{cccc}\n0 & w_{12} & \\dots & w_{1N} \\\\\nw_{21} & \\ddots & w_{ij} & \\vdots \\\\\n\\vdots & w_{ji} & 0 & \\vdots \\\\\nw_{N1} & \\dots & \\dots & 0\n\\end{array} \\right)\n\\]\nwhere each cell \\(w_{ij}\\) contains a value that represents the degree of spatial contact or interaction between observations \\(i\\) and \\(j\\). A fundamental concept in this context is that of neighbour and neighbourhood. By convention, elements in the diagonal (\\(w_{ii}\\)) are set to zero. A neighbour of a given observation \\(i\\) is another observation with which \\(i\\) has some degree of connection. In terms of \\(W\\), \\(i\\) and \\(j\\) are thus neighbors if \\(w_{ij} &gt; 0\\). Following this logic, the neighbourhood of \\(i\\) will be the set of observations in the system with which it has a certain connection or those observations with a weight greater than zero.\nThere are several ways to create such matrices and many more to transform them so they contain an accurate representation that aligns with the way you understand spatial interactions between the elements of a system. This session will introduce the most commonly used ones and show how to compute them with PySAL.\n1import matplotlib.pyplot as plt\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom libpysal import graph\n\n\n1\n\nA common standard is to do all the imports on top of your notebook."
  },
  {
    "objectID": "chapter_04/hands_on.html#data",
    "href": "chapter_04/hands_on.html#data",
    "title": "Spatial weights in PySAL",
    "section": "Data",
    "text": "Data\nFor this tutorial, you will use a dataset of Basic Settlement Units (ZSJ) in Prague for 2021. The table is available as part of this course, so it can be accessed remotely through the web. If you want to see how the table was created, a notebook is available here.\nTo make things easier, you will read data from a file posted online so, for now, you do not need to download any dataset:\n\nprague = gpd.read_file(\n    \"data/zsj_prague_2021.gpkg\"\n)\n1prague = prague.set_index(\"NAZ_ZSJ\")\nprague.explore()\n\n\n1\n\nUse the name of each observation as an index. It will help you matching linking them to the weights matrix.\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "chapter_04/hands_on.html#building-spatial-weights-in-pysal",
    "href": "chapter_04/hands_on.html#building-spatial-weights-in-pysal",
    "title": "Spatial weights in PySAL",
    "section": "Building spatial weights in PySAL",
    "text": "Building spatial weights in PySAL\n\nContiguity\nContiguity weights matrices define spatial connections through the existence of shared boundaries. This makes it directly suitable to use with polygons: if two polygons share boundaries to some degree, they will be labelled as neighbours under these kinds of weights. Exactly how much they need to share is what differentiates the two approaches we will learn: queen and rook.\n\nQueen\nUnder the queen criteria, two observations only need to share a vertex (a single point) of their boundaries to be considered neighbours. Constructing a weights matrix under these principles can be done by running:\n\n1queen = graph.Graph.build_contiguity(prague, rook=False)\n\n\n1\n\nThe main class that represents a weights matrix is Graph. rook=False specifies to use queen contiguity, while rook=True would create rook contiguity.\n\n\n\n\nThe command above creates an object queen of the class Graph. This is the format in which spatial weights matrices are stored in PySAL. By default, the weights builder (Graph.build_contiguity() will use the index of the table, which is useful so you can keep everything in line easily.\n\n\n\n\n\n\nNew Graph and old W\n\n\n\nThe graph module of libpysal is an implementation of spatial weights matrices released in September 2023. In the older resources, you will find the weights module and the W class instead. Graph will eventually replace W. Their API is similar, but there are some differences. Pay attention to the documentation when porting code from weights-based resources to graph-based implementation. Or use Graph.to_W() and Graph.from_W() to convert one to the other.\n\n\nA Graph object can be queried to find out about the contiguity relations it contains. For example, if you would like to know who is a neighbour of observation Albertov:\n\nqueen['Albertov']\n\nneighbor\nVyšehrad                  1\nŠtěpánský obvod-východ    1\nVodičkova                 1\nŠtěpánský obvod-západ     1\nPodskalí                  1\nZderaz                    1\nVojtěšský obvod           1\nNuselské údolí            1\nFolimanka-západ           1\nName: weight, dtype: int64\n\n\nThis returns a pandas.Series containing each neighbour’s ID codes as an index, with the weights assigned as values. Since you are looking at a raw queen contiguity matrix, every neighbour gets a weight of one. If you want to access the weight of a specific neighbour, Zderaz for example, you can do recursive querying:\n\nqueen['Albertov']['Zderaz']\n\n1\n\n\nGraph objects also have a direct way to provide a list of all the neighbors or their weights for a given observation. This is thanks to the get_neighbors and get_weights methods:\n\nqueen.get_neighbors('Albertov')\n\narray(['Vyšehrad', 'Štěpánský obvod-východ', 'Vodičkova',\n       'Štěpánský obvod-západ', 'Podskalí', 'Zderaz', 'Vojtěšský obvod',\n       'Nuselské údolí', 'Folimanka-západ'], dtype=object)\n\n\n\nqueen.get_weights('Albertov')\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n\nOnce created, Graph objects can provide much information about the matrix beyond the basic attributes one would expect. You have direct access to the number of neighbours each observation has via the attribute cardinalities. For example, to find out how many neighbours observation E01006524 has:\n\nqueen.cardinalities['Albertov']\n\n9\n\n\nSince cardinalities is a Series, you can use all of the pandas functionality you know:\n\nqueen.cardinalities.head()\n\nfocal\nAlbertov             9\nAloisov             12\nAnděl-Na Skalce      8\nAntala Staška        8\nArbesovo náměstí     6\nName: cardinalities, dtype: int64\n\n\nYou can easily compute the mean number of neighbours.\n\nqueen.cardinalities.mean()\n\n5.949632738719832\n\n\nOr learn about the maximum number of neighbours a single geometry has.\n\nqueen.cardinalities.max()\n\n15\n\n\nThis also allows access to quick plotting, which comes in very handy in getting an overview of the size of neighbourhoods in general:\n\nsns.displot(queen.cardinalities, bins=14, kde=True)\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\nThe figure above shows how most observations have around five neighbours, but there is some variation around it. The distribution also seems to follow nearly a symmetric form, where deviations from the average occur both in higher and lower values almost evenly, with a minor tail towards higher values.\nSome additional information about the spatial relationships contained in the matrix is also easily available from a Graph object. You can ask about the number of observations (geometries) encoded in the graph:\n\nqueen.n\n\n953\n\n\nOr learn which geometries are isolates, the observations with no neighbours (think about islands).\n\n1queen.isolates\n\n\n1\n\nIn this case, this Series is empty since there are no isolates present.\n\n\n\n\nIndex([], dtype='object', name='focal')\n\n\nSpatial weight matrices can be explored visually in other ways. For example, you can pick an observation and visualise it in the context of its neighbourhood. The following plot does exactly that by zooming into the surroundings of LSOA Albertov and displaying its polygon as well as those of its neighbours:\n\nm = prague.loc[queen.get_neighbors('Albertov')].explore(color=\"#25b497\")\nprague.loc[['Albertov']].explore(m=m, color=\"#fa94a5\")\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nRook\nRook contiguity is similar to and, in many ways, superseded by queen contiguity. However, since it sometimes comes up in the literature, it is useful to know about it. The main idea is the same: two observations are neighbours if they share some of their boundary lines. However, in the rook case, it is not enough to share only one point. It needs to be at least a segment of their boundary. In most applied cases, these differences usually boil down to how the geocoding was done, but in some cases, such as when you use raster data or grids, this approach can differ more substantively, and it thus makes more sense.\nFrom a technical point of view, constructing a rook matrix is very similar:\n\nrook = graph.Graph.build_contiguity(prague, rook=True)\n\nThe output is of the same type as before, a W object that can be queried and used in very much the same way as any other one.\n\n\n\nDistance\nDistance-based matrices assign the weight to each pair of observations as a function of how far from each other they are. How this is translated into an actual weight varies across types and variants, but they all share that the ultimate reason why two observations are assigned some weight is due to the distance between them.\n\nK-Nearest Neighbors\nOne approach to define weights is to take the distances between a given observation and the rest of the set, rank them, and consider as neighbours the \\(k\\) closest ones. That is exactly what the \\(k\\)-nearest neighbours (KNN) criterium does.\nTo calculate KNN weights, you can use a similar function as before and derive them from a GeoDataFrame:\n\n1prague[\"centroid\"] = prague.centroid\n2prague = prague.set_geometry(\"centroid\")\nknn5 = graph.Graph.build_knn(prague, k=5)\n\n\n1\n\nDistance-based methods usually work only with points (for performance reasons). Create a centroid representation of each geometry.\n\n2\n\nAssign it as an active geometry column.\n\n\n\n\nNote how you need to specify the number of nearest neighbours you want to consider with the argument k. Since it is a polygon GeoDataFrame that you are passing, you need to compute the centroids to derive distances between observations. Alternatively, you can provide the points in the form of an array, skipping this way the dependency of a file on disk:\n\npts = pd.DataFrame(\n1    {\"X\": prague.geometry.x, \"Y\": prague.geometry.y}\n2).values\nknn5_from_pts = graph.Graph.build_knn(pts, k=5)\n\n\n1\n\nIf your GeoSeries contains Point geometries, you can access their coordinates using GeoSeries.x and GeoSeries.y.\n\n2\n\n.values returns only an array of values without the pandas index. It is the underlying data structure coming from the numpy package. You will learn more about numpy in due course.\n\n\n\n\n\n\nDistance band\nAnother approach to building distance-based spatial weights matrices is to draw a circle of certain radius and consider neighbour every observation that falls within the circle. The technique has two main variations: binary and continuous. In the former one, every neighbour is given a weight of one, while in the second one, the weights can be further tweaked by the distance to the observation of interest.\nTo compute binary distance matrices in PySAL, you can use the following command:\n\ndist1kmB = graph.Graph.build_distance_band(prague, 1000)\n\nThis creates a binary matrix that considers neighbors of an observation every polygon whose centroid is closer than 1,000 metres (1 km) to the centroid of such observation. Check, for example, the neighbourhood of polygon Albertov:\n\ndist1kmB['Albertov']\n\nneighbor\nNa bělidle-nábřeží            1\nZderaz                        1\nPodskalí                      1\nU Čelakovského sadů           1\nFolimanka-východ              1\nVyšehrad                      1\nVodičkova                     1\nLondýnská                     1\nŠtěpánský obvod-východ        1\nNad muzeem                    1\nFolimanka-západ               1\nV Čelakovského sadech         1\nSmíchovský pivovar-nábřeží    1\nNad Nuselským údolím          1\nNuselské údolí                1\nŠtěpánský obvod-západ         1\nName: weight, dtype: int64\n\n\nNote that the units in which you specify the distance directly depend on the CRS in which the spatial data are projected, and this has nothing to do with the weights building but it can affect it significantly. Recall how you can check the CRS of a GeoDataFrame:\n\nprague.crs\n\n&lt;Projected CRS: EPSG:5514&gt;\nName: S-JTSK / Krovak East North\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: Czechia; Slovakia.\n- bounds: (12.09, 47.73, 22.56, 51.06)\nCoordinate Operation:\n- name: Krovak East North (Greenwich)\n- method: Krovak (North Orientated)\nDatum: System of the Unified Trigonometrical Cadastral Network\n- Ellipsoid: Bessel 1841\n- Prime Meridian: Greenwich\n\n\nIn this case, you can see the unit is expressed in metres (m). Hence you set the threshold to 1,000 for a circle of 1km radius.\nAn extension of the weights above introduces further detail by assigning different weights to different neighbours within the radius circle based on how far they are from the observation of interest. For example, you could think of assigning the inverse of the distance between observations \\(i\\) and \\(j\\) as \\(w_{ij}\\). This can be computed with the following command:\n\ndist1kmC = graph.Graph.build_distance_band(prague, 1000, binary=False)\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/libpysal/graph/base.py:564: RuntimeWarning: divide by zero encountered in power\n  kernel=lambda distances, alpha: np.power(distances, alpha),\n\n\nIn dist1kmC, every observation within the 1km circle is assigned a weight equal to the inverse distance between the two:\n\\[\nw_{ij} = \\dfrac{1}{d_{ij}}\n\\]\nThis way, the further apart \\(i\\) and \\(j\\) are from each other, the smaller the weight \\(w_{ij}\\) will be.\nContrast the binary neighbourhood with the continuous one for Albertov:\n\ndist1kmC['Albertov']\n\nneighbor\nNa bělidle-nábřeží            0.001158\nZderaz                        0.001436\nPodskalí                      0.001803\nU Čelakovského sadů           0.001264\nFolimanka-východ              0.001082\nVyšehrad                      0.001247\nVodičkova                     0.001055\nLondýnská                     0.001162\nŠtěpánský obvod-východ        0.002001\nNad muzeem                    0.001084\nFolimanka-západ               0.001636\nV Čelakovského sadech         0.001121\nSmíchovský pivovar-nábřeží    0.001000\nNad Nuselským údolím          0.001183\nNuselské údolí                0.001281\nŠtěpánský obvod-západ         0.002192\nName: weight, dtype: float64\n\n\nFollowing this logic of more detailed weights through distance, there is a temptation to take it further and consider everyone else in the dataset as a neighbor whose weight will then get modulated by the distance effect shown above. However, although conceptually correct, this approach is not always the most computationally or practical one. Because of the nature of spatial weights matrices, particularly because of the fact their size is \\(N\\) by \\(N\\), they can grow substantially large. A way to cope with this problem is by making sure they remain fairly sparse (with many zeros). Sparsity is typically ensured in the case of contiguity or KNN by construction but, with inverse distance, it needs to be imposed as, otherwise, the matrix could be potentially entirely dense (no zero values other than the diagonal). In practical terms, what is usually done is to impose a distance threshold beyond which no weight is assigned and interaction is assumed to be non-existent. Beyond being computationally feasible and scalable, results from this approach usually do not differ much from a fully “dense” one as the additional information that is included from further observations is almost ignored due to the small weight they receive. In this context, a commonly used threshold, although not always best, is that which makes every observation to have at least one neighbor.\n\n\n\n\n\n\nComputing threshold\n\n\n\nSuch a threshold can be calculated using the min_threshold_distance function from libpysal.weights module:\n\nfrom libpysal import weights\n\nmin_thr = weights.min_threshold_distance(pts)\nmin_thr\n\n1920.0404365049942\n\n\nWhich can then be used to calculate an inverse distance weights matrix:\nmin_dist = graph.Graph.build_distance_band(prague, min_thr, binary=False)\n\n\n\n\n\nBlock weights\nBlock weights connect every observation in a dataset that belongs to the same category in a list provided ex-ante. Usually, this list will have some relation to geography and the location of the observations but, technically speaking, all one needs to create block weights is a list of memberships. In this class of weights, neighbouring observations, those in the same group, are assigned a weight of one, and the rest receive a weight of zero.\nIn this example, you will build a spatial weights matrix that connects every LSOA with all the other ones in the same MSOA. See how the MSOA code is expressed for every LSOA:\n\nprague.head()\n\n\n\n\n\n\n\n\nNAZ_KU\nn_people\ngeometry\ncentroid\n\n\nNAZ_ZSJ\n\n\n\n\n\n\n\n\nBěchovice\nBěchovice\n1563.0\nMULTIPOLYGON (((-728432.898 -1045340.836, -728...\nPOINT (-728983.854 -1045559.217)\n\n\nNová Dubeč\nBěchovice\n662.0\nMULTIPOLYGON (((-729878.896 -1045449.784, -729...\nPOINT (-730222.277 -1045630.462)\n\n\nBenice\nBenice\n728.0\nMULTIPOLYGON (((-730788.190 -1052695.343, -730...\nPOINT (-730966.612 -1053057.390)\n\n\nBřeziněves\nBřeziněves\n1808.0\nMULTIPOLYGON (((-736983.473 -1034315.571, -737...\nPOINT (-737232.635 -1034903.671)\n\n\nDolní Černošice\nLipence\n150.0\nMULTIPOLYGON (((-748601.583 -1054231.394, -748...\nPOINT (-749780.041 -1055689.764)\n\n\n\n\n\n\n\nTo build a block spatial weights matrix that connects as neighbours all the ZSJ in the same KU, you only require the mapping of codes. Using PySAL, this is a one-line task:\n\nblock = graph.Graph.build_block(prague['NAZ_KU'])\n\nIf you query for the neighbors of observation by its name, it will work as usual:\n\nblock['Albertov']\n\nneighbor\nPetrský obvod                 1.0\nMasarykovo nádraží            1.0\nJindřišský obvod              1.0\nVodičkova                     1.0\nVojtěšský obvod               1.0\nŠtěpánský obvod-západ         1.0\nPodskalí                      1.0\nZderaz                        1.0\nAutobusové nádraží Florenc    1.0\nU Čelakovského sadů           1.0\nŠtěpánský obvod-východ        1.0\nV Čelakovského sadech         1.0\nMasarykovo nádraží-východ     1.0\nName: weight, dtype: float64"
  },
  {
    "objectID": "chapter_04/hands_on.html#standardizing-graph-relationships",
    "href": "chapter_04/hands_on.html#standardizing-graph-relationships",
    "title": "Spatial weights in PySAL",
    "section": "Standardizing Graph relationships",
    "text": "Standardizing Graph relationships\nIn the context of many spatial analysis techniques, a spatial weights matrix with raw values (e.g. ones and zeros for the binary case) is not always the best-suiting one for analysis and some sort of transformation is required. This implies modifying each weight so they conform to certain rules. PySAL has transformations baked right into the Graph object, so it is possible to check the state of an object as well as to modify it.\nConsider the original queen weights for observation Albertov:\n\nqueen['Albertov']\n\nneighbor\nVyšehrad                  1\nŠtěpánský obvod-východ    1\nVodičkova                 1\nŠtěpánský obvod-západ     1\nPodskalí                  1\nZderaz                    1\nVojtěšský obvod           1\nNuselské údolí            1\nFolimanka-západ           1\nName: weight, dtype: int64\n\n\nSince it is contiguity, every neighbour gets one, the rest zero weight. You can check if the object queen has been transformed or not by calling the property .transformation:\n\nqueen.transformation\n\n'O'\n\n\nwhere \"O\" stands for “original”, so no transformations have been applied yet. If you want to apply a row-based transformation so every row of the matrix sums up to one, you use the .transform() method as follows:\n\n1row_wise_queen = queen.transform(\"R\")\n\n\n1\n\n.transform() returns a new Graph with transformed weights. \"R\" stands for row-wise transformation.\n\n\n\n\nNow you can check the weights of the same observation as above and find they have been modified:\n\nrow_wise_queen['Albertov']\n\nneighbor\nVyšehrad                  0.111111\nŠtěpánský obvod-východ    0.111111\nVodičkova                 0.111111\nŠtěpánský obvod-západ     0.111111\nPodskalí                  0.111111\nZderaz                    0.111111\nVojtěšský obvod           0.111111\nNuselské údolí            0.111111\nFolimanka-západ           0.111111\nName: weight, dtype: float64\n\n\nThe sum of weights for all the neighbours is one:\n\nrow_wise_queen['Albertov'].sum()\n\n1.0\n\n\nPySAL currently supports the following transformations:\n\nO: original, returning the object to the initial state.\nB: binary, with every neighbour having assigned a weight of one.\nR: row, with all the neighbours of a given observation adding up to one.\nV: variance stabilising, with the sum of all the weights being constrained to the number of observations.\nD: double, with all the weights across all observations adding up to one."
  },
  {
    "objectID": "chapter_04/hands_on.html#reading-and-writing-spatial-weights-in-pysal",
    "href": "chapter_04/hands_on.html#reading-and-writing-spatial-weights-in-pysal",
    "title": "Spatial weights in PySAL",
    "section": "Reading and Writing spatial weights in PySAL",
    "text": "Reading and Writing spatial weights in PySAL\nSometimes, suppose a dataset is very detailed or large. In that case, it can be costly to build the spatial weights matrix of a given geography, and, despite the optimisations in the PySAL code, the computation time can quickly grow out of hand. In these contexts, it is useful not to have to rebuild a matrix from scratch every time you need to re-run the analysis. A useful solution, in this case, is to build the matrix once and save it to a file where it can be reloaded at a later stage if needed.\nPySAL has a way to efficiently write any kind of Graph object into a file using the method .to_parquet(). This will serialise the underlying adjacency table into an Apache Parquet file format that is very fast to read and write and can be compressed to a small size.\n\nqueen.to_parquet(\"queen.parquet\")\n\nYou can then read such a file back to the Graph from using graph.read_parquet() function:\n\nqueen_2 = graph.read_parquet(\"queen.parquet\")\n\n\n\n\n\n\n\nInteroperabilty with other tools\n\n\n\nWeights saved as a Parquet file are efficient if PySAL is the only tool you want to use to read and write them. If you want to save them to other file formats like GAL or GWT that are readable by tools like GeoDa, check the documentation of the libpysal.io module."
  },
  {
    "objectID": "chapter_04/hands_on.html#spatial-lag",
    "href": "chapter_04/hands_on.html#spatial-lag",
    "title": "Spatial weights in PySAL",
    "section": "Spatial Lag",
    "text": "Spatial Lag\nOne of the most direct applications of spatial weight matrices is the so-called spatial lag. The spatial lag of a given variable is the product of a spatial weight matrix and the variable itself:\n\\[\nY_{sl} = W Y\n\\]\nwhere \\(Y\\) is a Nx1 vector with the values of the variable. Recall that the product of a matrix and a vector equals the sum of a row by column element multiplication for the resulting value of a given row. In terms of the spatial lag:\n\\[\ny_{sl-i} = \\displaystyle \\sum_j w_{ij} y_j\n\\]\nIf you are using row-standardized weights, \\(w_{ij}\\) becomes a proportion between zero and one, and \\(y_{sl-i}\\) can be seen as the average value of \\(Y\\) in the neighborhood of \\(i\\).\nFor this illustration, you will use the area of each polygon as the variable of interest. And to make things a bit nicer later on, you will keep the log of the area instead of the raw measurement. Hence, let’s create a column for it:\n\n1prague = prague.set_geometry(\"geometry\")\n2prague[\"area\"] = np.log(prague.area)\n\n\n1\n\nRemember to set active geometry back to polygons before computing area.\n\n2\n\nnp.log is a function from the numpy package that computes the natural logarithm of an array of values (elementwise).\n\n\n\n\nThe spatial lag is a key element of many spatial analysis techniques, as you will see later on and, as such, it is fully supported in PySAL. To compute the spatial lag of a given variable, area, for example:\n\n1queen_score = row_wise_queen.lag(prague[\"area\"])\n2queen_score[:5]\n\n\n1\n\nCompute spatial lag of area using row-wised standardised weights to get mean values. If you used binary weights, the resulting spatial lag would equal to sum of values.\n\n2\n\nPrint the first five elements\n\n\n\n\narray([13.84202483, 14.06442931, 13.83427974, 14.19385395, 14.10275008])\n\n\nLine 4 contains the actual computation, which is highly optimised in PySAL. Note that, despite passing in a pd.Series object, the output is a numpy array. This however, can be added directly to the table prague:\n\nprague['w_area'] = queen_score"
  },
  {
    "objectID": "chapter_04/hands_on.html#moran-plot",
    "href": "chapter_04/hands_on.html#moran-plot",
    "title": "Spatial weights in PySAL",
    "section": "Moran Plot",
    "text": "Moran Plot\nThe Moran Plot is a graphical way to start exploring the concept of spatial autocorrelation, and it is a good application of spatial weight matrices and the spatial lag. In essence, it is a standard scatter plot in which a given variable (area, for example) is plotted against its own spatial lag. Usually, a fitted line is added to include more information:\n\n1f, ax = plt.subplots(1, figsize=(6, 6))\n2sns.regplot(x=\"area\", y=\"w_area\", data=prague, ci=None, ax=ax, marker=\".\");\n\n\n1\n\nSetup the figure (f) and axis (ax) to allow setting the size of the figure and forcing it to be square.\n\n2\n\nPlot the values. ci=None turns off the computation of the confidence interval for the regression line estimate.\n\n\n\n\n\n\n\nIn order to easily compare different scatter plots and spot outlier observations, it is common practice to standardise the values of the variable before computing its spatial lag and plotting it. This can be accomplished by substracting the average value and dividing the result by the standard deviation:\n\\[\nz_i = \\dfrac{y - \\bar{y}}{\\sigma_y}\n\\]\nwhere \\(z_i\\) is the standardized version of \\(y_i\\), \\(\\bar{y}\\) is the average of the variable, and \\(\\sigma\\) its standard deviation.\nCreating a standardised Moran Plot implies that average values are centred in the plot (as they are zero when standardised), and dispersion is expressed in standard deviations, with the rule of thumb of values greater or smaller than two standard deviations being outliers. A standardised Moran Plot also partitions the space into four quadrants that represent different situations:\n\nHigh-High (HH): values above average surrounded by values above average.\nLow-Low (LL): values below average surrounded by values below average.\nHigh-Low (HL): values above average surrounded by values below average.\nLow-High (LH): values below average surrounded by values above average.\n\nThese will be further explored once spatial autocorrelation has been properly introduced in subsequent blocks.\n\n1std_prague = (prague['area'] - prague['area'].mean()) / prague['area'].std()\n2std_w_prague = pd.Series(\n    row_wise_queen.lag(std_prague), index=std_prague.index\n)\nf, ax = plt.subplots(1, figsize=(6, 6))\nsns.regplot(x=std_prague, y=std_w_prague, ci=None, marker=\".\")\n\n3plt.axvline(0, c='k', alpha=0.5)\n4plt.axhline(0, c='k', alpha=0.5);\n\n\n1\n\nStandardize the area.\n\n2\n\nCompute the spatial lag of the standardised version and save it as a Series indexed as the original variable.\n\n3\n\nPlot a vertical line dividing quadrants.\n\n4\n\nPlot a horizontal line dividing quadrants."
  },
  {
    "objectID": "chapter_04/hands_on.html#acknowledgements",
    "href": "chapter_04/hands_on.html#acknowledgements",
    "title": "Spatial weights in PySAL",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The code was updated to use the new libpysal.graph module instead of libpysal.weights. The text was slightly adapted to accommodate a different dataset and the module change."
  },
  {
    "objectID": "chapter_01/concepts.html",
    "href": "chapter_01/concepts.html",
    "title": "What is Spatial Data Science?",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript."
  },
  {
    "objectID": "chapter_12/exercise.html",
    "href": "chapter_12/exercise.html",
    "title": "Predict future",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_12/hands_on.html",
    "href": "chapter_12/hands_on.html",
    "title": "Classification and regression",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_07/concepts.html",
    "href": "chapter_07/concepts.html",
    "title": "Similar data belong together",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Clustering and Regionalization from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nSpatial Data Science for Social Geography course introduces data science and computational analysis using open source tools written in the Python programming language to the curriculum of students of geography.\nThe course is taught in person at Charles University in Prague from October 2023 under the code MZ340V17."
  },
  {
    "objectID": "index.html#aims",
    "href": "index.html#aims",
    "title": "Spatial Data Science for Social Geography",
    "section": "Aims",
    "text": "Aims\nThe module provides students with little or no prior knowledge of core competencies in Spatial Data Science (SDS). It includes:\n\nAdvancing their statistical and numerical literacy.\nIntroducing basic principles of programming and state-of-the-art computational tools for SDS.\nPresenting a comprehensive overview of the main methodologies available to the Spatial Data Scientist and their intuition on how and when they can be applied.\nFocusing on real-world applications of these techniques in a geographical and applied context.\n\n\n\n\n\n\n\nIs it only for social geography?\n\n\n\nThe course revolves around data typically used in social geography, but its applicability is not limited to social geography. In practice, you will work more with vector data than rasters (although we cover those a bit as well) and often with data capturing various aspects of human life. The spatial data science concepts, however, are universal."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "Spatial Data Science for Social Geography",
    "section": "Learning outcomes",
    "text": "Learning outcomes\nAfter finishing the course, students will be able to:\n\nDemonstrate understanding of advanced concepts of spatial data science and use the open tools to load and analyze spatial data.\nUnderstand the motivation and inner logic of the main methodological approaches of open SDS.\nCritically evaluate the suitability of a specific technique, what it can offer, and how it can help answer questions of interest.\nApply several spatial analysis techniques and explain how to interpret the results in the process of turning data into information.\nWork independently using SDS tools to extract valuable insight when faced with a new dataset."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Spatial Data Science for Social Geography",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course assumes an understanding of geography and its key concepts (e.g. coordinate reference systems or the Modifiable Areal Unit Problem (Openshaw 1983)), at least basic familiarity with GIS (like file formats and basic spatial data manipulation) and a basic understanding of statistics (e.g. understanding the concept of regression), optimally with some spatial component (geographically weighted regression). While the course will briefly explain these topics, it will not cover the theory and statistics behind these concepts in detail.\nNo prior experience with programming or computer science is needed, although a positive attitude towards these topics is necessary."
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "Spatial Data Science for Social Geography",
    "section": "Course structure",
    "text": "Course structure\nThe material is planned for 12 weeks, with one session per week. Each session is divided into three parts - Concepts, Hands-on and Exercise, following the model proposed by Arribas-Bel (2019). Concepts have a form of a lecture covering conceptual aspects of the day’s topic, providing necessary theoretical background before digging into code. This part can be nicknamed “I do”. Hands-on contains documented code in a Jupyter notebook, executed in parallel by a lecturer, providing an additional explanation, and by students. Therefore, we have a part “We do”. Exercise is a set of tasks to be performed by students individually, with occasional guidance by the lecturer. So we finish the day with “You do”.\nFor enrolled students of Charles University, the course will finish with a written assignment in the form of a computational essay. See the Assignment section for details."
  },
  {
    "objectID": "index.html#literature",
    "href": "index.html#literature",
    "title": "Spatial Data Science for Social Geography",
    "section": "Literature",
    "text": "Literature\nThe course loosely follows the contents of the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023). The online version of the book is available under open access from geographicdata.science/book. Using the online version over the printed one is recommended, although this is entirely up to you.\n\n\n\n\n\n\nSpatial or geographic data science?\n\n\n\nSpatial data science and geographic data science are often treated as synonyms. In some interpretations, spatial is broader than geographic. In this case, we do spatial […] for […] geography, which is, in principle, geographic data science. We will treat both terms as equal within the context of this course."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Spatial Data Science for Social Geography",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe course material is partially derived from A Course on Geographic Data Science by Arribas-Bel (2019) and follows its structure, main learning logic, and some hands-on materials. Thanks, Dani! A few sections are derived from other sources acknowledged at the bottom of respective pages. Thank you all!"
  },
  {
    "objectID": "chapter_10/concepts.html",
    "href": "chapter_10/concepts.html",
    "title": "Use space in your favour",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Feature Engineering from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_00/infrastructure.html",
    "href": "chapter_00/infrastructure.html",
    "title": "Infrastructure",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will explain the infrastructure needed to run the course. Details will be included later."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "chapter_03/concepts.html",
    "href": "chapter_03/concepts.html",
    "title": "Old and new spatial data",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nParts of the chapter Spatial Data dealing with tabular data from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "data/geoboundaries_cgaz/preprocessing.html",
    "href": "data/geoboundaries_cgaz/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\nimport topojson as tp\n\n\nurl = \"https://github.com/wmgeolab/geoBoundaries/raw/main/releaseData/CGAZ/geoBoundariesCGAZ_ADM0.zip\"\n\ncgaz = gpd.read_file(url, engine=\"pyogrio\")\n\n\ntopo = tp.Topology(cgaz, prequantize=False)\nsimplified = topo.toposimplify(.05).to_gdf()\n\n\nsimplified.geometry = simplified.geometry.make_valid()\n\n\nsimplified.to_file(\"../../chapter_03/data/geoboundaries_cgaz.gpkg\")"
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html",
    "href": "data/chicago_influenza_1918/ReadMe.html",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "CC0 1.0\nGrantz, Kyra H. et al. (2017), Data from: Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918, Dryad, Dataset, https://doi.org/10.5061/dryad.48nv3\n\n\nPoint location and week of epidemic of 8,031 influenza and pneumonia deaths recorded during the 1918 Spanish flu pandemic within the city of Chicago. Data was digitized from 1920 City of Chicago Department of Health annual report Date last modified: 25-10-2016. Fields include: ID (FID), indicator of pneumonia (0 or 1, 0 indicates an influenza death, 1 an influenza and pneumonia death), x and y coordinates (with units in meters), and week (sequential week of epidemic). See paper for more details.\n\n\n\nSociodemographic data (including population size, illiteracy, unemployment) of 496 census tracts within the City of Chicago. Data was collected from the 1920 national census.\n\n\n\nShapefile of census tract boundaries in Chicago in 1920. File included in zip file include IL_tract_a.dbf, IL_tract_a.prj, IL_tract_a.sbn, IL_tract_a.sbx, IL_tract_a.shp, IL_tract_a.shp.xml, IL_tract_a.shx"
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#pandemic-influenza-mortality-chicago-usa-points.csv",
    "href": "data/chicago_influenza_1918/ReadMe.html#pandemic-influenza-mortality-chicago-usa-points.csv",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Point location and week of epidemic of 8,031 influenza and pneumonia deaths recorded during the 1918 Spanish flu pandemic within the city of Chicago. Data was digitized from 1920 City of Chicago Department of Health annual report Date last modified: 25-10-2016. Fields include: ID (FID), indicator of pneumonia (0 or 1, 0 indicates an influenza death, 1 an influenza and pneumonia death), x and y coordinates (with units in meters), and week (sequential week of epidemic). See paper for more details."
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#fine-scale-sociodemographics-of-chicago-usa-1920-tracts.csv",
    "href": "data/chicago_influenza_1918/ReadMe.html#fine-scale-sociodemographics-of-chicago-usa-1920-tracts.csv",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Sociodemographic data (including population size, illiteracy, unemployment) of 496 census tracts within the City of Chicago. Data was collected from the 1920 national census."
  },
  {
    "objectID": "data/chicago_influenza_1918/ReadMe.html#shapefile-of-census-tract-boundaries-in-chicago-in-1920-shapefile.zip",
    "href": "data/chicago_influenza_1918/ReadMe.html#shapefile-of-census-tract-boundaries-in-chicago-in-1920-shapefile.zip",
    "title": "Disparities in influenza mortality and transmission related to sociodemographic factors within Chicago in the pandemic of 1918",
    "section": "",
    "text": "Shapefile of census tract boundaries in Chicago in 1920. File included in zip file include IL_tract_a.dbf, IL_tract_a.prj, IL_tract_a.sbn, IL_tract_a.sbx, IL_tract_a.shp, IL_tract_a.shp.xml, IL_tract_a.shx"
  },
  {
    "objectID": "data/prague_zsj_2021/preprocessing.html",
    "href": "data/prague_zsj_2021/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import geopandas as gpd\n\nDownloaded from https://datahub.natur.cuni.cz/datasets/e7420b689ff74fd98635306bf4ef6b7b_1/explore.\n\nzsj = gpd.read_file(\"zsj_prahy_2021.geojson\")\n\n\nzsj = zsj[[\"NAZ_ZSJ\", \"NAZ_KU\", \"pocet_osob\", \"geometry\"]]\nzsj.columns = [\"NAZ_ZSJ\", \"NAZ_KU\", \"n_people\", \"geometry\"]\n\n\nzsj.to_crs(\"EPSG:5514\").to_file(\"../../chapter_04/data/zsj_prague_2021.gpkg\")\n\n\nzsj\n\n\n\n\n\n\n\n\nNAZ_ZSJ\nNAZ_KU\nn_people\ngeometry\n\n\n\n\n0\nBěchovice\nBěchovice\n1563.0\nMULTIPOLYGON (((14.62471 50.08417, 14.62525 50...\n\n\n1\nNová Dubeč\nBěchovice\n662.0\nMULTIPOLYGON (((14.60489 50.08146, 14.60644 50...\n\n\n2\nBenice\nBenice\n728.0\nMULTIPOLYGON (((14.60585 50.01581, 14.60660 50...\n\n\n3\nBřeziněves\nBřeziněves\n1808.0\nMULTIPOLYGON (((14.48546 50.17206, 14.48539 50...\n\n\n4\nDolní Černošice\nLipence\n150.0\nMULTIPOLYGON (((14.36257 49.98042, 14.36262 49...\n\n\n...\n...\n...\n...\n...\n\n\n948\nK Březiněvsi\nĎáblice\n0.0\nMULTIPOLYGON (((14.48947 50.16393, 14.48990 50...\n\n\n949\nÚstřední vojenská nemocnice\nDejvice\n0.0\nMULTIPOLYGON (((14.38805 50.09856, 14.38906 50...\n\n\n950\nVýzkumný ústav vodohospodářský\nDejvice\n10.0\nMULTIPOLYGON (((14.39341 50.12189, 14.39352 50...\n\n\n951\nSídliště Jalodvorská\nKrč\n1737.0\nMULTIPOLYGON (((14.46301 50.02124, 14.46324 50...\n\n\n952\nStrašnice-Za Dráhou\nStrašnice\n242.0\nMULTIPOLYGON (((14.52096 50.06713, 14.52095 50...\n\n\n\n\n953 rows × 4 columns"
  },
  {
    "objectID": "data/chicago_influenza_1918/preprocessing.html",
    "href": "data/chicago_influenza_1918/preprocessing.html",
    "title": "Spatial Data Science for Social Geography",
    "section": "",
    "text": "import pandas as pd\n\n\nchicago_flu = pd.read_csv(\"tracts.csv\").drop(columns=[\"week\", \"pop\", \"illit.r\", \"den.r\"])\ndeaths_total = chicago_flu.groupby(\"gisjoin\").counts.sum()\nchicago_flu = chicago_flu[~chicago_flu.duplicated(\"gisjoin\")].set_index(\"gisjoin\").drop(columns=\"counts\")\nchicago_flu[\"influenza\"] = deaths_total\nchicago_flu = chicago_flu.rename(columns={c:c.replace(\".\", \"_\").lower() for c in chicago_flu.columns})\nchicago_flu.index.name = \"geography_code\"\nchicago_flu.index = \"G\" + chicago_flu.index.astype('str')\n\n\nchicago_flu.to_csv(\"../../chapter_02/data/chicago_influenza_1918.csv\")\n\n\nchicago_flu\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n496 rows × 12 columns"
  },
  {
    "objectID": "chapter_03/hands_on.html",
    "href": "chapter_03/hands_on.html",
    "title": "Bring in geography",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nIt is time to get your hands on some spatial data. You will not go far from your pandas experience, you’ll just expand it a bit. This section covers an introduction to geopandas, a Python package extending the capabilities of pandas by providing support for geometries, projections and geospatial file formats. Let’s start with importing geopandas.\n1import geopandas as gpd\n\n\n1\n\nAs you import pandas as pd, you can import geopandas as gpd to keep things shorter."
  },
  {
    "objectID": "chapter_03/hands_on.html#datasets",
    "href": "chapter_03/hands_on.html#datasets",
    "title": "Bring in geography",
    "section": "Datasets",
    "text": "Datasets\nYou will be using a few different datasets in this notebook. The first one contains data on buildings, streets and street junctions of a small part of Paris from Fleischmann, Feliciotti, and Kerr (2021). The data contain some information on urban morphology derived from these geometries, but today, you will be mostly interested in geometries, not so much in attributes."
  },
  {
    "objectID": "chapter_03/hands_on.html#reading-files",
    "href": "chapter_03/hands_on.html#reading-files",
    "title": "Bring in geography",
    "section": "Reading files",
    "text": "Reading files\nAssuming you have a file containing both data and geometry (e.g. GeoPackage, GeoJSON, Shapefile), you can read it using geopandas.read_file(), which automatically detects the file type and creates a geopandas.GeoDataFrame. A geopandas.GeoDataFrame is just like pandas.DataFrame but with additional column(s) containing geometry.\n\n1paris_url = \"https://github.com/martinfleis/evolution-gean/raw/main/data/Paris.gpkg\"\n2buildings = gpd.read_file(paris_url, layer=\"buildings\")\nbuildings.head()\n\n\n1\n\nYou can load the data directly from the GitHub repository associated with the paper.\n\n2\n\nThe file is a GPKG with more layers. To read the layer called \"buildings\", you need to pass layer=\"buildings\". Otherwise, geopandas will read the first available layer.\n\n\n\n\n\n\n\n\n\n\n\nuID\nblg_area\nwall\nadjacency\nneighbour_distance\nnID\nlength\nlinearity\nwidth\nwidth_deviation\nopenness\nmm_len\nnode_start\nnode_end\nnodeID\nmeshedness\ngeometry\n\n\n\n\n0\n0\n27194.254623\n1079.492255\n0.423913\n79.492252\n1\n238.865434\n0.999987\n50.00000\n0.000000\n1.00000\n238.865434\n1\n5\n5\n0.153846\nPOLYGON ((449483.670 5412864.072, 449488.881 5...\n\n\n1\n1\n2196.125585\n255.198183\n0.857143\n52.080293\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n7\n0.163934\nPOLYGON ((449751.333 5412374.461, 449752.330 5...\n\n\n2\n2\n34.882075\n39.461749\n0.583333\n49.413639\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449714.614 5412302.731, 449714.577 5...\n\n\n3\n3\n38.808817\n39.461749\n0.600000\n43.450128\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449712.682 5412306.562, 449702.048 5...\n\n\n4\n4\n90.426163\n255.198183\n0.833333\n12.131337\n17\n213.373518\n0.999935\n40.47981\n0.580373\n0.78169\n213.373518\n7\n84\n84\n0.209302\nPOLYGON ((449725.342 5412337.375, 449720.863 5...\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore available layers\n\n\n\nYou can quickly check which layers are available in the GPKG file using a lower-level package called pyogrio.\n\nimport pyogrio\n\npyogrio.list_layers(paris_url)\n\narray([['tessellation', 'Unknown'],\n       ['buildings', 'Polygon'],\n       ['edges', 'LineString'],\n       ['nodes', 'Point']], dtype=object)\n\n\n\n\nLet’s have a quick look at the \"geometry\" column. This is the special one enabled by geopandas. You can notice that the objects stored in this column are not float or string but Polygons of a geometry data type instead. The column is also a geopandas.GeoSeries instead of a pandas.Series.\n\nbuildings[\"geometry\"].head()\n\n0    POLYGON ((449483.670 5412864.072, 449488.881 5...\n1    POLYGON ((449751.333 5412374.461, 449752.330 5...\n2    POLYGON ((449714.614 5412302.731, 449714.577 5...\n3    POLYGON ((449712.682 5412306.562, 449702.048 5...\n4    POLYGON ((449725.342 5412337.375, 449720.863 5...\nName: geometry, dtype: geometry\n\n\nPolygons are not the only geometry types you can work with. The same GPKG that contains buildings data also includes street network geometries of a LineString geometry type.\n\n1street_edges = gpd.read_file(paris_url, layer=\"edges\")\nstreet_edges.head(2)\n\n\n1\n\nThe layer with street network edges is called \"edges\".\n\n\n\n\n\n\n\n\n\n\n\nlength\nlinearity\nwidth\nwidth_deviation\nopenness\nmm_len\nnode_start\nnode_end\nnID\ngeometry\n\n\n\n\n0\n35.841349\n1.000000\n50.0\n0.0\n1.0\n35.841349\n1\n2\n0\nLINESTRING (449667.399 5412675.189, 449666.378...\n\n\n1\n238.865434\n0.999987\n50.0\n0.0\n1.0\n238.865434\n1\n5\n1\nLINESTRING (449687.083 5412913.239, 449683.137...\n\n\n\n\n\n\n\nYou can also load another layer, this time with Point geometries representing street network junctions.\n\n1street_nodes = gpd.read_file(paris_url, layer=\"nodes\")\nstreet_nodes.head(2)\n\n\n1\n\nWhen representing a street as a graph, junctions are usually \"nodes\". But more on that later.\n\n\n\n\n\n\n\n\n\n\n\nmeshedness\nnodeID\ngeometry\n\n\n\n\n0\n0.168\n1\nPOINT (449667.399 5412675.189)\n\n\n1\n0.160\n2\nPOINT (449664.238 5412639.488)"
  },
  {
    "objectID": "chapter_03/hands_on.html#writing-files",
    "href": "chapter_03/hands_on.html#writing-files",
    "title": "Bring in geography",
    "section": "Writing files",
    "text": "Writing files\nTo write a GeoDataFrame back to a file, use GeoDataFrame.to_file(). The file is format automatically inferred from the suffix, but you can specify your own with the driver= keyword. When no suffix is given, GeoPandas expects that you want to create a folder with an ESRI Shapefile.\n\nbuildings.to_file(\"buildings.geojson\")"
  },
  {
    "objectID": "chapter_03/hands_on.html#geometries",
    "href": "chapter_03/hands_on.html#geometries",
    "title": "Bring in geography",
    "section": "Geometries",
    "text": "Geometries\nGeometries within the geometry column are shapely objects. GeoPandas itself is not creating the object but leverages the existing ecosystem (note that there is a significant overlap of the team writing both packages to ensure synergy). A typical GeoDataFrame contains a single geometry column, as you know from traditional GIS software. If you read it from a file, it will most likely be called \"geometry\", but that is not always the case. Furthermore, a GeoDataFrame can contain multiple geometry columns (e.g., one with polygons, another with their centroids and another with bounding boxes), of which one is considered active. You can always get this active column, no matter its name, by using .geometry property.\n\nbuildings.geometry.head()\n\n0    POLYGON ((449483.670 5412864.072, 449488.881 5...\n1    POLYGON ((449751.333 5412374.461, 449752.330 5...\n2    POLYGON ((449714.614 5412302.731, 449714.577 5...\n3    POLYGON ((449712.682 5412306.562, 449702.048 5...\n4    POLYGON ((449725.342 5412337.375, 449720.863 5...\nName: geometry, dtype: geometry\n\n\n\n\n\n\n\n\nProperty vs indexing\n\n\n\nIn data frames, you can usually access a column via indexer (df[\"column_name\"]) or a property (df.column_name). However, the property is not available when there is either a method (e.g. .plot) or a built-in property (e.g. .crs or .geometry) overriding this option.\n\n\nYou can quickly check that the geometry is a data type indeed coming from shapely. You will use shapely directly in some occasions but in most cases, any interaction with shapely will be handled by geopandas.\n\ntype(buildings.geometry.loc[0])\n\nshapely.geometry.polygon.Polygon\n\n\nThere is also a handy SVG representation if you are in a Jupyter Notebook.\n\nbuildings.geometry.loc[0]\n\n\n\n\nIf you’d rather see a text representation, you can retrieve a Well-Known Text using .wkt property.\n\nbuildings.geometry.loc[0].wkt\n\n'POLYGON ((449483.67042272736 5412864.072456881, 449488.88104846893 5412863.625060784, 449510.6982350738 5412861.748884251, 449510.82232527074 5412863.304151067, 449510.9970363802 5412863.969594091, 449511.66399917164 5412863.919089544, 449511.51741561835 5412863.119987088, 449511.4365228922 5412861.475392743, 449511.92777931073 5412861.459829652, 449511.847098327 5412860.649013683, 449514.8591315278 5412860.388296289, 449517.71725811594 5412860.140090327, 449517.7760377807 5412860.962221627, 449518.2373559536 5412860.880227586, 449518.4419134186 5412862.412532236, 449518.4869309123 5412863.334841713, 449519.14666073857 5412863.295520584, 449519.1506655881 5412862.117074884, 449519.0673703245 5412861.017238655, 449541.1115176094 5412859.094659338, 449545.97766938613 5412858.672666636, 449549.75438190147 5412901.605985229, 449547.6073362831 5412901.814392851, 449548.567713732 5412913.122884805, 449550.67869009526 5412912.981506093, 449550.8025672962 5412914.514541514, 449551.9241080391 5412914.448813682, 449551.9348595453 5412914.826696844, 449552.39014691365 5412914.889282009, 449552.7947021043 5412915.0190284075, 449553.1844895202 5412915.137791312, 449553.567345395 5412915.301085203, 449553.995208161 5412915.575142834, 449554.3717355797 5412915.8496647095, 449554.6825619913 5412916.158131939, 449554.9271848004 5412916.444963708, 449555.21068708715 5412916.976019454, 449555.4137206183 5412917.530037004, 449555.5064483717 5412918.051700801, 449555.5475392717 5412918.540480322, 449555.62429303036 5412918.917766655, 449555.70998869033 5412919.472845257, 449556.1422696238 5412919.424468057, 449556.2183238966 5412920.535487359, 449562.79918093735 5412919.9534816, 449562.68676143093 5412918.87614223, 449563.11170885165 5412918.827831876, 449563.098344999 5412918.160928504, 449563.126774911 5412918.0606178325, 449563.1995080086 5412917.993257815, 449563.4046481416 5412917.969168958, 449564.15418411116 5412918.129148356, 449564.8460561479 5412918.400819888, 449565.3473547241 5412918.685331517, 449565.7600469264 5412918.903941842, 449569.385767247 5412920.005104809, 449573.1341477573 5412920.882819934, 449576.0881864898 5412921.512024904, 449581.89650447795 5412922.282190066, 449587.2816820141 5412922.489214591, 449587.38605958334 5412924.300353636, 449591.37312920834 5412923.997514584, 449591.18928952987 5412921.508952306, 449591.41653090715 5412921.495781836, 449591.41823944415 5412920.873210528, 449596.2987062339 5412920.417780314, 449596.3557664515 5412921.050937689, 449596.6122418503 5412921.026386226, 449596.8473139128 5412923.5033686785, 449600.79761606036 5412923.189751511, 449600.6270395119 5412921.356976227, 449604.7781654215 5412920.541279472, 449608.5895365421 5412919.46184521, 449610.842163415 5412918.76335628, 449613.8387027025 5412917.602349282, 449616.76150549244 5412916.397541602, 449618.4267426552 5412915.6265414115, 449622.3539571713 5412913.56776845, 449623.31717624434 5412913.025450806, 449623.469776855 5412912.868433806, 449623.6237828398 5412912.867043071, 449623.7196217933 5412912.921762948, 449623.7717601848 5412913.010228663, 449623.8136481859 5412913.587937933, 449624.2902329334 5412913.572517156, 449624.38094090414 5412914.683404835, 449630.9178089899 5412914.101876877, 449630.8739143512 5412913.301844328, 449632.98429004755 5412913.093799805, 449632.85340290813 5412911.594177414, 449633.44139722886 5412911.733390482, 449633.3687635781 5412911.811865739, 449634.9688831225 5412913.576149886, 449636.64116364875 5412911.960194462, 449635.12241655105 5412910.272994659, 449634.22338476323 5412911.42616944, 449632.6486707013 5412910.8511823565, 449633.1723898306 5412908.745328067, 449633.6809331814 5412907.395571448, 449632.0965758859 5412906.564979016, 449632.24154219666 5412906.37467999, 449632.10109926015 5412906.253660282, 449632.1368641002 5412906.153283759, 449632.03248709446 5412905.965236017, 449632.0170169093 5412905.876439151, 449632.0597139131 5412905.731531769, 449633.3081509492 5412904.28615824, 449634.4403545097 5412902.964122151, 449634.68216361897 5412902.939704867, 449634.78533626033 5412902.994358722, 449634.90890402586 5412902.8709553685, 449635.0347800814 5412903.003223728, 449635.1948152892 5412902.857257005, 449636.31493905303 5412904.25901188, 449639.6449246257 5412902.661442981, 449640.48687111214 5412904.121295262, 449639.5787976075 5412905.085560614, 449641.6630449916 5412906.045047367, 449642.7772715006 5412904.356312055, 449640.7423521288 5412903.174038237, 449640.611049216 5412903.253043019, 449640.4141531476 5412902.565562294, 449641.946280098 5412902.4850290585, 449641.7802405506 5412900.340933944, 449642.58633828926 5412900.2669548765, 449641.96324695816 5412893.8024464715, 449640.8566696185 5412893.901372244, 449635.5822474328 5412832.038043762, 449638.0595410284 5412831.848923279, 449638.0408595018 5412831.404409284, 449640.52548717073 5412831.215223694, 449640.2731551761 5412828.449352107, 449641.3721107519 5412828.317144039, 449641.25518949685 5412826.739576128, 449642.9850470283 5412826.6239074115, 449642.7462798089 5412823.735625579, 449642.5234843125 5412820.9917214485, 449640.6764859113 5412821.130681849, 449640.60436957626 5412819.641646034, 449639.4024388879 5412819.741432611, 449639.2017432166 5412817.008446167, 449636.52673296514 5412817.232702173, 449636.31247223227 5412814.6221260065, 449636.0776919613 5412814.613128503, 449635.391206935 5412806.815145865, 449635.60368519445 5412806.790993489, 449635.31619423494 5412803.380649782, 449635.09618137043 5412803.382636058, 449634.4531948267 5412795.528675599, 449634.6365391388 5412795.527020349, 449634.33427926747 5412792.105693004, 449634.1290338704 5412792.118663054, 449633.46484657715 5412784.353830736, 449633.6555250439 5412784.352109246, 449633.4263937883 5412781.719433408, 449636.1014209998 5412781.495176044, 449635.8997192581 5412778.651028268, 449637.0362567257 5412778.618533815, 449636.91350504366 5412777.207774697, 449638.6796454757 5412777.047309087, 449638.4516202225 5412774.536910838, 449638.16603648325 5412771.337774179, 449636.4140600939 5412771.442526725, 449636.3054739868 5412769.9760544235, 449635.17044009484 5412770.175291397, 449634.93226927775 5412767.353707063, 449632.42581256223 5412767.565325888, 449632.42873048485 5412767.076148678, 449629.8196003863 5412767.288695651, 449624.6260454385 5412705.469124302, 449625.784097605 5412705.380848207, 449625.21140460705 5412698.815834385, 449624.397943989 5412698.889881964, 449624.2467621461 5412696.7678878335, 449622.6781100574 5412696.870988961, 449622.9853372693 5412695.96773253, 449623.03737723606 5412696.045082065, 449624.77562591207 5412694.41741188, 449623.2275823561 5412692.741596499, 449621.4324691968 5412694.569887813, 449622.5781581991 5412695.548960886, 449621.9609937083 5412697.055337553, 449619.946886898 5412696.562140484, 449618.43871866807 5412696.0532580735, 449617.65367872006 5412697.650087786, 449617.4612906789 5412697.462835124, 449617.3088849697 5412697.642084512, 449617.2127411392 5412697.554016263, 449617.09660338896 5412697.688469868, 449616.84715035616 5412697.679605605, 449615.4577352982 5412696.513744743, 449614.0239146523 5412695.3038170105, 449614.0138700707 5412695.003746988, 449614.07193893724 5412694.936520154, 449613.96102680376 5412694.837468275, 449614.05506242963 5412694.692097156, 449613.9148146695 5412694.593310224, 449615.29801661795 5412693.446877436, 449614.378878989 5412691.5652775355, 449613.7199415229 5412690.070425025, 449615.1281581061 5412689.257278229, 449616.2143748868 5412690.1479506185, 449617.32080266706 5412688.403696475, 449615.46040861116 5412687.064215939, 449614.2101139275 5412689.121047575, 449614.32072498364 5412689.186750986, 449613.7730910469 5412689.458506467, 449613.6485249513 5412687.847657164, 449611.4863254577 5412688.011707396, 449611.44292906555 5412687.267256037, 449604.8984623957 5412687.848871055, 449604.98897594935 5412688.937525766, 449604.5059418415 5412689.053059722, 449604.5606933101 5412689.43054534, 449604.5989694958 5412689.608072617, 449604.5414027555 5412689.73088034, 449604.3737269281 5412689.8435656335, 449604.19027872104 5412689.834105697, 449603.46974788094 5412689.640507303, 449602.6220300327 5412689.1701313285, 449600.81276603666 5412688.619505331, 449597.58413957 5412687.648137317, 449593.73212909856 5412686.682403454, 449590.3232660036 5412686.057297078, 449586.1306774322 5412685.550445473, 449580.3267357528 5412685.291617745, 449580.32784101204 5412684.602349706, 449576.2967979027 5412684.927825402, 449576.4195663769 5412686.338583104, 449570.9662473771 5412686.732503002, 449570.86578072567 5412685.354895004, 449566.86387329566 5412685.657880034, 449566.9359078913 5412686.324252794, 449564.6663129751 5412686.778335735, 449562.16364109446 5412687.412399851, 449560.02013056946 5412688.020983725, 449556.41506428015 5412689.220870763, 449553.900641493 5412690.177439789, 449551.7741126546 5412691.041565836, 449549.2033322462 5412692.254339157, 449546.7870676462 5412693.521301644, 449544.1300921956 5412694.934964047, 449543.9907479902 5412694.93622428, 449543.85049896775 5412694.837439101, 449543.77565188025 5412694.671360023, 449543.7859966721 5412694.1932326, 449543.08907447907 5412694.177301526, 449543.2259000398 5412693.086591521, 449536.6668787795 5412693.679535491, 449536.7721739575 5412694.779172678, 449536.2954700794 5412694.783484644, 449536.3540470338 5412695.583383606, 449536.34571388876 5412696.283834195, 449536.2855406757 5412696.929168368, 449536.174130714 5412697.586083068, 449535.95281281247 5412698.255109006, 449535.66327772563 5412698.680176544, 449535.1692984536 5412699.207147025, 449534.6375436876 5412699.6121715205, 449534.0386778037 5412699.8955154065, 449533.46090867126 5412700.078614915, 449533.49356261635 5412700.445182742, 449532.3722806281 5412700.544262435, 449532.5118394902 5412702.188325901, 449530.4231875316 5412702.373976488, 449531.3980906808 5412713.66009745, 449533.50090341247 5412713.418733721, 449537.16807661625 5412756.386379051, 449486.46780440013 5412760.725072889, 449486.34724242584 5412760.370418295, 449486.0722675962 5412759.972693572, 449485.6662904804 5412759.687325738, 449485.26855303056 5412759.501936954, 449484.7840175564 5412759.450738974, 449484.3823685349 5412759.64336604, 449483.67042272736 5412864.072456881))'"
  },
  {
    "objectID": "chapter_03/hands_on.html#projections",
    "href": "chapter_03/hands_on.html#projections",
    "title": "Bring in geography",
    "section": "Projections",
    "text": "Projections\nBut without an assigned coordinate reference system (CRS), you don’t know where this shape lies on Earth. Therefore, each geometry column has (optionally) assigned a CRS. That is always available via .crs.\n\nbuildings.crs\n\n&lt;Projected CRS: EPSG:32631&gt;\nName: WGS 84 / UTM zone 31N\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Between 0°E and 6°E, northern hemisphere between equator and 84°N, onshore and offshore. Algeria. Andorra. Belgium. Benin. Burkina Faso. Denmark - North Sea. France. Germany - North Sea. Ghana. Luxembourg. Mali. Netherlands. Niger. Nigeria. Norway. Spain. Togo. United Kingdom (UK) - North Sea.\n- bounds: (0.0, 0.0, 6.0, 84.0)\nCoordinate Operation:\n- name: UTM zone 31N\n- method: Transverse Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nIf you check the type, you’ll notice it comes from the pyproj package. Note that you will likely never interact with that yourself.\n\ntype(buildings.crs)\n\npyproj.crs.crs.CRS\n\n\nThe object with the CRS information has plenty of useful tricks. You can, for example, quickly check if it is a geographic (coordinates are latitude and longitude in degrees) or a projected CRS (x and y in meters, feet or similar).\n\nbuildings.crs.is_geographic\n\nFalse\n\n\ngeopandas is like a glue that brings different pieces of the Python ecosystem together. pandas for tabular data, shapely for geometries, pyogrio for interaction with GIS file formats or pyproj for CRS management."
  },
  {
    "objectID": "chapter_03/hands_on.html#simple-accessors-and-methods",
    "href": "chapter_03/hands_on.html#simple-accessors-and-methods",
    "title": "Bring in geography",
    "section": "Simple accessors and methods",
    "text": "Simple accessors and methods\nNow you have a GeoDataFrame and can start working with its geometry.\nSince there was only one geometry column in the buildings dataset, this column automatically becomes the active geometry and spatial methods used on the GeoDataFrame will be applied to the \"geometry\" column.\n\nMeasuring area\nTo measure the area of each polygon, access the GeoDataFrame.area attribute, which returns a pandas.Series. Note that GeoDataFrame.area is just GeoSeries.area applied to the active geometry column.\n\n1buildings[\"area\"] = buildings.area\nbuildings[\"area\"].head()\n\n\n1\n\n.area is a property that always triggers a new area measurement. If you want to access an existing column called \"area\", use buildings[\"area\"]. Especially if you don’t want to re-run the computation repeatedly.\n\n\n\n\n0    27194.254623\n1     2196.125585\n2       34.882075\n3       38.808817\n4       90.426163\nName: area, dtype: float64\n\n\n\n\nGetting polygon boundary and centroid\ngeopandas allows you a quick manipulation of geometries. For example, to get the boundary of each polygon (of a LineString geometry type), access the GeoDataFrame.boundary property:\n\nbuildings[\"boundary\"] = buildings.boundary\nbuildings[\"boundary\"].head()\n\n0    LINESTRING (449483.670 5412864.072, 449488.881...\n1    LINESTRING (449751.333 5412374.461, 449752.330...\n2    LINESTRING (449714.614 5412302.731, 449714.577...\n3    LINESTRING (449712.682 5412306.562, 449702.048...\n4    LINESTRING (449725.342 5412337.375, 449720.863...\nName: boundary, dtype: geometry\n\n\nSince you have saved the boundary as a new column, you now have two geometry columns in the same GeoDataFrame.\nYou can also create new geometries, which could be, for example, a buffered version of the original one (i.e., GeoDataFrame.buffer(10) to buffer by 10 meters if your CRS is in meters) or its centroid:\n\nbuildings[\"centroid\"] = buildings.centroid\nbuildings[\"centroid\"].head()\n\n0    POINT (449571.139 5412805.320)\n1    POINT (449737.829 5412348.159)\n2    POINT (449708.963 5412301.639)\n3    POINT (449707.214 5412305.199)\n4    POINT (449722.241 5412327.441)\nName: centroid, dtype: geometry\n\n\n\n\nMeasuring distance\nMeasuring distance is similarly straightforward. The building data are from central Paris, so you can try to figure out how far is each of them from the Arc de Triomphe.\nUse the coordinates of the Arc de Triomphe to generate a Point geometry.\n\n1arc = gpd.GeoSeries.from_xy(x=[2.29503], y=[48.87377], crs=\"EPSG:4326\")\n\n\n1\n\nGeoSeries.from_xy() is a handy way of creating point geometries if you know their coordinates. You pass an array of x coordinates (longitude is always x in geopandas), an array of y coordinates and a CRS. \"EPSG:4326\" represents WGS 84 CRS.\n\n\n\n\n\n\n\n\n\n\nUse geocoding to get the geometry\n\n\n\n\n\nThe code above uses known coordinates. If you don’t know them but know the address and a name of a place, you can use the built-in geocoding capabilities in geopandas:\narc = gpd.tools.geocode(\"Arc de Triomphe, Paris\")\n\n\n\nNow you have the Arc de Triomphe as a Point. However, that point is in latitude and longitude coordinates, which is a different CRS than the one buildings use. They must use the same CRS to measure the distance between geometries.\n\n1arc = arc.to_crs(buildings.crs)\narc\n\n\n1\n\n.to_crs projects coordinates from one CRS to another.\n\n\n\n\n0    POINT (448306.710 5413663.102)\ndtype: geometry\n\n\nWith a Point based on the correct CRS, you can measure the distance from each building to the Arc.\n\n1arc_location = arc.geometry.item()\n2buildings[\"distance_to_arc\"] = buildings.distance(arc_location)\nbuildings[\"distance_to_arc\"].head()\n\n\n1\n\nExtract the Point geometry from a single-item GeoDataFrame. Use .item() to extract the scalar geometry object from the GeoSeries of length 1.\n\n2\n\nMeasure the distance from every geometry in buildings to the Point and assign the result as a new column.\n\n\n\n\n0    1422.562389\n1    1905.389066\n2    1949.156743\n3    1945.432420\n4    1938.163361\nName: distance_to_arc, dtype: float64\n\n\nUsing buildings.distance(arc_location) measures the distance from geometries in the active geometry column, which are Polygons in this case. But you can also measure distance from geometries in any other column.\n\nbuildings[\"centroid\"].distance(arc_location).head()\n\n0    1527.930234\n1    1943.495766\n2    1954.455176\n3    1950.721082\n4    1946.206235\ndtype: float64\n\n\nNote that geopandas.GeoDataFrame is a subclass of pandas.DataFrame, so you have all the pandas functionality available to use on the geospatial dataset — you can even perform data manipulations with the attributes and geometry information together.\nFor example, to calculate the average of the distances measured above, access the \"distance\" column and call the .mean() method on it:\n\nbuildings[\"distance_to_arc\"].mean()\n\n864.570916943503\n\n\nSimilarly, you can plot the distribution of distances as a histogram.\n\nbuildings[\"distance_to_arc\"].plot.hist(bins=50)\n\n&lt;Axes: ylabel='Frequency'&gt;"
  },
  {
    "objectID": "chapter_03/hands_on.html#making-maps",
    "href": "chapter_03/hands_on.html#making-maps",
    "title": "Bring in geography",
    "section": "Making maps",
    "text": "Making maps\nMaps in GeoPandas are of two kinds. Static images and interactive maps based on leaflet.js.\n\nStatic maps\nGeoPandas can also plot maps to check how the geometries appear in space. Call GeoDataFrame.plot() to plot the active geometry. To colour code by another column, pass in that column as the first argument. In the example below, you can plot the active geometry column and colour code by the \"distance_to_arc\" column. You may also want to show a legend (legend=True).\n\nbuildings.plot(\"distance_to_arc\", legend=True)\n\n&lt;Axes: &gt;\n\n\n\n\n\nThe map is created using the matplotlib package. It’s the same that was used under the hood for all the plots you have done before. You can use it directly to save the resulting plot to a PNG file.\n\n1import matplotlib.pyplot as plt\n\n\n1\n\nImport the pyplot module of the matplotlib package as the plt alias.\n\n\n\n\nIf you now create the plot and use the plt.savefig() function in the same cell, a PNG will appear on your disk.\nbuildings.plot(\"distance_to_arc\", legend=True)\nplt.savefig(\"distance_to_arc.png\", dpi=150)\n\n\n\n\n\n\nOther resources for static plotting\n\n\n\nWant to know more about static plots? Check this chapter of A Course on Geographic Data Science by Dani Arribas-Bel (2019) or the GeoPandas documentation.\n\n\n\n\nInteractive maps\nYou can also explore your data interactively using GeoDataFrame.explore(), which behaves in the same way .plot() does but returns an interactive HTML map instead.\n\nbuildings.explore(\"distance_to_arc\", legend=True)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nUsing the GeoSeries of centroids, you can create a similar plot, but since you access only a single column, it has no values to show.\n\nbuildings[\"centroid\"].explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nKeeping data around\n\n\n\nIf you want to use centroids on a map but keep the data around to have them available in the tooltip, you can assign it as an active geometry and then use .explore().\nbuildings.set_geometry(\"centroid\").explore()\n\n\nYou can also layer multiple geometry layers on top of each other. You just need to use one plot as a map (m) object for the others.\n\n1m = buildings.explore(tiles=\"CartoDB Positron\", popup=True, tooltip=False)\n2street_edges.explore(m=m, color=\"black\")\n3street_nodes.explore(m=m, color=\"pink\")\n4arc.explore(m=m, marker_type=\"marker\")\n5m.save(\"paris-map.html\")\nm\n\n\n1\n\nCreate a base map (m) based on buildings. tiles=\"CartoDB Positron specifies which background tiles shall be used, popup=True enables pop-up (shows data on click) and tooltip=False disables tooltip (shows data on hover).\n\n2\n\nPassing m=m ensures that both GeoDataFrames are shown on the same map.\n\n3\n\ncolor=\"pink\" specifies the geometries’ colour if no data is shown.\n\n4\n\nmarker_type=\"marker\" specifies how points are shown on the map. Here, you want to use \"marker\".\n\n5\n\nSave the map to a file. If you add m on the next line, the map will also be shown in the Notebook.\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "chapter_03/hands_on.html#spatial-predicates",
    "href": "chapter_03/hands_on.html#spatial-predicates",
    "title": "Bring in geography",
    "section": "Spatial predicates",
    "text": "Spatial predicates\nSpatial predicates tell you the spatial relation between two geometries. Are they equal, intersect, overlap, or are they within another?\nLet’s leave Paris and load a map of countries provided by Runfola et al. (2020) and simplified for this course.\n\nworld_countries = gpd.read_file(\n    \"https://martinfleischmann.net/sds/chapter_03/data/geoboundaries_cgaz.gpkg\",\n)\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nworld_countries = gpd.read_file(\"geoboundaries_cgaz.gpkg\")\n\n\n\nSince you’ll be exploring spatial predicates, you need a second layer. Let’s load a data set of populated places from Natural Earth.\n\nworld_cities = gpd.read_file(\n    \"https://naciscdn.org/naturalearth/110m/cultural/ne_110m_populated_places_simple.zip\"\n)\n\nA quick map with both shows how the data look and relate.\n\n1ax = world_countries.plot()\n2world_cities.plot(ax=ax, color=\"pink\", alpha=0.7)\n\n\n1\n\nMulti-layer static map works the same as interactive. You just need to replace m with ax.\n\n2\n\nalpha=0.7 sets partial transparency for easier visibility of denser clusters of points.\n\n\n\n\n&lt;Axes: &gt;\n\n\n\n\n\nLet’s first create some small toy spatial objects. First, extract a polygon representing Belgium.\n\nbelgium = world_countries.loc[\n    world_countries[\"shapeGroup\"] == \"BEL\", \"geometry\"\n].item()\nbelgium\n\n\n\n\nSecond, get points representing Paris and Brussels.\n\nparis = world_cities.loc[world_cities[\"name\"] == \"Paris\", \"geometry\"].item()\nbrussels = world_cities.loc[world_cities[\"name\"] == \"Brussels\", \"geometry\"].item()\n\nAnd create a line connecting both cities. Here comes one of those cases when you use shapely directly.\n\n1import shapely\n\n2line = shapely.LineString([paris, brussels])\n\n\n1\n\nImport shapely.\n\n2\n\nCreate a shapely.LineString geometry object with paris as a starting point and brussels as an ending point.\n\n\n\n\nLet’s visualise those four geometry objects together. To do that, you can create a single GeoSeries with all of them. Notice that such a GeoSeries contains mixed geometry types (Polygon, two Points, LineString). That may be an issue with some traditional GIS software, but is no problem with geopandas.\n\ngpd.GeoSeries([belgium, paris, brussels, line], crs=world_cities.crs).explore(\n    marker_type=\"marker\"\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nYou can recognise the shape of Belgium, two markers locating Paris and Brussels and the line connecting them.\nBrussels, the capital of Belgium, is thus located within Belgium. This is a spatial relationship, and we can test this using the individual shapely geometry objects as follow:\n\nbrussels.within(belgium)\n\nTrue\n\n\nAnd using the reverse, Belgium contains Brussels:\n\nbelgium.contains(brussels)\n\nTrue\n\n\nOn the other hand, Belgium does not contain Paris:\n\nbelgium.contains(paris)\n\nFalse\n\n\nNor Paris is located in Belgium:\n\nparis.within(belgium)\n\nFalse\n\n\nThe straight line you draw from Paris to Brussels is not fully located within Belgium.\n\nbelgium.contains(line)\n\nFalse\n\n\nBut it does intersect with it.\n\nline.intersects(belgium)\n\nTrue\n\n\n\nSpatial relationships with GeoDataFrames\nThe same methods available on individual shapely geometries are also available as methods on GeoSeries and GeoDataFrame objects.\nFor example, if you call the .contains() method on the world_countries dataset with the paris point, it will do this spatial check for each country in the world_countries GeoDataFrame.\n\nworld_countries.contains(paris).sum()\n\n1\n\n\nBecause the above gives us a boolean result, we can use that to filter the dataframe:\n\nworld_countries[world_countries.contains(paris)].explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nMaking use of spatial index\n\n\n\nYou could also do the same based on a query over the spatial index. Custom queries on a spatial index using GeoDataFrame.sindex.query() are often much faster but are also considered advanced usage. Since GeoPandas wraps them in spatial joins covering most cases, you may not even need to access sindex directly.\nworld_countries.iloc[world_countries.sindex.query(paris, \"within\")]"
  },
  {
    "objectID": "chapter_03/hands_on.html#spatial-join",
    "href": "chapter_03/hands_on.html#spatial-join",
    "title": "Bring in geography",
    "section": "Spatial join",
    "text": "Spatial join\nOne of the typical geospatial tasks is a spatial join. Let’s change the data set again and load boundaries of Spanish cities derived from Daniel Arribas-Bel, Garcia-López, and Viladecans-Marsal (2019), which proposes a machine learning algorithm to delineate city boundaries from building footprints.\nYou can try to figure out which of these cities fall into Catalonia region and which province they belong to.\nFirst, you need data representing Catalonia. You can download it from ICGC website or use the catalonia.gpkg saved in this repository.\n\ncatalonia = gpd.read_file(\n    \"https://martinfleischmann.net/sds/chapter_03/data/catalonia.gpkg\",\n)\ncatalonia.head()\n\n\n\n\n\n\n\n\nCODIPROV\nNOMPROV\nCAPPROV\nAREAP5000\ngeometry\n\n\n\n\n0\n08\nBarcelona\nBarcelona\n7730.4124\nMULTIPOLYGON (((386888.695 4561204.584, 386881...\n\n\n1\n17\nGirona\nGirona\n5902.2156\nMULTIPOLYGON (((482690.024 4613155.364, 482688...\n\n\n2\n25\nLleida\nLleida\n12165.6897\nMULTIPOLYGON (((393371.457 4638570.630, 393374...\n\n\n3\n43\nTarragona\nTarragona\n6305.6772\nMULTIPOLYGON (((300644.450 4494148.850, 300643...\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative\n\n\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\ncatalonia = gpd.read_file(\"catalonia.gpkg\")\n\n\n\nThen, you can load the boundaries of Spanish cities from the data repository linked to the paper.\n\ncities = gpd.read_file(\"https://ndownloader.figshare.com/files/20232174\")\ncities.head()\n\n\n\n\n\n\n\n\ncity_id\nn_buildings\ngeometry\n\n\n\n\n0\nci000\n2348\nPOLYGON ((385390.071 4202949.446, 384488.697 4...\n\n\n1\nci001\n2741\nPOLYGON ((214893.033 4579137.558, 215258.185 4...\n\n\n2\nci002\n5472\nPOLYGON ((690674.281 4182188.538, 691047.526 4...\n\n\n3\nci003\n14608\nPOLYGON ((513378.282 4072327.639, 513408.853 4...\n\n\n4\nci004\n2324\nPOLYGON ((206989.081 4129478.031, 207275.702 4...\n\n\n\n\n\n\n\nA quick exploration to better understand what you have just opened might help.\n\nm = catalonia.explore()\ncities.explore(m=m, color=\"red\")\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nYou should check the CRS, because for spatial join, you need to be sure that both GeoDataFrames are using the same (but don’t worry, geopandas would warn you in case of a CRS mismatch).\n\ncatalonia.crs.equals(cities.crs)\n\nFalse\n\n\nSince these two differ, you can re-project the geometries of catalonia to the CRS of cities.\n\ncatalonia = catalonia.to_crs(cities.crs)\ncatalonia.crs.equals(cities.crs)\n\nTrue\n\n\nNow, you can do the spatial join using the .sjoin() method. That uses the intersects predicate by default, but you can use any predicates you used above (plus a couple more).\n\n1cities_within_catalonia = cities.sjoin(catalonia)\n\n\n1\n\nThis joins the data from catalonia to cities for every geometry that intersects between the GeoDataFrames.\n\n\n\n\nLet’s see the result.\n\n1print(\n2    f\"Length of cities: {len(cities)}\\n\"\n3    f\"Length of cities_within_catalonia: {len(cities_within_catalonia)}\"\n)\n\n\n1\n\nThis showcases a more advanced use of print() with multi-line string.\n\n2\n\nA string starting with f is an f-string that can contain Python code embedded in {}. Such a code is executed and printed. The \\n part of the string stands for a line break.\n\n3\n\nlen(cities_within_catalonia) gives you the length of a GeoDataFrame, i.e. a number of rows.\n\n\n\n\nLength of cities: 717\nLength of cities_within_catalonia: 65\n\n\nYou can check that the resulting subset of cities has additional columns.\n\ncities_within_catalonia.head(2)\n\n\n\n\n\n\n\n\ncity_id\nn_buildings\ngeometry\nindex_right\nCODIPROV\nNOMPROV\nCAPPROV\nAREAP5000\n\n\n\n\n15\nci015\n379617\nPOLYGON ((935791.557 4629685.255, 936344.320 4...\n0\n08\nBarcelona\nBarcelona\n7730.4124\n\n\n69\nci075\n10942\nPOLYGON ((882938.449 4613412.187, 882326.210 4...\n0\n08\nBarcelona\nBarcelona\n7730.4124\n\n\n\n\n\n\n\nYou can now plot cities based on the province they belong to, captured by the \"NOMPROV\" column.\n\ncities_within_catalonia.explore(\n1    \"NOMPROV\",\n    tiles=\"CartoDB Positron\",\n)\n\n\n1\n\ngeopandas automatically switches from the continuous colour map to categorical when it encounters a categorical variable.\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSince GeoDataFrames are still based on pandas.ataFrames, we can readily use pandas functionality, like .groupby(), on the result.\n\n1cities_within_catalonia.groupby(\"NOMPROV\")[\"n_buildings\"].sum()\n\n\n1\n\nGroup by the \"NOMPROV\" column and get a sum of the \"n_buildings\" column by province.\n\n\n\n\nNOMPROV\nBarcelona    583415\nGirona       154179\nLleida        32052\nTarragona    157517\nName: n_buildings, dtype: int64"
  },
  {
    "objectID": "chapter_03/hands_on.html#overlay",
    "href": "chapter_03/hands_on.html#overlay",
    "title": "Bring in geography",
    "section": "Overlay",
    "text": "Overlay\nSometimes, you may want to create new geometries based on the spatial relationships between existing geometries. These are called overlay operations.\nLet’s assume that you are interested in areas that are 10 kilometres around a centroid of each city.\n\n1buffered_centroids = cities_within_catalonia.centroid.buffer(10_000)\nbuffered_centroids.explore()\n\n\n1\n\nGet centroids and directly buffer them to get polygons capturing areas within 10 km.\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nWith that, you can ask for an intersection between the buffer and city boundaries.\n\n\n\nA diagram illustrating the instersection overlay operation.\n\n\n\n1cities_within_catalonia.overlay(\n2    buffered_centroids.to_frame(), how=\"intersection\"\n).explore()\n\n\n1\n\nThe .overlay() method has a similar signature to .sjoin(). It should look familiar now.\n\n2\n\ngeopandas allows you to overlay only two GeoDataFrames, not GeoSeries. A quick way of converting a GeoSeries to a GeoDataFrame is to use the .to_frame() method. how=\"intersection\" specifies the overlay operation.\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOr you may want to do the union of the two to get the areas that are either within the city boundary or within 10 km of a city centroid.\n\n\n\nA diagram illustrating the union overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"union\"\n).explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOr find all parts of city boundaries that are further away than 10km from each centroid.\n\n\n\nA diagram illustrating the difference overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"difference\"\n).explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nFinally, you may ask which parts of areas are within 10 km or a boundary but not in both.\n\n\n\nA diagram illustrating symmetric difference overlay operation.\n\n\n\ncities_within_catalonia.overlay(\n    buffered_centroids.to_frame(), how=\"symmetric_difference\"\n).explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nIf you remember the spatial join between the provinces of Catalonia and Spanish cities, you may remember that some geometries in the result were duplicated because those cities intersect with more than one province. In that case, .overlay() may be a better solution. See if you can find the difference.\n\ncatalonia.overlay(cities).explore(\n    \"NOMPROV\",\n    tiles=\"CartoDB Positron\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\nAdditional reading\n\n\n\n\nCheck the similar introduction by Dani Arribas-Bel (2019) in his part Spatial data to learn more about static plots and how to get a background map with those.\nHave a look at the chapter Choropleth Mapping explaining how to get choropleth maps from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023)."
  },
  {
    "objectID": "chapter_03/hands_on.html#acknowledgements",
    "href": "chapter_03/hands_on.html#acknowledgements",
    "title": "Bring in geography",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nDelineation of Spanish cities is used following the A Course on Geographic Data Science by Dani Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The section on basic overlay predicates is adapted from the Introduction to geospatial data analysis with GeoPandas and the PyData stack by Joris van den Bossche. Illustrations are taken from the GeoPandas documentation, drawn by Martin Fleischmann."
  },
  {
    "objectID": "chapter_03/exercise.html",
    "href": "chapter_03/exercise.html",
    "title": "Learning GeoPandas",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nThis section is about playing with geopandas by yourself. You will zoom at Prague and the distribution of land price, provided by the Institute of Planning and Development."
  },
  {
    "objectID": "chapter_03/exercise.html#data-preparation",
    "href": "chapter_03/exercise.html#data-preparation",
    "title": "Learning GeoPandas",
    "section": "Data Preparation",
    "text": "Data Preparation\nYou will load two datasets. One with the price data and the other with the boundaries of municipal districts. Below are the links to both. Your first task is to figure out how to load them as two GeoDataFrames, one called price and the other called districts.\n\nThe link to the price dataset\nThe link to the districts dataset\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou have two options: either download and read from disk or pass the URL of the actual file to geopandas.read_file. Pay attention to file formats (open are better than proprietary) and projections.\n\n\n\nOnce you have your price dataset loaded, there is one cleaning step you need to do. The column with the price called \"CENA\" is encoded as strings, not numbers. You need to replace the \"N\" string with None and convert the column to float numbers.\nprice[\"CENA\"] = price[\"CENA\"].replace(\"N\", None).astype('float')\nThe rest is up to you!"
  },
  {
    "objectID": "chapter_03/exercise.html#map-making",
    "href": "chapter_03/exercise.html#map-making",
    "title": "Learning GeoPandas",
    "section": "Map Making",
    "text": "Map Making\nCreate a map of price distribution with the overlay of the district boundaries. Start with static or interactive, and try replicating the other once you’re done if the time permits. A few requirements:\n\nPlot the price.\nPlot boundaries on top. Try different colours to get a nice combination of colours.\nShow a legend.\nUse CartoDB Voyager or Dark Matter basemap.\nCan you figure out how to change the colormap?\nCan you change the transparency of polygons?\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nColormap is controlled via the cmap= keyword.\nTo plot a boundary, it may be easier to work with LineStrings than Polygons.\nCheck the additional reading materials linked in the previous section to figure out how to add basemap to static plots.\nTransparency is different in static and interactive maps. Check the documentation!"
  },
  {
    "objectID": "chapter_03/exercise.html#measuring",
    "href": "chapter_03/exercise.html#measuring",
    "title": "Learning GeoPandas",
    "section": "Measuring",
    "text": "Measuring\nPractice using geometric methods and properties GeoDataFrame offers.\n\nCreate a convex hull around each polygon in price.\nCalculate the area of these convex hulls.\nFind the 20% smallest convex hulls in the GeoDataFrame. Create a new object (e.g. smallest) only with them.\nCreate a multi-layer map of Prague where the smallest areas are coloured in one colour, and the rest appear in black."
  },
  {
    "objectID": "chapter_03/exercise.html#joining",
    "href": "chapter_03/exercise.html#joining",
    "title": "Learning GeoPandas",
    "section": "Joining",
    "text": "Joining\nJoin the two GeoDataFrame using .sjoin() or .overlay() methods.\n\nIs the mean price higher in Praha 3 or Praha 6?\nWhich district is the cheapest?\nWhat is the difference between the cheapest and the most expensive one?\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou may need to use .groupby() after joining.\nFor those of you who don’t speak Czech, the district names are encoded in the \"NAZEV_1\" column."
  },
  {
    "objectID": "chapter_00/assignment.html",
    "href": "chapter_00/assignment.html",
    "title": "Assignment",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the assignment. Details will be included later."
  },
  {
    "objectID": "chapter_10/hands_on.html",
    "href": "chapter_10/hands_on.html",
    "title": "Creating new data",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_10/exercise.html",
    "href": "chapter_10/exercise.html",
    "title": "Interpolation and friends",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_07/hands_on.html",
    "href": "chapter_07/hands_on.html",
    "title": "Clustering and regionalisation",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_07/exercise.html",
    "href": "chapter_07/exercise.html",
    "title": "Find me a cluster",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_12/concepts.html",
    "href": "chapter_12/concepts.html",
    "title": "Is there space in machine learning?",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript."
  },
  {
    "objectID": "chapter_01/hands_on.html",
    "href": "chapter_01/hands_on.html",
    "title": "Jupyter and Python",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nWelcome to the first hands-on section of the course. You will familiarise yourself with the tools you will be using, ensure that all works as it should, and prepare for some Python code."
  },
  {
    "objectID": "chapter_01/hands_on.html#computer-science-101",
    "href": "chapter_01/hands_on.html#computer-science-101",
    "title": "Jupyter and Python",
    "section": "Computer Science 101",
    "text": "Computer Science 101\nSpatial Data Science depends on code, and coding environments can be unfriendly to an average user. People designing the tools are often computer scientists or have a strong knowledge of CS-related environments. It means we sometimes need to deal with the tools that look a bit scary, like a Terminal or a Command line. Below is a brief introduction to the tools you will need for this course.\n\nTerminal and Command line\nDepending on your operating system, you will have either Terminal (macOS, Linux) or Command line application installed. It will look like this:\n\n\n\nTerminal on macOS\n\n\nTerminal (and Command line, but we will refer to both as the terminal for simplicity) is used to interact with applications that do not have any graphic interface or with the apps that do have one, but you want to use them programmatically. The terminal usage is straightforward. Let’s start with a few examples.\nYou want to see a list of files and folders for this course. First, you need to navigate to the correct folder. For that, you can use the cd command, which stands for current directory.\ncd university/sds/\nLet’s assume that you have the folder with course material in the folder called sds in another folder called university. The full command is then composed of the cd part, saying set the current directory to… and waits for the parameter, which is a path to the folder in this case - university/sds/.\nOnce in the correct folder, you can use another command, ls, which stands for list and allows you to list the contents of the current directory.\nls\nThe output would look like this:\n\n\n\nOutput of the ls command.\n\n\nYou can also pass a parameter -l, specifying that you want a long listing including attributes.\nls -l\nThat changes the output to this:\n\n\n\nOutput of the ls -l command.\n\n\nThe syntax is always the same, starting with the app name and then followed by parameters."
  },
  {
    "objectID": "chapter_01/hands_on.html#conda-and-mamba",
    "href": "chapter_01/hands_on.html#conda-and-mamba",
    "title": "Jupyter and Python",
    "section": "Conda and Mamba",
    "text": "Conda and Mamba\nIf you followed the installation of Python described in the infrastructure section, you have used mamba app, with parameters specifying that you want to use it to create an environment based on an environment.yml file. But what is mamba?\nMamba, and its predecessor, conda, are tools you will use to create “environments” and install Python and Python packages. It is a package manager, ensuring all the necessary parts work together. For example, if you want to create a new environment and install Python in it, you type the following command in your terminal.\nmamba create -n my_environment python\nYou can check more in the documentation of mamba.\n\nOther options\nMamba is not the only way of doing this. If you don’t want to install anything on your local machine, you can use Google Colab, which gives you an environment with Python and an interface to work with Jupyter Notebooks. To use it, refer to the Colab section of the infrastructure documentation for differences. TODO"
  },
  {
    "objectID": "chapter_01/hands_on.html#jupyter-notebook-and-jupyter-lab",
    "href": "chapter_01/hands_on.html#jupyter-notebook-and-jupyter-lab",
    "title": "Jupyter and Python",
    "section": "Jupyter Notebook and Jupyter Lab",
    "text": "Jupyter Notebook and Jupyter Lab\nWhile you can interact with Python from the terminal, it is inconvenient. Instead, we will use Jypyter Notebooks and Jupyter Lab. Jupyter Notebooks are documents that allow you to mix text and code, execute small pieces of code one at a time and include graphical outputs of your code. Jupyter Lab is a handy interface allowing you to work with multiple notebooks and switch between your Python environments created with mamba.\nIt is time to say goodbye to the terminal and start Jupyter Lab. You should ensure you have your sds environment activated first:\nmamba activate sds\nThen you can start Lab using:\njupyter lab\nThis command should open your browser and load the Jupyter Lab interface.\n\n\n\nJupyter Lab interface\n\n\nIn the launcher, we can create a new Notebook by clicking on the Python logo representing our current environment. If you have more of them, you will see them there, as well as other environments using different programming languages like R or Julia.\nThe notebook is composed of cells. This is a cell:\n\n\n\nJupyter Notebook cell\n\n\nCells can contain either code or text. A typical notebook is then a series of cells where some include text describing what is happening while others contain the code, either waiting for execution or already executed. The cells with the executed code may also contain outputs.\nWe can start with simple math that Python can do natively. Run the following code cell. To do that, you can either click the “play” button on top or hit Shift + Enter:\n\n1 + 1\n\n2\n\n\nYou now have a code cell with the output. Jupyter Lab automatically created a new cell. Change its type to Markdown and write a short text describing what the cell above does."
  },
  {
    "objectID": "chapter_01/hands_on.html#let-the-snake-in",
    "href": "chapter_01/hands_on.html#let-the-snake-in",
    "title": "Jupyter and Python",
    "section": "Let the snake in",
    "text": "Let the snake in\nYou can start exploring Python.\n\nSimple Python math\nAs shown above, Python can be used as a simple calculator. Remember, you can press Shift + Enter to execute the code in the cells below. Try it out by typing some simple math into new cells and see what you get.\n\n42 * 12\n\n504\n\n\n\n12 / 3\n\n4.0\n\n\nIf you want to edit and re-run some code, change the cell and press Shift + Enter to execute the modified code.\n\n\nFunctions\nYou can use Python for more advanced math by using a function. Functions are pieces of code that perform a single action, such as printing information to the screen (e.g., the print() function). Functions exist for a huge number of operations in Python.\nLet’s try out a few simple examples using functions to find the sine or square root of a value. You can type sin(3) or sqrt(4) into the cells below to test this out.\n\nsin(3)\n\nNameError: name 'sin' is not defined\n\n\n\nsqrt(4)\n\nNameError: name 'sqrt' is not defined\n\n\nWell, that didn’t work. Python can calculate square roots or do basic trigonometry, but we need one more step.\n\nMath operations\nThe table below shows the list of basic arithmetic operations that can be done by default in Python.\n\n\n\nOperation\nSymbol\nExample syntax\nReturned value\n\n\n\n\nAddition\n+\n2 + 2\n4\n\n\nSubtraction\n-\n4 - 2\n2\n\n\nMultiplication\n*\n2 * 3\n6\n\n\nDivision\n/\n4 / 2\n2\n\n\nExponentiation\n**\n2 ** 3\n8\n\n\n\nFor anything more advanced, we need to load a module or a package. For math operations, this module is called math and can be loaded by typing import math.\n\nimport math\n\nNow that we have access to functions in the math module, we can use it by typing the module name, a period (dot), and the name of the function we want to use. For example, math.sin(3). Try this with the sine and square root examples from above.\n\nmath.sin(3)\n\n0.1411200080598672\n\n\n\nmath.sqrt(4)\n\n2.0\n\n\nLet’s summarise what you’ve just done with modules:\n\nA module is a group of code items, such as functions, related to one another. Individual modules are often in a group called a package.\nModules can be loaded using import. Functions that are part of the module modulename can then be used by typing modulename.functionname(). For example, sin() is a function that is part of the math module and is used by typing math.sin() with some number between the parentheses.\nWithin a Jupyter Notebook, the variables you defined earlier in the notebook will be available for use in the following cells as long as you have executed the cells.\nModules may also contain constants such as math.pi (notice no parentheses at the end). Type this in the cell below to see the constant’s math.pi value.\n\n\nmath.pi\n\n3.141592653589793\n\n\n\n\nCheck your understanding\nUse the empty Python cell to calculate the sine of pi. What value do you expect for this calculation? Did you get the desired result?\n\n\nCode\n# Here is an example solution\nmath.sin(math.pi)\n\n\n\n\nCombining functions\nFunctions can also be combined. The print() function returns values within the parentheses as text on the screen. Below, try printing the value of the square root of four.\n\nprint(math.sqrt(4))\n\n2.0\n\n\nYou can also combine text with other calculated values using the print() function. For example, print('Two plus two is', 2+2) would generate the text reading 'Two plus two is 4'. Combine the print() function with the math.sqrt() function in the cell below to produce text that reads 'The square root of 4 is 2.0'.\n\nprint(\"The square root of 4 is\", math.sqrt(4))\n\nThe square root of 4 is 2.0\n\n\n\n\n\nVariables\nA variable can store values calculated in expressions and used for other calculations. Assigning value to variables is straightforward. To assign a value, you type variable_name = value, where variable_name is the name of the variable you wish to define. In the cell below, define a variable called temp_celsius, assign it a value of 10.0, and then print that variable value using the print() function. Note that you should do this on two separate lines.\n\ntemp_celsius = 10.0\nprint(temp_celsius)\n\n10.0\n\n\nAs we did above, you can combine text and even use some math when printing out variable values. The idea is similar to adding 2+2 or calculating the square root of four from the previous section. In the cell below, print out the value of temp_celsius in degrees Fahrenheit by multiplying temp_celsius by 9/5 and adding 32. This should be done within the print() function to produce output that reads 'Temperature in Fahrenheit: 50.0'.\n\nprint(\"Temperature in Fahrenheit:\", 9 / 5 * temp_celsius + 32)\n\nTemperature in Fahrenheit: 50.0\n\n\n\nCheck your understanding\nUse the empty Python cell below to define a variable and print its value to the screen using the print() function. The variable value can be anything you like, and you can even consider defining several variables and printing them out together. Consider using pothole_case_naming for your variable name.\n\n\nCode\n# Here is an example solution\npart1 = \"I like\"\npart2 = \"Python!\"\nprint(part1, part2)\n\n\n\n\n\nUpdating variables\nValues stored in variables can also be updated. Let’s redefine the value of temp_celsius to be equal to 15.0 and print its value in the cells below.\n\ntemp_celsius = 15.0\n\n\nprint(\"temperature in Celsius is now:\", temp_celsius)\n\ntemperature in Celsius is now: 15.0\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you try to run some code that accesses a variable that has not yet been defined, you will get a NameError message. Try printing out the value of the variable temp_fahrenheit using the print() function in the cell below.\n\n\n\nprint(\"Temperature in Celsius:\", 5 / 9 * (temp_fahrenheit - 32))\n\nNameError: name 'temp_fahrenheit' is not defined\n\n\n\n\n\n\n\n\nNote\n\n\n\nOne of the interesting things here is that if we define the undefined variable in a cell lower down in the notebook and execute that cell, we can return to the earlier cell, and the code should now work. That was a bit of a complicated sentence, so let’s test this all out. First, let’s define a variable called temp_fahrenheit in the cell below and assign it to be equal to 9/5 * temp_celsius + 32, the conversion factor from temperatures in Celsius to Fahrenheit. Then, return to the cell above this text and run that cell again. See how the error message has gone away? temp_fahrenheit has now been defined, and thus, the cell above no longer generates a NameError when the code is executed.\nAlso, the number beside the cell, for example, In [2], tells you the order in which the Python cells have been executed. This way, you can see a history of the order in which you have run the cells.\n\n\n\ntemp_fahrenheit = 9 / 5 * temp_celsius + 32\n\nTo check their current values, print out the values of temp_celsius and temp_fahrenheit in the cell below.\n\nprint(\"temperature in Celsius:\", temp_celsius, \"and in Fahrenheit:\", temp_fahrenheit)\n\ntemperature in Celsius: 15.0 and in Fahrenheit: 59.0\n\n\n\n\nData types\nA data type determines the characteristics of data in a program. There are four basic data types in Python, as shown in the table below.\n\n\n\nData type name\nData type\nExample\n\n\n\n\nint\nWhole integer values\n4\n\n\nfloat\nDecimal values\n3.1415\n\n\nstr\nCharacter strings\n'Hot'\n\n\nbool\nTrue/false values\nTrue\n\n\n\nThe data type can be found using the type() function. As you will see, the data types are essential because some are incompatible.\nLet’s define a variable weather_forecast and assign it the value 'Hot'. After this, we can check its data type using the type() function.\n\nweather_forecast = \"Hot\"\ntype(weather_forecast)\n\nstr\n\n\nLet’s also check the type of temp_fahrenheit. What happens if you try to combine temp_fahrenheit and weather_forecast in a single math equation such as temp_fahrenheit = temp_fahrenheit + 5.0 * weather_forecast?\n\ntype(temp_fahrenheit)\n\nfloat\n\n\n\ntemp_fahrenheit = temp_fahrenheit + 5.0 * weather_forecast\n\nTypeError: can't multiply sequence by non-int of type 'float'\n\n\nIn this case, we get at TypeError because we are trying to execute a math operation with data types that are not compatible. There is no way in Python to multiply numbers with a character string.\n\nCheck your understanding\nAs it turns out, you can do some math with character strings in Python. Define two variables and assign them character string values in the Python cell below. What happens if you try to add two character strings together? Can you subtract them? Which other math operations work for character strings?\n\n\nCode\n# Here is an example solution\n\nfirst_variable = \"Python\"\nsecond_variable = \" is cool!\"\n\nprint(first_variable + second_variable)\nprint(5 * first_variable)\nprint(first_variable - second_variable)"
  },
  {
    "objectID": "chapter_01/hands_on.html#acknowledgements",
    "href": "chapter_01/hands_on.html#acknowledgements",
    "title": "Jupyter and Python",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe ‘Let the snake in’ section is derived from A taste of Python section of the Geo-Python course 2022 by D. Whipp, H. Tenkanen, V. Heikinheimo, H. Aagesen, and C. Fink from the Department of Geosciences and Geography, University of Helsinki, licensed under CC-BY-SA 4.0."
  },
  {
    "objectID": "chapter_01/exercise.html",
    "href": "chapter_01/exercise.html",
    "title": "Understanding Notebooks",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nThis is a “You do” part of the first lesson.\nYou now know what a Jupyter Notebook is, how to work with it in Jupyter Lab (or Google Colab) and how to run Python code in its cells. Let’s now move attention to cells with text."
  },
  {
    "objectID": "chapter_01/exercise.html#master-markdown",
    "href": "chapter_01/exercise.html#master-markdown",
    "title": "Understanding Notebooks",
    "section": "Master Markdown",
    "text": "Master Markdown\nThe text in Jupyter Notebooks is formatted using Markdown, a straightforward syntax allowing you to format text, embed images or tables, and keep everything as plain text.\nFor this task, you will focus on getting to know Markdown better. To practise its syntax, try to reproduce the following Wikipedia entry:\n\nhttps://en.wikipedia.org/wiki/Waldo_R._Tobler\n\nYou should be able to figure out the proper Markdown syntax by yourself, with some help from your favourite search engine or AI (yes, usage of AI tools like ChatGPT or Bard is allowed and possible even encouraged in this course).\n\n\n\n\n\n\nTip\n\n\n\nDo not overthink it. Focus on correctly formatting the bold, italics, links, headlines, and lists, but don’t worry too much about the overall layout. Bonus if you also manage to insert the image (it does not need to be properly placed as on the original page)!"
  },
  {
    "objectID": "chapter_01/exercise.html#play-with-the-math-module",
    "href": "chapter_01/exercise.html#play-with-the-math-module",
    "title": "Understanding Notebooks",
    "section": "Play with the math module",
    "text": "Play with the math module\nPlay a bit more with the math module you have explored in the previous section.\n\nCan you figure out how to round numbers?\nCan you create the natural logarithm of a variable? And can you get the original value back?\nHow would you do the base-10 logarithm?\nCan you convert an angle from radians to degrees and back?\nCan you figure out what the math.nan constant is for?\nWhich other constants are available in the math module?\n\nDon’t forget to document your code cells with Markdown cells.\n\n\n\n\n\n\nTip\n\n\n\nYou don’t need to answer all of the questions, but try if you have time. A good place to start would be a documentation of the math module but that is up to you."
  },
  {
    "objectID": "chapter_04/concepts.html",
    "href": "chapter_04/concepts.html",
    "title": "Space as math",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Weights from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_02/hands_on.html",
    "href": "chapter_02/hands_on.html",
    "title": "Data wrangling",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nYou know the basics. What are Jupyter notebooks, how do they work, and how do you run Python in them. It is time to start using them for data science (no, that simple math you did the last time doesn’t count as data science).\nYou are about to enter the PyData ecosystem. It means that you will start learning how to work with Python from the middle. This course does not explicitly cover the fundamentals of programming. It is expected that those parts you need you’ll be able to pick as you go through the specialised data science stack. If you’re stuck, confused or need further explanation, use Google (or your favourite search engine), ask AI to explain the code or ask in Slack or during the class. Not everything will be told during the course (by design), and the internet is a friend of every programmer, so let’s figure out how to use it efficiently from the beginning.\nLet’s dig in!"
  },
  {
    "objectID": "chapter_02/hands_on.html#munging-and-wrangling",
    "href": "chapter_02/hands_on.html#munging-and-wrangling",
    "title": "Data wrangling",
    "section": "Munging and wrangling",
    "text": "Munging and wrangling\nReal-world datasets are messy. There is no way around it: datasets have “holes” (missing data), the amount of formats in which data can be stored is endless, and the best structure to share data is not always the optimum to analyse them, hence the need to munge1 them. As has been correctly pointed out in many outlets, much of the time spent in what is called Data Science is related not only to sophisticated modelling and insight but has to do with much more basic and less exotic tasks such as obtaining data, processing, and turning them into a shape that makes analysis possible, and exploring it to get to know their basic properties.\nSurprisingly, very little has been published on patterns, techniques, and best practices for quick and efficient data cleaning, manipulation, and transformation because of how labour-intensive and relevant this aspect is. In this session, you will use a few real-world datasets and learn how to process them into Python so they can be transformed and manipulated, if necessary, and analysed. For this, you will introduce some of the bread and butter of data analysis and scientific computing in Python. These are fundamental tools that are constantly used in almost any task relating to data analysis.\nThis notebook covers the basics and the content that is expected to be learnt by every student. You use a prepared dataset that saves us much of the more intricate processing that goes beyond the introductory level the session is aimed at. If you are interested in how it was done, there is a notebook.\nThis notebook discusses several patterns to clean and structure data properly, including tidying, subsetting, and aggregating. You finish with some basic visualisation. An additional extension presents more advanced tricks to manipulate tabular data."
  },
  {
    "objectID": "chapter_02/hands_on.html#dataset",
    "href": "chapter_02/hands_on.html#dataset",
    "title": "Data wrangling",
    "section": "Dataset",
    "text": "Dataset\nYou will be exploring demographic characteristics of Chicago in 1918 linked to the influenza mortality during the pandemic that happened back then, coming from the research paper by Grantz et al. (2016). The data are aggregated to census tracts and contain information on unemployment, home ownership, age structure and influenza mortality from a period of 8 weeks.\nThe main tool you use is the pandas package. As with the math you used before, you must import it first.\n\n1import pandas as pd\n\n\n1\n\nImport the pandas package under the alias pd. Using the alias is not necessary, but it is a convention nearly everyone follows.\n\n\n\n\nThe data is stored in a CSV file. To make things easier, you can read data from a file posted online so, for now, you do not need to download any dataset:\n\n1chicago_1918 = pd.read_csv(\n2    \"https://martinfleischmann.net/sds/chapter_02/data/chicago_influenza_1918.csv\",\n3    index_col=\"geography_code\",\n)\n\n\n1\n\nUse the read_csv function from pandas. Remember that you have imported pandas as pd.\n\n2\n\nSpecify the path to the file. It could be a web address like here or a local file path.\n\n3\n\nUse the column geography_code as an index of the table by passing its name to the index_col keyword argument. It is not strictly necessary but allows us to choose and index on reading instead of specifying it later. More on indices below.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou are using read_csv because the file you want to read is in CSV format. However, pandas allows for many more formats to be read and write. A full list of formats supported may be found in the documentation.\n\n\n\n\n\n\n\n\nAlternative\n\n\n\nInstead of reading the file directly off the web, it is possible to download it manually, store it on your computer, and read it locally. To do that, you can follow these steps:\n\nDownload the file by right-clicking on this link and saving the file\nPlace the file in the same folder as the notebook where you intend to read it\nReplace the code in the cell above with:\n\nchicago_1918 = pd.read_csv(\n    \"chicago_influenza_1918.csv\",\n    index_col=\"geography_code\",\n)"
  },
  {
    "objectID": "chapter_02/hands_on.html#pandas-101",
    "href": "chapter_02/hands_on.html#pandas-101",
    "title": "Data wrangling",
    "section": "Pandas 101",
    "text": "Pandas 101\nNow, you are ready to start playing and interrogating the dataset! What you have at your fingertips is a table summarising, for each of the census tracts in Chicago more than a century ago, how many people lived in each by age, accompanied by some other socioeconomic data and influenza mortality. These tables are called DataFrame objects, and they have a lot of functionality built-in to explore and manipulate the data they contain. Let’s explore a few of those cool tricks!\n\nData Structures\nThe first aspect worth spending a bit of time on is the structure of a DataFrame. You can print it by simply typing its name:\n\nchicago_1918\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n496 rows × 12 columns\n\n\n\nNote the printing is cut to keep a nice and compact view but enough to see its structure. Since they represent a table of data, DataFrame objects have two dimensions: rows and columns. Each of these is automatically assigned a name in what you will call its index. When printing, the index of each dimension is rendered in bold, as opposed to the standard rendering for the content. The example above shows how the column index is automatically picked up from the .csv file’s column names. For rows, we have specified when reading the file you wanted the column geography_code, so that is used. If you hadn’t set any, pandas would automatically generate a sequence starting in 0 and going all the way to the number of rows minus one. This is the standard structure of a DataFrame object, so you will come to it over and over. Importantly, even when you move to spatial data, your datasets will have a similar structure.\nOne final feature that is worth mentioning about these tables is that they can hold columns with different types of data. In this example, you have counts (or int for integer types) and ratios (or ‘float’ for floating point numbers - a number with decimals) for each column. But it is useful to keep in mind that you can combine this with columns that hold other types of data such as categories, text (str, for string), dates or, as you will see later in the course, geographic features.\nTo extract a single column from this DataFrame, specify its name in the square brackets ([]). Note that the name, in this case, is a string. A piece of text. As such, it needs to be within single (') or double quotes (\"). The resulting data structure is no longer a DataFrame, but you have a Series because you deal with a single column.\n\nchicago_1918[\"influenza\"]\n\ngeography_code\nG17003100001     9\nG17003100002     6\nG17003100003     8\nG17003100004     2\nG17003100005     7\n                ..\nG17003100492    12\nG17003100493    40\nG17003100494    85\nG17003100495    15\nG17003100496    30\nName: influenza, Length: 496, dtype: int64\n\n\n\n\nInspect\nInspecting what it looks like. You can check the table’s top (or bottom) X lines by passing X to the method head (tail). For example, for the top/bottom five lines:\n\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n\n\n\n\n\n\n\n\nchicago_1918.tail()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100492\n2176.6\n136\n0.404430\n0.173351\n85\n606\n520\n705\n439\n2141\n1460\n12\n\n\nG17003100493\n680.0\n271\n0.377207\n0.130158\n243\n1349\n957\n1264\n957\n4653\n2180\n40\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n\n\nG17003100495\n640.0\n167\n0.311917\n0.085667\n59\n333\n206\n193\n80\n726\n224\n15\n\n\nG17003100496\n709.8\n340\n0.369765\n0.113549\n157\n979\n761\n959\n594\n2862\n1206\n30\n\n\n\n\n\n\n\nOr get an overview of the table:\n\nchicago_1918.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 496 entries, G17003100001 to G17003100496\nData columns (total 12 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   gross_acres     496 non-null    float64\n 1   illit           496 non-null    int64  \n 2   unemployed_pct  496 non-null    float64\n 3   ho_pct          496 non-null    float64\n 4   agecat1         496 non-null    int64  \n 5   agecat2         496 non-null    int64  \n 6   agecat3         496 non-null    int64  \n 7   agecat4         496 non-null    int64  \n 8   agecat5         496 non-null    int64  \n 9   agecat6         496 non-null    int64  \n 10  agecat7         496 non-null    int64  \n 11  influenza       496 non-null    int64  \ndtypes: float64(3), int64(9)\nmemory usage: 66.5+ KB\n\n\n\n\nSummarise\nOr of the values of the table:\n\nchicago_1918.describe()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\n\n\n\n\ncount\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n496.000000\n\n\nmean\n233.245968\n199.116935\n0.345818\n0.061174\n102.370968\n555.167339\n406.560484\n524.100806\n416.044355\n2361.582661\n1052.681452\n16.070565\n\n\nstd\n391.630857\n297.836201\n0.050498\n0.038189\n78.677423\n423.526444\n301.564896\n369.875444\n281.825682\n1545.469426\n722.955717\n12.252440\n\n\nmin\n6.900000\n0.000000\n0.057800\n0.000000\n0.000000\n3.000000\n1.000000\n4.000000\n0.000000\n8.000000\n6.000000\n0.000000\n\n\n25%\n79.975000\n30.750000\n0.323973\n0.032106\n46.750000\n256.500000\n193.500000\n253.750000\n220.500000\n1169.750000\n519.750000\n8.000000\n\n\n50%\n99.500000\n84.000000\n0.353344\n0.054389\n82.000000\n442.500000\n331.500000\n453.500000\n377.000000\n2102.000000\n918.500000\n13.500000\n\n\n75%\n180.125000\n241.250000\n0.373382\n0.084762\n136.000000\n717.500000\n532.500000\n709.500000\n551.750000\n3191.750000\n1379.250000\n21.000000\n\n\nmax\n3840.000000\n2596.000000\n0.495413\n0.197391\n427.000000\n2512.000000\n1917.000000\n2665.000000\n2454.000000\n9792.000000\n4163.000000\n85.000000\n\n\n\n\n\n\n\nNote how the output is also a DataFrame object, so you can do with it the same things you would with the original table (e.g. writing it to a file).\nIn this case, the summary might be better presented if the table is “transposed”:\n\nchicago_1918.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ngross_acres\n496.0\n233.245968\n391.630857\n6.9000\n79.975000\n99.500000\n180.125000\n3840.000000\n\n\nillit\n496.0\n199.116935\n297.836201\n0.0000\n30.750000\n84.000000\n241.250000\n2596.000000\n\n\nunemployed_pct\n496.0\n0.345818\n0.050498\n0.0578\n0.323973\n0.353344\n0.373382\n0.495413\n\n\nho_pct\n496.0\n0.061174\n0.038189\n0.0000\n0.032106\n0.054389\n0.084762\n0.197391\n\n\nagecat1\n496.0\n102.370968\n78.677423\n0.0000\n46.750000\n82.000000\n136.000000\n427.000000\n\n\nagecat2\n496.0\n555.167339\n423.526444\n3.0000\n256.500000\n442.500000\n717.500000\n2512.000000\n\n\nagecat3\n496.0\n406.560484\n301.564896\n1.0000\n193.500000\n331.500000\n532.500000\n1917.000000\n\n\nagecat4\n496.0\n524.100806\n369.875444\n4.0000\n253.750000\n453.500000\n709.500000\n2665.000000\n\n\nagecat5\n496.0\n416.044355\n281.825682\n0.0000\n220.500000\n377.000000\n551.750000\n2454.000000\n\n\nagecat6\n496.0\n2361.582661\n1545.469426\n8.0000\n1169.750000\n2102.000000\n3191.750000\n9792.000000\n\n\nagecat7\n496.0\n1052.681452\n722.955717\n6.0000\n519.750000\n918.500000\n1379.250000\n4163.000000\n\n\ninfluenza\n496.0\n16.070565\n12.252440\n0.0000\n8.000000\n13.500000\n21.000000\n85.000000\n\n\n\n\n\n\n\nEqually, common descriptive statistics are also available. To obtain minimum values for each column, you can use .min().\n\nchicago_1918.min()\n\ngross_acres       6.9000\nillit             0.0000\nunemployed_pct    0.0578\nho_pct            0.0000\nagecat1           0.0000\nagecat2           3.0000\nagecat3           1.0000\nagecat4           4.0000\nagecat5           0.0000\nagecat6           8.0000\nagecat7           6.0000\ninfluenza         0.0000\ndtype: float64\n\n\nOr to obtain a minimum for a single column only.\n\nchicago_1918[\"influenza\"].min()\n\n0\n\n\nNote here how you have restricted the calculation of the minimum value to one column only by getting the Series and calling .min() on that.\nSimilarly, you can restrict the calculations to a single row using .loc[] indexer:\n\nchicago_1918.loc[\"G17003100492\"].max()\n\n2176.6\n\n\n\n\nCreate new columns\nYou can generate new variables by applying operations to existing ones. For example, you can calculate the total population by area. Here are a couple of ways to do it:\n\n# This one is longer, hardcoded\n1total_population = (\n2    chicago_1918[\"agecat1\"]\n    + chicago_1918[\"agecat2\"]\n    + chicago_1918[\"agecat3\"]\n    + chicago_1918[\"agecat4\"]\n    + chicago_1918[\"agecat5\"]\n    + chicago_1918[\"agecat6\"]\n    + chicago_1918[\"agecat7\"]\n)\n3total_population.head()\n\n\n1\n\nCreate a new variable called total_population to store the result.\n\n2\n\nSelect all the columns and add them together\n\n3\n\nPrint the top of the variable\n\n\n\n\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n\n\n\n# This one is shorted, using a range of columns and sum\n1total_population = chicago_1918.loc[:, \"agecat1\":\"agecat7\"].sum(axis=1)\ntotal_population.head()\n\n\n1\n\nThis line is simple, but a lot happens here. Using .loc[], you select all the rows (: part) and all the columns between \"agecat1\" and \"agecat7\". Then you apply .sum() over axis=1, which means along rows, to get a sum per each row.\n\n\n\n\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n\n\nOnce you have created the variable, you can make it part of the table:\n\n1chicago_1918[\"total_population\"] = total_population\nchicago_1918.head()\n\n\n1\n\nAssing a variable total_population that contains a Series as a column \"total_population\". pandas creates that column automatically. If it existed, it would get overridden.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n\n\n\n\n\n\n\nYou can also do other mathematical operations on columns. These are always automatically applied to individual values in corresponding rows.\n\n1homeowners = chicago_1918[\"total_population\"] * chicago_1918[\"ho_pct\"]\nhomeowners.head()\n\n\n1\n\nA product of the total population and home ownership percentage provides an estimation of the number of homeowners per census tract.\n\n\n\n\ngeography_code\nG17003100001    351.875177\nG17003100002    233.928353\nG17003100003    209.628319\nG17003100004     78.879711\nG17003100005    468.237675\ndtype: float64\n\n\n\n1pop_density = chicago_1918[\"total_population\"] / chicago_1918[\"gross_acres\"]\npop_density.head()\n\n\n1\n\nA division of the total population by the area results in an estimation of the population density.\n\n\n\n\ngeography_code\nG17003100001     2.030687\nG17003100002    14.997703\nG17003100003     5.621729\nG17003100004    30.184120\nG17003100005    16.398695\ndtype: float64\n\n\nA different spin on this is assigning new values: you can generate new variables with scalars2, and modify those:\n\n1chicago_1918[\"ones\"] = 1\nchicago_1918.head()\n\n\n1\n\nCreate a new column named \"ones\" with all ones.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nones\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n1\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n1\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n1\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n1\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n1\n\n\n\n\n\n\n\nAnd you can modify specific values too:\n\nchicago_1918.loc[\"G17003100001\", \"ones\"] = 3\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nones\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n3\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n1\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n1\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n1\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n1\n\n\n\n\n\n\n\n\n\nRemove columns\nPermanently deleting variables is also within reach of one command:\n\nchicago_1918 = chicago_1918.drop(columns=\"ones\")\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n\n\n\n\n\n\n\n\n\nIndex-based queries\nHere, you explore how to subset parts of a DataFrame if you know exactly which bits you want. For example, if you want to extract the influenza mortality and total population of the first four areas in the table, you use loc with lists:\n\n1death_pop_first4 = chicago_1918.loc[\n2    [\"G17003100001\", \"G17003100002\", \"G17003100003\", \"G17003100004\"],\n3    [\"influenza\", \"total_population\"],\n]\ndeath_pop_first4\n\n\n1\n\nloc takes two inputs. Selection of rows and selection of columns. If the latter is not present, it is assumed that all the columns are selected. The same could be achieved by using :.\n\n2\n\nA list of index values. Note that you use squared brackets ([]) to delineate the index of the items you want to subset. In Python, this sequence of items is called a list.\n\n3\n\nA list of columns.\n\n\n\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100001\n9\n2819\n\n\nG17003100002\n6\n3265\n\n\nG17003100003\n8\n2256\n\n\nG17003100004\n2\n2623\n\n\n\n\n\n\n\nYou can see how you can create a list with the names (index IDs) along each of the two dimensions of a DataFrame (rows and columns), and loc will return a subset of the original table only with the elements queried for.\nAn alternative to list-based queries is what is called “range-based” queries. These work on the indices of the table, but instead of requiring the ID of each item you want to retrieve, they operate by requiring only two IDs: the first and last element in a range of items. Range queries are expressed with a colon (:). For example:\n\nrange_query = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\",\n    \"influenza\":'total_population',\n]\nrange_query\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100010\n18\n11380\n\n\nG17003100011\n16\n8382\n\n\nG17003100012\n8\n5874\n\n\n\n\n\n\n\nThe range query picks up all the elements between the specified IDs. Note that for this to work, the first ID in the range needs to be placed before the second one in the table’s index.\nOnce you know about list and range-based queries, you can combine them! For example, you can specify a range of rows and a list of columns:\n\nrange_list_qry = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\", [\"influenza\", \"total_population\"]\n]\n\nrange_list_qry\n\n\n\n\n\n\n\n\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\nG17003100010\n18\n11380\n\n\nG17003100011\n16\n8382\n\n\nG17003100012\n8\n5874\n\n\n\n\n\n\n\n\n\nCondition-based queries\nHowever, sometimes, you do not know exactly which observations you want, but you do know what conditions they need to satisfy (e.g. areas with more than 2,000 inhabitants). For these cases, DataFrames support selection based on conditions. Let us see a few examples. Suppose you want to select…\n… areas with more than 60 cases of influenza deaths:\n\nflu_over_60 = chicago_1918.loc[chicago_1918[\"influenza\"] &gt; 60]\nflu_over_60\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\n\n\n\n\n\n… areas with less than 200 inhabitants:\n\npop_under = chicago_1918.loc[chicago_1918[\"total_population\"] &lt; 200]\npop_under\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100093\n71.2\n34\n0.268041\n0.025773\n4\n33\n20\n25\n10\n66\n36\n0\n194\n\n\nG17003100293\n40.0\n17\n0.345238\n0.053571\n4\n23\n18\n26\n16\n59\n22\n0\n168\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n\n\nG17003100353\n320.0\n28\n0.193750\n0.018750\n1\n7\n4\n10\n12\n80\n46\n2\n160\n\n\nG17003100488\n1600.1\n3\n0.404762\n0.000000\n2\n5\n4\n7\n1\n17\n6\n0\n42\n\n\n\n\n\n\n\n… areas with exactly a hundred illiterate persons:\n\nillit_100 = chicago_1918.loc[chicago_1918[\"illit\"] == 100]\nillit_100\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100076\n79.4\n100\n0.326936\n0.043691\n140\n791\n562\n666\n520\n3163\n1496\n20\n7338\n\n\nG17003100483\n670.0\n100\n0.379153\n0.142368\n188\n1170\n829\n1132\n763\n3191\n1482\n21\n8755\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnlimited power\n\n\n\nThese queries can grow in sophistication with almost no limits. For example, here is a case where you want to find out the areas where the oldest age group is more than half the population:\n\nchicago_1918.loc[\n    (chicago_1918[\"agecat7\"] * 100 / chicago_1918[\"total_population\"]) &gt; 50\n]\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100227\n146.3\n22\n0.0657\n0.000853\n2\n16\n9\n22\n27\n480\n614\n3\n1170\n\n\n\n\n\n\n\n\n\nAll the condition-based queries above are expressed using the loc operator. This is a powerful way, and since it shares syntax with index-based queries, it is also easier to remember. However, sometimes querying using loc involves a lot of quotation marks, parenthesis, etc. A more streamlined approach for condition-based queries of rows is provided by the query engine. Using this approach, you express everything in our query on a single string, or piece of text, and that is evaluated in the table at once. For example, you can run the same operation as in the first query above with the following syntax:\n\nflu_over_60_query = chicago_1918.query(\"influenza &gt; 60\")\nflu_over_60_query\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\n\n\n\n\n\nIf you want to combine operations, this is also possible:\n\nflu_query = chicago_1918.query(\"(influenza &gt; 60) & (total_population &lt; 10000)\")\nflu_query\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\n\n\n\n\n\nNote that, in these cases, using query results in code that is much more streamlined and easier to read. However, query is not perfect and, particularly for more sophisticated queries, it does not afford the same degree of flexibility. For example, the last query we had using loc would not be possible using query.\n\n\n\n\n\n\nTip\n\n\n\nIf you are interested, more detail about query is available in the pandas documentation.\n\n\n\n\nCombining queries\nNow, all of these queries can be combined with each other for further flexibility. For example, imagine you want areas with more than 60 cases of influenza from areas with less than 10,000 inhabitants:\n\nflu_loc = chicago_1918.loc[\n    (chicago_1918[\"influenza\"] &gt; 60)\n1    & (chicago_1918[\"total_population\"] &lt; 10000)\n]\nflu_loc\n\n\n1\n\nThe & operator combines both conditions together.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\nG17003100247\n91.1\n1534\n0.293748\n0.020664\n215\n1136\n770\n775\n530\n2993\n1152\n61\n7571\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do the loc queries work?\n\n\n\n\n\nLet’s unpack how these queries work. Each part of the query above creates a single Series with boolean (True or False) values, encoding whether the row fulfils the condition or not.\n\nchicago_1918[\"influenza\"] &gt; 60\n\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494     True\nG17003100495    False\nG17003100496    False\nName: influenza, Length: 496, dtype: bool\n\n\n\nchicago_1918[\"total_population\"] &lt; 10000\n\ngeography_code\nG17003100001     True\nG17003100002     True\nG17003100003     True\nG17003100004     True\nG17003100005     True\n                ...  \nG17003100492     True\nG17003100493    False\nG17003100494    False\nG17003100495     True\nG17003100496     True\nName: total_population, Length: 496, dtype: bool\n\n\nYou then combine two of these Series with &, asking for a new Series where values in both the first and the second Series are True.\n\n(chicago_1918[\"influenza\"] &gt; 60) & (chicago_1918[\"total_population\"] &lt; 10000)\n\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494    False\nG17003100495    False\nG17003100496    False\nLength: 496, dtype: bool\n\n\nSuch a Series is then essentially used as a mask, and loc returns only those columns that contain True in that mask.\n\n\n\n\n\nSorting\nAmong the many operations DataFrame objects support, one of the most useful ones is to sort a table based on a given column. For example, imagine you want to sort the table by the influenza cases:\n\n1chicago_sorted = chicago_1918.sort_values('influenza', ascending=False)\nchicago_sorted\n\n\n1\n\nBy default, pandas is sorting from the smallest to the largest values (ascending). By specifying ascending=False, you switch the order.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100494\n1392.8\n1504\n0.336032\n0.072317\n309\n1779\n1252\n1598\n1086\n6235\n2673\n85\n14932\n\n\nG17003100285\n120.0\n621\n0.318677\n0.047779\n419\n1870\n1190\n1263\n818\n4370\n1335\n82\n11265\n\n\nG17003100246\n113.0\n2596\n0.330517\n0.027537\n407\n2090\n1497\n1681\n1063\n4564\n1934\n77\n13236\n\n\nG17003100352\n600.0\n638\n0.267962\n0.055023\n404\n1962\n1251\n1151\n603\n5261\n1251\n70\n11883\n\n\nG17003100196\n80.5\n951\n0.301564\n0.016648\n228\n1504\n925\n998\n608\n3583\n1092\n62\n8938\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100209\n124.1\n13\n0.438105\n0.062971\n30\n120\n92\n196\n166\n763\n491\n0\n1858\n\n\nG17003100093\n71.2\n34\n0.268041\n0.025773\n4\n33\n20\n25\n10\n66\n36\n0\n194\n\n\nG17003100396\n26.2\n8\n0.344066\n0.015639\n14\n54\n31\n53\n48\n609\n275\n0\n1084\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n\n\nG17003100488\n1600.1\n3\n0.404762\n0.000000\n2\n5\n4\n7\n1\n17\n6\n0\n42\n\n\n\n\n496 rows × 13 columns\n\n\n\nGiven the areas of each census tract differ, it may be better to sort by the mortality rate rather than raw counts.\n\n1chicago_1918[\"flu_rate\"] = (\n    chicago_1918[\"influenza\"] / chicago_1918[\"total_population\"]\n)\n2chicago_sorted_rel = chicago_1918.sort_values('flu_rate', ascending=False)\nchicago_sorted_rel\n\n\n1\n\nCompute the relative rate and assign it as a new column.\n\n2\n\nSort values by this new column.\n\n\n\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nflu_rate\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100086\n140.7\n153\n0.331750\n0.034838\n39\n179\n144\n197\n111\n399\n189\n26\n1258\n0.020668\n\n\nG17003100022\n233.2\n20\n0.369973\n0.107239\n6\n28\n35\n48\n28\n151\n77\n7\n373\n0.018767\n\n\nG17003100261\n164.9\n287\n0.307767\n0.031068\n25\n126\n92\n113\n87\n414\n172\n18\n1029\n0.017493\n\n\nG17003100282\n293.5\n97\n0.142330\n0.044248\n15\n70\n67\n74\n198\n758\n173\n20\n1355\n0.014760\n\n\nG17003100249\n137.0\n317\n0.337257\n0.017202\n63\n314\n277\n345\n171\n718\n320\n31\n2208\n0.014040\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nG17003100202\n13.1\n6\n0.323326\n0.027714\n5\n40\n24\n37\n28\n218\n78\n0\n430\n0.000000\n\n\nG17003100396\n26.2\n8\n0.344066\n0.015639\n14\n54\n31\n53\n48\n609\n275\n0\n1084\n0.000000\n\n\nG17003100293\n40.0\n17\n0.345238\n0.053571\n4\n23\n18\n26\n16\n59\n22\n0\n168\n0.000000\n\n\nG17003100297\n38.1\n4\n0.461538\n0.000000\n0\n3\n1\n4\n0\n8\n10\n0\n26\n0.000000\n\n\nG17003100488\n1600.1\n3\n0.404762\n0.000000\n2\n5\n4\n7\n1\n17\n6\n0\n42\n0.000000\n\n\n\n\n496 rows × 14 columns\n\n\n\nIf you inspect the help of chicago_1918.sort_values, you will find that you can pass more than one column to sort the table by. This allows you to do so-called hierarchical sorting: sort first based on one column, if equal, then based on another column, etc."
  },
  {
    "objectID": "chapter_02/hands_on.html#visual-exploration",
    "href": "chapter_02/hands_on.html#visual-exploration",
    "title": "Data wrangling",
    "section": "Visual Exploration",
    "text": "Visual Exploration\nThe next step to continue exploring a dataset is to get a feel for what it looks like, visually. You have already learnt how to unconver and inspect specific parts of the data, to check for particular cases you might be interested in. Now, you will see how to plot the data to get a sense of the overall distribution of values. For that, you can use the plotting capabilities of pandas.\n\nHistograms\nOne of the most common graphical devices to display the distribution of values in a variable is a histogram. Values are assigned into groups of equal intervals, and the groups are plotted as bars rising as high as the number of values into the group.\nA histogram is easily created with the following command. In this case, let us have a look at the shape of the overall influenza rates:\n\n_ = chicago_1918[\"influenza\"].plot.hist()\n\n\n\n\n\n\n\n\n\n\nAssigning to _\n\n\n\n\n\npandas returns an object with the drawing from its plotting methods. Since you are in Jupyter environment, and you don’t need to work further with that object; you can assign it to _, a convention for an unused variable.\n\n\n\nHowever, the default pandas plots can be a bit dull. A better option is to use another package, called seaborn.\n\nimport seaborn as sns\n\n\n\n\n\n\n\nWhy sns?\n\n\n\n\n\nseaborn is, by convention, imported as sns. That came as a joke after Samuel Normal Seaborn, a fictional character The West Wing show.\n\n\n\nThe same plot using seaborn has a more pleasant default style and more customisability.\n\nsns.displot(chicago_1918[\"influenza\"])\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\nNote you are using sns instead of pd, as the function belongs to seaborn instead of pandas.\nYou can quickly see most of the areas have seen somewhere between 0 and 60 cases, approx. However, there are a few areas that have more, up to more than 80 cases.\n\n\nKernel Density Plots\nHistograms are useful, but they are artificial in the sense that a continuous variable is made discrete by turning the values into discrete groups. An alternative is kernel density estimation (KDE), which produces an empirical density function:\n\n1sns.displot(chicago_1918[\"influenza\"], kind=\"kde\", fill=True)\n\n\n1\n\nkind=\"kde\" specifies which type of a distribution plot should seaborn use and fill=True tells it to colour the area under the KDE curve.\n\n\n\n\n/home/runner/micromamba/envs/sds/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\nLine and bar plots\nAnother very common way of visually displaying a variable is with a line or a bar chart. For example, if you want to generate a line plot of the (sorted) total cases by area:\n\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).plot()\n\n\n\n\nFor a bar plot all you need to do is to change from plot to plot.bar. Since there are many census tracts, let us plot only the ten largest ones (which you can retrieve with head):\n\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).head(10).plot.bar()\n\n\n\n\nYou can turn the plot around by displaying the bars horizontally (see how it’s just changing bar for barh). Let’s display now the top 50 areas and, to make it more readable, let us expand the plot’s height:\n\n_ = (\n    chicago_1918[\"total_population\"]\n    .sort_values()\n    .head(50)\n    .plot.barh(figsize=(6, 20))\n)\n\n\n\n\n\n\n\n\n\n\nOne line or multiple lines?\n\n\n\nYou may have noticed that in some cases, the code is on a single line, but longer code is split into multiple lines. Python requires you to follow the indentation rules, but apart from that, there are not a lot of other limits."
  },
  {
    "objectID": "chapter_02/hands_on.html#tidy-data",
    "href": "chapter_02/hands_on.html#tidy-data",
    "title": "Data wrangling",
    "section": "Tidy data",
    "text": "Tidy data\n\n\n\n\n\n\nCaution\n\n\n\nThis section is a bit more advanced and hence considered optional. Feel free to skip it, move to the next, and return later when you feel more confident.\n\n\nOnce you can read your data in, explore specific cases, and have a first visual approach to the entire set, the next step can be preparing it for more sophisticated analysis. Maybe you are thinking of modeling it through regression, or on creating subgroups in the dataset with particular characteristics, or maybe you simply need to present summary measures that relate to a slightly different arrangement of the data than you have been presented with.\nFor all these cases, you first need what statistician, and general R wizard, Hadley Wickham calls “tidy data”. The general idea to “tidy” your data is to convert them from whatever structure they were handed in to you into one that allows convenient and standardized manipulation, and that supports directly inputting the data into what he calls “tidy” analysis tools. But, at a more practical level, what is exactly “tidy data”? In Wickham’s own words:\n\nTidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.\n\nHe then goes on to list the three fundamental characteristics of “tidy data”:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\nIf you are further interested in the concept of “tidy data”, I recommend you check out the original paper (open access) and the public repository associated with it.\nLet us bring in the concept of “tidy data” to our own Chicago dataset. First, remember its structure:\n\nchicago_1918.head()\n\n\n\n\n\n\n\n\ngross_acres\nillit\nunemployed_pct\nho_pct\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\ninfluenza\ntotal_population\nflu_rate\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n1388.2\n116\n0.376950\n0.124823\n46\n274\n257\n311\n222\n1122\n587\n9\n2819\n0.003193\n\n\nG17003100002\n217.7\n14\n0.399571\n0.071647\n35\n320\n441\n624\n276\n1061\n508\n6\n3265\n0.001838\n\n\nG17003100003\n401.3\n69\n0.349558\n0.092920\n50\n265\n179\n187\n163\n1020\n392\n8\n2256\n0.003546\n\n\nG17003100004\n86.9\n11\n0.422535\n0.030072\n43\n241\n129\n141\n123\n1407\n539\n2\n2623\n0.000762\n\n\nG17003100005\n337.1\n20\n0.431822\n0.084703\n65\n464\n369\n464\n328\n2625\n1213\n7\n5528\n0.001266\n\n\n\n\n\n\n\nThinking through tidy lenses, this is not a tidy dataset. It is not so for each of the three conditions:\n\nStarting by the last one (each type of observational unit forms a table), this dataset actually contains not one but many observational units: the different areas of Chicago, captured by geography_code; and different observatoins for each area. To tidy up this aspect, you can create separate tables. You will probably want population groups divided by age as one tidy table and flu rates as another. Start by extracting relevant columns.\n\n\n1influenza_rates = chicago_1918[[\"influenza\"]]\ninfluenza_rates.head()\n\n\n1\n\nYou are not selecting a single columns with chicago_1918[\"influenza\"] but a subset of columns. Just that the subset contains only one column, so you pass a list with a single column name as chicago_1918[[\"influenza\"]]. Notice the double brackets.\n\n\n\n\n\n\n\n\n\n\n\ninfluenza\n\n\ngeography_code\n\n\n\n\n\nG17003100001\n9\n\n\nG17003100002\n6\n\n\nG17003100003\n8\n\n\nG17003100004\n2\n\n\nG17003100005\n7\n\n\n\n\n\n\n\n\npopulation = chicago_1918.loc[:, \"agecat1\":\"agecat7\"]\npopulation.head()\n\n\n\n\n\n\n\n\nagecat1\nagecat2\nagecat3\nagecat4\nagecat5\nagecat6\nagecat7\n\n\ngeography_code\n\n\n\n\n\n\n\n\n\n\n\nG17003100001\n46\n274\n257\n311\n222\n1122\n587\n\n\nG17003100002\n35\n320\n441\n624\n276\n1061\n508\n\n\nG17003100003\n50\n265\n179\n187\n163\n1020\n392\n\n\nG17003100004\n43\n241\n129\n141\n123\n1407\n539\n\n\nG17003100005\n65\n464\n369\n464\n328\n2625\n1213\n\n\n\n\n\n\n\nAt this point, the table influenza_rates is tidy: every row is an observation, every table is a variable, and there is only one observational unit in the table.\nThe other table (population), however, is not entirely tidied up yet: there is only one observational unit in the table, true; but every row is not an observation, and there are variable values as the names of columns (in other words, every column is not a variable). To obtain a fully tidy version of the table, you need to re-arrange it in a way that every row is an age category in an area, and there are three variables: geography_code, age category, and population count (or frequency).\nBecause this is actually a fairly common pattern, there is a direct way to solve it in pandas:\n\ntidy_population = population.stack()\ntidy_population.head()\n\ngeography_code         \nG17003100001    agecat1     46\n                agecat2    274\n                agecat3    257\n                agecat4    311\n                agecat5    222\ndtype: int64\n\n\nThe method stack, well, “stacks” the different columns into rows. This fixes our “tidiness” problems but the type of object that is returning is not a DataFrame:\n\ntype(tidy_population)\n\npandas.core.series.Series\n\n\nIt is a Series, which really is like a DataFrame, but with only one column. The additional information (geography_code and age category) are stored in what is called an multi-index. You will skip these for now, so you would really just want to get a DataFrame as you know it out of the Series. This is also one line of code away:\n\ntidy_population_df = tidy_population.reset_index()\ntidy_population_df.head()\n\n\n\n\n\n\n\n\ngeography_code\nlevel_1\n0\n\n\n\n\n0\nG17003100001\nagecat1\n46\n\n\n1\nG17003100001\nagecat2\n274\n\n\n2\nG17003100001\nagecat3\n257\n\n\n3\nG17003100001\nagecat4\n311\n\n\n4\nG17003100001\nagecat5\n222\n\n\n\n\n\n\n\nTo which you can apply to renaming to make it look better:\n\ntidy_population_df = tidy_population_df.rename(\n    columns={\"level_1\": \"age_category\", 0: \"count\"}\n)\ntidy_population_df.head()\n\n\n\n\n\n\n\n\ngeography_code\nage_category\ncount\n\n\n\n\n0\nG17003100001\nagecat1\n46\n\n\n1\nG17003100001\nagecat2\n274\n\n\n2\nG17003100001\nagecat3\n257\n\n\n3\nG17003100001\nagecat4\n311\n\n\n4\nG17003100001\nagecat5\n222\n\n\n\n\n\n\n\nNow our table is fully tidied up!"
  },
  {
    "objectID": "chapter_02/hands_on.html#grouping-transforming-aggregating",
    "href": "chapter_02/hands_on.html#grouping-transforming-aggregating",
    "title": "Data wrangling",
    "section": "Grouping, transforming, aggregating",
    "text": "Grouping, transforming, aggregating\nOne of the advantage of tidy datasets is they allow to perform advanced transformations in a more direct way. One of the most common ones is what is called “group-by” operations. Originated in the world of databases, these operations allow you to group observations in a table by one of its labels, index, or category, and apply operations on the data group by group.\nFor example, given our tidy table with age categories, you might want to compute the total sum of the population by each category. This task can be split into two different ones:\n\nGroup the table in each of the different subgroups.\nCompute the sum of count for each of them.\n\nTo do this in pandas, meet one of its workhorses, and also one of the reasons why the library has become so popular: the groupby operator.\n\npop_grouped = tidy_population_df.groupby(\"age_category\")\npop_grouped\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6485fdb810&gt;\n\n\nThe object pop_grouped still hasn’t computed anything. It is only a convenient way of specifying the grouping. But this allows us then to perform a multitude of operations on it. For our example, the sum is calculated as follows:\n\n1pop_grouped.sum(numeric_only=True)\n\n\n1\n\nYou want a sum of numeric values, not strings. Try it with numeric_only=False to see the difference.\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nage_category\n\n\n\n\n\nagecat1\n50776\n\n\nagecat2\n275363\n\n\nagecat3\n201654\n\n\nagecat4\n259954\n\n\nagecat5\n206358\n\n\nagecat6\n1171345\n\n\nagecat7\n522130\n\n\n\n\n\n\n\nSimilarly, you can also obtain a summary of each group:\n\npop_grouped.describe()\n\n\n\n\n\n\n\n\ncount\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nage_category\n\n\n\n\n\n\n\n\n\n\n\n\nagecat1\n496.0\n102.370968\n78.677423\n0.0\n46.75\n82.0\n136.00\n427.0\n\n\nagecat2\n496.0\n555.167339\n423.526444\n3.0\n256.50\n442.5\n717.50\n2512.0\n\n\nagecat3\n496.0\n406.560484\n301.564896\n1.0\n193.50\n331.5\n532.50\n1917.0\n\n\nagecat4\n496.0\n524.100806\n369.875444\n4.0\n253.75\n453.5\n709.50\n2665.0\n\n\nagecat5\n496.0\n416.044355\n281.825682\n0.0\n220.50\n377.0\n551.75\n2454.0\n\n\nagecat6\n496.0\n2361.582661\n1545.469426\n8.0\n1169.75\n2102.0\n3191.75\n9792.0\n\n\nagecat7\n496.0\n1052.681452\n722.955717\n6.0\n519.75\n918.5\n1379.25\n4163.0\n\n\n\n\n\n\n\nYou will not get into it today as it goes beyond the basics this chapter wants to cover, but keep in mind that groupby allows you to not only call generic functions (like sum or describe), but also your own functions. This opens the door for virtually any kind of transformation and aggregation possible.\n\n\n\n\n\n\nAdditional reading\n\n\n\n\nA good introduction to data manipulation in Python is Wes McKinney’s “Python for Data Analysis” (McKinney 2012).\nTo explore further some of the visualization capabilities in at your fingertips, the Python library seaborn is an excellent choice. Its online tutorial is a fantastic place to start.\nA good extension is Hadley Wickham’s “Tidy data” paper (Wickham 2014), which presents a very popular way of organising tabular data for efficient manipulation."
  },
  {
    "objectID": "chapter_02/hands_on.html#acknowledgements",
    "href": "chapter_02/hands_on.html#acknowledgements",
    "title": "Data wrangling",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThis section is derived from A Course on Geographic Data Science by Arribas-Bel (2019), licensed under CC-BY-SA 4.0. The text was slightly adapted, mostly to accommodate a different dataset used."
  },
  {
    "objectID": "chapter_02/hands_on.html#footnotes",
    "href": "chapter_02/hands_on.html#footnotes",
    "title": "Data wrangling",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nData munging and data wrangling are used interchangeably. Pick the one you like.↩︎\nScalar is a single value, like a number (42) or a string (\"towel\").↩︎"
  },
  {
    "objectID": "chapter_02/exercise.html",
    "href": "chapter_02/exercise.html",
    "title": "Learning pandas",
    "section": "",
    "text": "Caution\n\n\n\nThis course material is currently under construction and is likely incomplete. The final version will be released in October 2023.\nThis section is about learning how to work with pandas by using it without much guidance. You will play with the dataset of the Scottish Index of Multiple Deprivation (SIMD). Specifically, you will load a table containing the rank of each data zone according to the overall SIMD and according to its subdomains (check the links above if you would like to learn more)."
  },
  {
    "objectID": "chapter_02/exercise.html#data-preparation",
    "href": "chapter_02/exercise.html#data-preparation",
    "title": "Learning pandas",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore you start playing with the data, you need to figure out how to read the data. It is not a CSV file this time, but XLSX. pandas is capable of reading Excel files like this one. Instead of the read_csv you used before, you just need to use read_excel this time.\nTake a second to download the dataset and check its structure in Excel before moving forward.\nYou have probably figured out that there are two sheets in this file, and you need to read the second one, called \"SIMD 2020v2 ranks\".\nLet’s start by importing pandas.\n\nimport pandas as pd\n\nSince you have the file in your Downloads folder now, you can read it from there. Or you can read it directly from gov.scot.\n\nurl = \"https://www.gov.scot/binaries/content/documents/govscot/publications/statistics/2020/01/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/documents/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/scottish-index-of-multiple-deprivation-2020-ranks-and-domain-ranks/govscot%3Adocument/SIMD%2B2020v2%2B-%2Branks.xlsx\"\n\nTo read the proper sheet, you need to specify sheet_name to read_excel. pandas will download the file for you and open it as a DataFrame.\n\nsimd = pd.read_excel(url, sheet_name=\"SIMD 2020v2 ranks\")\n\n\n\n\n\n\n\nReading a local file\n\n\n\n\n\nIf you want to read the file from your downloads folder, you will need to pass its location. That can look like this if you are on macOS:\nsimd = pd.read_excel(\n    \"/Users/martin/Downloads/SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\nOr like this if you are on Windows. Note the r in front of the string, ensuring that the backlashes (\\), common in Windows file paths, are properly interpreted. Or you can replace them with /:\nsimd = pd.read_excel(\n    r\"C:\\Users\\martin\\Downloads\\SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\nAlternatively, you can read the file from the data folder attached to this lecture. In that case, you can use a relative path.\nsimd = pd.read_excel(\n    \"data/SIMD+2020v2+-+ranks.xlsx\",\n    sheet_name=\"SIMD 2020v2 ranks\",\n)\n\n\n\nAnd you should be good to go!\n\nsimd.head()\n\n\n\n\n\n\n\n\nData_Zone\nIntermediate_Zone\nCouncil_area\nTotal_population\nWorking_age_population\nSIMD2020v2_Rank\nSIMD2020v2_Income_Domain_Rank\nSIMD2020_Employment_Domain_Rank\nSIMD2020_Health_Domain_Rank\nSIMD2020_Education_Domain_Rank\nSIMD2020_Access_Domain_Rank\nSIMD2020_Crime_Domain_Rank\nSIMD2020_Housing_Domain_Rank\n\n\n\n\n0\nS01006506\nCulter\nAberdeen City\n894\n580\n4691\n3936.0\n3220.0\n5174\n5887\n4724\n4664.0\n3248.0\n\n\n1\nS01006507\nCulter\nAberdeen City\n793\n470\n4862\n4829.0\n4481.0\n5051\n4384\n2148\n4602.0\n3486.0\n\n\n2\nS01006508\nCulter\nAberdeen City\n624\n461\n5686\n4460.0\n5110.0\n5942\n5915\n4200\n4563.5\n5342.0\n\n\n3\nS01006509\nCulter\nAberdeen City\n537\n307\n4332\n3481.0\n3229.0\n3871\n6401\n3982\n5626.0\n4394.5\n\n\n4\nS01006510\nCulter\nAberdeen City\n663\n415\n3913\n3344.0\n3448.0\n3049\n4092\n5588\n3885.0\n3736.0"
  },
  {
    "objectID": "chapter_02/exercise.html#learn-about-scotland",
    "href": "chapter_02/exercise.html#learn-about-scotland",
    "title": "Learning pandas",
    "section": "Learn about Scotland",
    "text": "Learn about Scotland\nIn the previous chapter, you learned the basics of pandas. Now is the time to use this knowledge and learn something about Scotland. The SIMD rankings are similar in structure to Chicago Influenza rates you have seen before, but not too much. Each row is allocated to a single area, but the table does not follow the “tidy” principles.\nTry answering the following questions about the dataset:\n\nWhich data zone is the most deprived (lowest ranking?) Which council area is it?\nCan you add a column with a proportion of the working age population in each data zone?\nWhich council area is, on average, the least deprived based on the Income domain?\nWhat is the total population of the “Glasgow City” council?\nCan you plot the ranking distribution in “Glasgow City”? How does it compare to the “City of Edinburgh”?\nCan you figure out how to create a scatter plot of a relationship between the education and health domain rankings?\nWhat else can you derive from the data?"
  },
  {
    "objectID": "chapter_05/concepts.html",
    "href": "chapter_05/concepts.html",
    "title": "Explore space!",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapters Global Spatial Autocorrelation and Local Spatial Autocorrelation from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_06/hands_on.html",
    "href": "chapter_06/hands_on.html",
    "title": "Point pattern analysis",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_06/exercise.html",
    "href": "chapter_06/exercise.html",
    "title": "Pointy points",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_09/concepts.html",
    "href": "chapter_09/concepts.html",
    "title": "Where is equal?",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Inequality Dynamics from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  },
  {
    "objectID": "chapter_08/hands_on.html",
    "href": "chapter_08/hands_on.html",
    "title": "Population as a raster grid",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain hands-on material that will appear later."
  },
  {
    "objectID": "chapter_08/exercise.html",
    "href": "chapter_08/exercise.html",
    "title": "Learning xarray",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will contain exercise material that will appear later."
  },
  {
    "objectID": "chapter_11/concepts.html",
    "href": "chapter_11/concepts.html",
    "title": "Relationship and prediction",
    "section": "",
    "text": "The contents will appear later\n\n\n\nThis section will cover the lecture delivered as part of the in-person course. Slides will appear here shortly before the lesson, followed by the summary of the contents in the days after, based on the lecture transcript.\nHave a look at the related reading in the meantime.\n\n\n\n\n\n\n\n\nRelated reading\n\n\n\nChapter Spatial Regression from the Geographic Data Science with Python by Rey, Arribas-Bel, and Wolf (2023).\n\n\n\n\n\n\nReferences\n\nRey, Sergio, Dani Arribas-Bel, and Levi John Wolf. 2023. Geographic Data Science with Python. Chapman & Hall/CRC Texts in Statistical Science. London, England: Taylor & Francis."
  }
]